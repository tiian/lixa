<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('lixa')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_lixa.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('lixa.so')) return;
    } else {
      if (!dl('lixa.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class lixa {
	const TX_H_VERSION = TX_H_VERSION;

	const XIDDATASIZE = XIDDATASIZE;

	const NULLXID = NULLXID;

	const TX_COMMIT_COMPLETED = TX_COMMIT_COMPLETED;

	const TX_COMMIT_DECISION_LOGGED = TX_COMMIT_DECISION_LOGGED;

	const TX_UNCHAINED = TX_UNCHAINED;

	const TX_CHAINED = TX_CHAINED;

	const TX_ACTIVE = TX_ACTIVE;

	const TX_TIMEOUT_ROLLBACK_ONLY = TX_TIMEOUT_ROLLBACK_ONLY;

	const TX_ROLLBACK_ONLY = TX_ROLLBACK_ONLY;

	const TX_NOT_SUPPORTED = TX_NOT_SUPPORTED;

	const TX_OK = TX_OK;

	const TX_OUTSIDE = TX_OUTSIDE;

	const TX_ROLLBACK = TX_ROLLBACK;

	const TX_MIXED = TX_MIXED;

	const TX_HAZARD = TX_HAZARD;

	const TX_PROTOCOL_ERROR = TX_PROTOCOL_ERROR;

	const TX_ERROR = TX_ERROR;

	const TX_FAIL = TX_FAIL;

	const TX_EINVAL = TX_EINVAL;

	const TX_COMMITTED = TX_COMMITTED;

	const TX_NO_BEGIN = TX_NO_BEGIN;

	const TX_ROLLBACK_NO_BEGIN = TX_ROLLBACK_NO_BEGIN;

	const TX_MIXED_NO_BEGIN = TX_MIXED_NO_BEGIN;

	const TX_HAZARD_NO_BEGIN = TX_HAZARD_NO_BEGIN;

	const TX_COMMITTED_NO_BEGIN = TX_COMMITTED_NO_BEGIN;

	static function tx_begin() {
		return tx_begin();
	}

	static function tx_close() {
		return tx_close();
	}

	static function tx_commit() {
		return tx_commit();
	}

	static function tx_info($info) {
		return tx_info($info);
	}

	static function tx_open() {
		return tx_open();
	}

	static function tx_rollback() {
		return tx_rollback();
	}

	static function tx_set_commit_return($when_return) {
		return tx_set_commit_return($when_return);
	}

	static function tx_set_transaction_control($control) {
		return tx_set_transaction_control($control);
	}

	static function tx_set_transaction_timeout($timeout) {
		return tx_set_transaction_timeout($timeout);
	}
}

/* PHP Proxy Classes */
class xid_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'xid_t_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_lixa_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('xid_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'xid_t_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_lixa_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_xid_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_xid_t();
	}
}

class tx_info_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'tx_info_t_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_lixa_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('tx_info_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'tx_info_t_'.$var.'_get';
		if (function_exists($func)) {
			$r = call_user_func($func,$this->_cPtr);
			if (!is_resource($r)) return $r;
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			return new $c($r);
		}
		if ($var === 'thisown') return swig_lixa_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	public function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_tx_info_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_tx_info_t();
	}
}


?>
