<chapter>
  <title>Introduction</title>
  <section>
    <title>What's LIXA extension?</title>
    <para>
      LIXA project is designed to implement a C interface as described in
      <citation>TXspec</citation>; alternatively C++ can be used without
      any specific issue: the C function exposed by LIXA API are wrapped by
      standard <emphasis>extern "C"</emphasis>:
      <screen>
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

[... function prototypes ...]

#ifdef __cplusplus
}
#endif /* __cplusplus */
      </screen>
      LIXA API is not an object oriented interface, but this should not
      hurt you too much if you were developing a C++ software.
    </para>
    <para>
      If you are developing a software using a completely different language
      as Perl, PHP, Python, Ruby and so on, the LIXA C interface will be quite
      useless.
      You could think all you need is a LIXA wrapper for your preferred
      language, but unfortunately wrapping LIXA interface is not enough:
      XA specification (see <citation>XAspec</citation>) needs a 
      <emphasis>live interface</emphasis>
      between the Transaction Manager (i.e. LIXA) and the Resource Managers
      (databases, message oriented middlewares, etc...).
      Most database <quote>drivers</quote> were developed with the intent of
      an exclusive management of the database API; this is fine until you
      need <emphasis>two phase commit</emphasis> (Distributed Transaction
      Processing) and a third uninvited guest, the Trasaction Manager, appears.
    </para>
    <para>
      LIXA extensions are intended to supply you an alternative programming
      language for Distributed Transaction Processing.
    </para>
    <important><para>
	LIXA extensions are <emphasis>100% experimental code</emphasis> and
	should not used for production environments. The code is provided
	in the hope someone will improve it.
    </para></important>
  </section>
</chapter>
