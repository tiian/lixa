<chapter>
  <title>PHP</title>
  <note>
    <para>
      There is not a porting of LIXA to Microsoft Windows operating system;
      LIXA PHP extension is not suitable to operate in a Microsoft Windows
      environment as well as LIXA base technology.
    </para>
    <para>
      Most of the PHP technology is platform independent, but this does not
      apply to LIXA PHP extension: it has been developed and tested using
      GNU/Linux operating system.
    </para>
  </note>
  <section>
    <title>Extension type</title>
    <para>
      LIXA PHP extension is a <emphasis>patch</emphasis> for 
      <link xlink:href="http://www.php.net/">Zend</link>      
      engine. The patch contains:
      <itemizedlist mark='bullet'>
	<listitem><para>
	    a PHP LIXA wrapper dynamically generated using
	    <link xlink:href="http://www.swig.org/">SWIG</link>      
	</para></listitem>
	<listitem><para>
	    a set of changes to PHP database drivers
	</para></listitem>
	<listitem><para>
	    all the build &amp; deploy stuff needed to produce a Zend 
	    (LIXA patched) PHP engine
	</para></listitem>
      </itemizedlist>
    </para>
  </section>
  <section>
    <title>Prerequisites</title>
    <para>
      LIXA wrapper might be dynamically generated using
      <link xlink:href="http://www.swig.org/">SWIG</link>,
      so you should install SWIG on your system before if you desired to
      build the wrapper from scratch. Most times, the LIXA distributed 
      wrapper works fine and you don't have to generate a fresh one.
    </para>
    <para>
      PHP needs some specific versions of <command>autoconf</command>
      as explained in 
      <link xlink:href="http://www.php.net/manual/en/internals2.buildsys.configunix.php">
	Talking to the UNIX build system: config.m4</link>;
      you must install the right version of <command>autoconf</command>
      before going on. Without a valid version of <command>autoconf</command>
      you will not be able to build a Zend PHP engine.
    </para>
    <para>
      For the sake of easiness, this manual shows how to build a fresh
      PHP Zend environment patched with LIXA extension.
      You could patched your previously downloaded PHP environment, but this
      manual tries to keep it easy and uses a freshly downloaded tarball.
    </para>
  </section>
  <section>
    <title>Installation</title>
    <para>
      Locate the <filename>ext/php</filename> directory inside the LIXA source
      tree and enter it; you should find an executable shell script named
      <command>download_and_patch.sh</command> inside it:
      <screen>
tiian@mojan:~/lixa/ext/php$ ls -la download_and_patch.sh
-rwxr-xr-x 1 tiian tiian 4855 2012-03-31 23:37 download_and_patch.sh
      </screen>
      <note>
	<para>
	  You need a running Internet connection before command execution
	  because it will try to download the PHP tarball for you from
	  <link xlink:href="http://docs.php.net/">http://docs.php.net/</link>
	</para>
      </note>
      Command <command>download_and_patch.sh</command> can do most operation
      for you, but you can perform the same manually.
      Try to execute the script from a terminal session:
      <table frame="box">
	<thead><tr><td>[Shell terminal session]</td></tr></thead>
	<tbody><tr><td><screen>
tiian@ubuntu:~/lixa/ext/php$ ./download_and_patch.sh
PHP 5.4.0 will be downloaded...
Checking if wget command is available... wget is /usr/bin/wget
Checking if bunzip2 is available... bunzip2 is /bin/bunzip2
--22:19:05--  http://docs.php.net/get/php-5.4.0.tar.bz2/from/docs.php.net/mirror
           => `php-5.4.0.tar.bz2'
Resolving docs.php.net... 213.175.195.123
Connecting to docs.php.net|213.175.195.123|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://docs.php.net/distributions/php-5.4.0.tar.bz2 [following]
--22:19:05--  http://docs.php.net/distributions/php-5.4.0.tar.bz2
           => `php-5.4.0.tar.bz2'
Connecting to docs.php.net|213.175.195.123|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 11,439,508 (11M) [application/octet-stream]

100%[====================================>] 11,439,508   837.51K/s    ETA 00:00

22:19:19 (819.29 KB/s) - `php-5.4.0.tar.bz2' saved [11439508/11439508]

Deflating PHP source code...
Checking if the downloaded PHP source code can be patched...
File lixa-php-5.4.0-patch.diff exists, trying patch command...
patching file php-5.4.0/ext/mysqli/mysqli_api.c
patching file php-5.4.0/ext/mysqli/mysqli_nonapi.c
patching file php-5.4.0/ext/mysqli/php_mysqli_structs.h
patching file php-5.4.0/ext/lixa/config.m4
Patching PHP source code...
patching file php-5.4.0/ext/mysqli/mysqli_api.c
patching file php-5.4.0/ext/mysqli/mysqli_nonapi.c
patching file php-5.4.0/ext/mysqli/php_mysqli_structs.h
patching file php-5.4.0/ext/lixa/config.m4
PHP source code successfully patched!
Removing php-5.4.0/configure and some stuff...
Creating new configure script...
Forcing buildconf
buildconf: checking installation...
buildconf: autoconf version 2.61 (ok)
rebuilding configure
rebuilding main/php_config.h.in
Checking configure recognize LIXA extension...
  --with-lixa=FILE        Include LIXA support. File is the path to lixa-config program
  --enable-lixa-swig      Generate LIXA wrapper using SWIG

************************************************************************
  PHP source code in directory php-5.4.0 is ready for build and deploy;

  use --with-lixa=/opt/lixa/bin/lixa-config (or different path if you
  not using LIXA default path) to enable LIXA extension for PHP

  use --enable-lixa-swig if you want to generate LIXA PHP wrapper from
  scratch using SWIG software (this should not be necessary most times)
************************************************************************
	</screen></td></tr></tbody>
      </table>
      These are the steps performed by the script:
      <orderedlist numeration='arabic'>
	<listitem>
	  <para>
	    download PHP tarball using <command>wget</command> from
	    http://docs.php.net/
	  </para>
	  <para>
	    if <command>bunzip2</command> is installed, 
	    <filename>.tar.bz2</filename> will be downloaded;
	    if <command>gunzip</command> is installed, 
	    <filename>.tar.gz</filename> will be downloaded;
	  </para>
	</listitem>
	<listitem><para>
	    extract tarball locally
	</para></listitem>
	<listitem><para>
	    create <filename>php-X.Y.Z/ext/lixa</filename> directory and 
	    populate it with <filename>config.m4 lixa.c lixa.php 
	      php_lixa.h</filename>
	</para></listitem>
	<listitem><para>
	    patch PHP Zend source code
	</para></listitem>
	<listitem><para>
	    clean-up PHP build environment 
	    (<command>rm -vf configure autom4te.cache/*</command>)
	</para></listitem>
	<listitem><para>
	    reset PHP build environment
	    (<command>./buildconf --force</command>)
	</para></listitem>
	<listitem><para>
	    check PHP build is LIXA enabled
	    (<command>./configure --help | grep lixa</command>)
	</para></listitem>
      </orderedlist>
    </para>
    <para>
      You are now ready to run <command>configure</command> specifying all
      the desired values; you should refer to official Zend documentation
      <link xlink:href="http://www.php.net/manual/en/install.php">
	<quote>Installation and Configuration</quote>
      </link>      
      and
      <link xlink:href="http://www.php.net/manual/en/internals2.php">
	<quote>PHP at the Core: A Hacker's Guide to the Zend Engine</quote>
      </link>
      to retrieve all the information necessary to build your own PHP
      engine starting from the source code.
    </para>
    <para>
      The command shown in the below table is an example for a test 
      environment; you would probably need something different (HTTP server
      modules and so on...).
      <table frame="box">
	<thead><tr><td>[Shell terminal session]</td></tr></thead>
	<tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php$ cd php-5.4.0
tiian@mojan:~/lixa/ext/php/php-5.4.0$ nice ./configure --enable-debug \
> --enable-maintainer-zts --enable-cgi --enable-cli --enable-shared \
> --with-mysqli=/usr/bin/mysql_config --with-pgsql \
> --with-oci8=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server \
> --with-lixa=/opt/lixa/bin/lixa-config \
> --prefix=/opt/php-5.4-lixa
	</screen></td></tr></tbody>
      </table>
      In case you might want to generate LIXA PHP wrapper source code
      using SWIG you
      should add <option>--enable-lixa-swig</option> to 
      <command>configure</command> command line.
      <important>
	<para>
	  Most times the wrapper supplied with LIXA distribution works
	  fine and you <emphasis>don't have to</emphasis> generate a fresh
	  one. Sometimes, a locally generated wrapper does not work due to
	  some SWIG issue.
	</para>
	<para>
	  The <option>--enable-lixa-swig</option> option is basically
	  designed for LIXA maintainers.
	</para>
      </important>
    </para>
    <section>
      <title>LIXA details</title>
      <para>
	If you were building a Zend LIXA patched PHP engine, you should pay
	attention to some specific issues:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      it's not mandatory, but it's <emphasis>strongly</emphasis>
	      suggested you will use a specific verbose installation path
	      (<option>--prefix=/opt/php-5.4-lixa</option> in the 
	      above example)
	  </para></listitem>
	  <listitem><para>
	      to enable LIXA support you must specify something like
	      <option>--with-lixa=/opt/lixa/bin/lixa-config</option>
	      (if you didn't install LIXA in default path, you would specify
	      a different path for <filename>lixa-config</filename> utility
	      program)
	  </para></listitem>
	  <listitem>
	    <para>
	      <quote>mysqli</quote> extension provided by Zend engine can
	      be used with LIXA <emphasis>only</emphasis> if standard 
		  MySQL client library is
	      wrapped by mysqli (this is not the defaul behavior in the latest
	      releases of Zend PHP)<footnote><para>MySQL 
		  <quote>Native Driver</quote> can not be used with LIXA
		  because it should be managed as a distinct Resource Manager,
		  not as a standard MySQL one</para></footnote>.
	    </para>
	    <para>
	      You can use something like this to force the usage of standard
	      MySQL client library instead of <quote>Native Driver</quote>
	      provided by Zend:
	      <option>--with-mysqli=/usr/bin/mysql_config</option>
	    </para>
	  </listitem>
	</itemizedlist>	
      </para>
    </section>
  </section>
</chapter>
