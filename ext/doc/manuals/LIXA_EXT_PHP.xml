<chapter>
  <title>PHP</title>
  <note>
    <para>
      There is not a porting of LIXA to Microsoft Windows operating system;
      LIXA PHP extension is not suitable to operate in a Microsoft Windows
      environment as well as LIXA base technology.
    </para>
    <para>
      Most of the PHP technology is platform independent, but this does not
      apply to LIXA PHP extension: it has been developed and tested using
      GNU/Linux operating system.
    </para>
  </note>
  <section>
    <title>Extension type</title>
    <para>
      LIXA PHP extension is a <emphasis>patch</emphasis> for 
      <link xlink:href="http://www.php.net/">Zend</link>      
      engine. The patch contains:
      <itemizedlist mark='bullet'>
	<listitem><para>
	    a PHP LIXA wrapper generated using
	    <link xlink:href="http://www.swig.org/">SWIG</link>      
	</para></listitem>
	<listitem><para>
	    a set of changes to some PHP database drivers
	</para></listitem>
	<listitem><para>
	    all the build &amp; deploy stuff needed to produce a Zend 
	    (LIXA patched) PHP engine
	</para></listitem>
      </itemizedlist>
    </para>
  </section>
  <section>
    <title>Prerequisites</title>
    <para>
      LIXA wrapper might be dynamically generated using
      <link xlink:href="http://www.swig.org/">SWIG</link>:
      you should install SWIG on your system in advance if you desired to
      build the wrapper from scratch. Most times, the LIXA distributed 
      wrapper works fine and you don't have to generate a fresh one.
    </para>
    <para>
      PHP needs some specific versions of <command>autoconf</command>
      as explained in 
      <link xlink:href="http://www.php.net/manual/en/internals2.buildsys.configunix.php">
	Talking to the UNIX build system: config.m4</link>;
      you must install the right version of <command>autoconf</command>
      before going on. Without a valid version of <command>autoconf</command>
      you will not be able to build a Zend PHP engine.
    </para>
    <para>
      For the sake of easiness, this manual shows how to build a fresh
      PHP Zend environment patched with the LIXA provided extension.
      You could patch your own previously downloaded PHP environment, but this
      manual tries to keep it simple and uses a freshly downloaded tarball.
    </para>
  </section>
  <section xml:id="PHP_installation">
    <title>Installation</title>
    <para>
      Locate the <filename>ext/php</filename> directory inside the LIXA source
      tree and enter it; you should find an executable shell script named
      <command>download_and_patch.sh</command> inside it:
      <screen>
tiian@mojan:~/lixa/ext/php$ ls -la download_and_patch.sh
-rwxr-xr-x 1 tiian tiian 4855 2012-03-31 23:37 download_and_patch.sh
      </screen>
      <note>
	<para>
	  You need a running Internet connection before command execution
	  because it will try to download the PHP tarball for you from
	  <link xlink:href="http://docs.php.net/">http://docs.php.net/</link>
	</para>
      </note>
      Command <command>download_and_patch.sh</command> can do most operation
      for you, but you can perform the same manually.
      Try to execute the script from a terminal session:
      <table frame="box">
	<thead><tr><td>[Shell terminal session]</td></tr></thead>
	<tbody><tr><td><screen>
tiian@ubuntu:~/lixa/ext/php$ ./download_and_patch.sh
PHP 5.4.0 will be downloaded...
Checking if wget command is available... wget is /usr/bin/wget
Checking if bunzip2 is available... bunzip2 is /bin/bunzip2
--22:19:05--  http://docs.php.net/get/php-5.4.0.tar.bz2/from/docs.php.net/mirror
           => `php-5.4.0.tar.bz2'
Resolving docs.php.net... 213.175.195.123
Connecting to docs.php.net|213.175.195.123|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://docs.php.net/distributions/php-5.4.0.tar.bz2 [following]
--22:19:05--  http://docs.php.net/distributions/php-5.4.0.tar.bz2
           => `php-5.4.0.tar.bz2'
Connecting to docs.php.net|213.175.195.123|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 11,439,508 (11M) [application/octet-stream]

100%[====================================>] 11,439,508   837.51K/s    ETA 00:00

22:19:19 (819.29 KB/s) - `php-5.4.0.tar.bz2' saved [11439508/11439508]

Deflating PHP source code...
Checking if the downloaded PHP source code can be patched...
File lixa-php-5.4.0-patch.diff exists, trying patch command...
patching file php-5.4.0/ext/mysqli/mysqli_api.c
patching file php-5.4.0/ext/mysqli/mysqli_nonapi.c
patching file php-5.4.0/ext/mysqli/php_mysqli_structs.h
patching file php-5.4.0/ext/lixa/config.m4
Patching PHP source code...
patching file php-5.4.0/ext/mysqli/mysqli_api.c
patching file php-5.4.0/ext/mysqli/mysqli_nonapi.c
patching file php-5.4.0/ext/mysqli/php_mysqli_structs.h
patching file php-5.4.0/ext/lixa/config.m4
PHP source code successfully patched!
Removing php-5.4.0/configure and some stuff...
Creating new configure script...
Forcing buildconf
buildconf: checking installation...
buildconf: autoconf version 2.61 (ok)
rebuilding configure
rebuilding main/php_config.h.in
Checking configure recognize LIXA extension...
  --with-lixa=FILE        Include LIXA support. File is the path to lixa-config program
  --enable-lixa-swig      Generate LIXA wrapper using SWIG

************************************************************************
  PHP source code in directory php-5.4.0 is ready for build and deploy;

  use --with-lixa=/opt/lixa/bin/lixa-config (or different path if you
  not using LIXA default path) to enable LIXA extension for PHP

  use --enable-lixa-swig if you want to generate LIXA PHP wrapper from
  scratch using SWIG software (this should not be necessary most times)
************************************************************************
	</screen></td></tr></tbody>
      </table>
      <note>
	<para>
	  If you wanted a specific PHP version, pass it as the first argument
	  to <command>download_and_patch.sh</command> command:
	  <screen>
	    ./download_and_patch.sh 5.4.3
	  </screen>
	</para>
      </note>
      These are the steps performed by the script:
      <orderedlist numeration='arabic'>
	<listitem>
	  <para>
	    download PHP tarball using <command>wget</command> from
	    http://docs.php.net/
	  </para>
	  <para>
	    if <command>bunzip2</command> is installed, 
	    <filename>.tar.bz2</filename> will be downloaded;
	    if <command>gunzip</command> is installed, 
	    <filename>.tar.gz</filename> will be downloaded;
	  </para>
	</listitem>
	<listitem><para>
	    extract tarball locally
	</para></listitem>
	<listitem><para>
	    create <filename>php-X.Y.Z/ext/lixa</filename> directory and 
	    populate it with <filename>config.m4 lixa.c lixa.php 
	      php_lixa.h</filename>
	</para></listitem>
	<listitem><para>
	    patch PHP Zend source code
	</para></listitem>
	<listitem><para>
	    clean-up PHP build environment 
	    (<command>rm -vf configure autom4te.cache/*</command>)
	</para></listitem>
	<listitem><para>
	    reset PHP build environment
	    (<command>./buildconf --force</command>)
	</para></listitem>
	<listitem><para>
	    check PHP build is LIXA enabled
	    (<command>./configure --help | grep lixa</command>)
	</para></listitem>
      </orderedlist>
    </para>
    <para>
      You are now ready to run <command>configure</command> specifying all
      the desired values; you should refer to official Zend documentation
      <link xlink:href="http://www.php.net/manual/en/install.php">
	<quote>Installation and Configuration</quote>
      </link>      
      and
      <link xlink:href="http://www.php.net/manual/en/internals2.php">
	<quote>PHP at the Core: A Hacker's Guide to the Zend Engine</quote>
      </link>
      to retrieve all the information necessary to build your own PHP
      engine starting from the source code.
    </para>
    <para>
      The command shown in the below table is an example for a test 
      environment; you would probably need something different (HTTP server
      modules and so on...).
      <table frame="box">
	<thead><tr><td>[Shell terminal session]</td></tr></thead>
	<tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php$ cd php-5.4.0
tiian@mojan:~/lixa/ext/php/php-5.4.0$ nice ./configure --enable-debug \
> --enable-maintainer-zts --enable-cgi --enable-cli --enable-shared \
> --with-mysqli=/usr/bin/mysql_config --with-pgsql \
> --with-oci8=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server \
> --with-lixa=/opt/lixa/bin/lixa-config \
> --prefix=/opt/php-5.4-lixa
	</screen></td></tr></tbody>
      </table>
      In case you might want to generate LIXA PHP wrapper source code
      using SWIG you
      should add <option>--enable-lixa-swig</option> to 
      <command>configure</command> command line, but most times this 
      should not be necessary.
      <important>
	<para>
	  Most times the wrapper supplied with LIXA distribution works
	  fine and you <emphasis>don't have to</emphasis> generate a fresh
	  one. Sometimes, a locally generated wrapper does not work due to
	  some SWIG issue.
	</para>
	<para>
	  The <option>--enable-lixa-swig</option> option is basically
	  designed for LIXA maintainers.
	</para>
      </important>
      <warning>
	<para>
	  LIXA software must be compiled and installed with all the Resource
	  Managers you want to use from PHP. If you did not configure and 
	  install LIXA for MySQL, you would <emphasis>not</emphasis> 
	  be able to use MySQL from PHP as a Resource Manager coordinated 
	  by LIXA Transaction Manager. The same is true for PostgreSQL, 
	  Oracle, and so on...
	</para>
	<para>
	  Use command <command>/opt/lixa/bin/lixa-config -r</command> to
	  discover which Resource Managers can be used by your installed 
	  LIXA software.
	</para>
      </warning>
    </para>
    <para>
      After <command>configure</command> you must proceed with
      <command>make</command> and <command>make install</command>;
      please refer to
      <link xlink:href="http://www.php.net/manual/en/install.unix.php">
	<quote>Installation on Unix systems</quote>
      </link>
      for the details related to PHP installation.
      This is what should happen with <command>make</command>:
      <table frame="box">
	<thead><tr><td>[Shell terminal session]</td></tr></thead>
	<tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php$ cd php-5.4.0
tiian@mojan:~/lixa/ext/php/php-5.4.0$ nice make
[...]
Generating phar.php
Generating phar.phar
PEAR package PHP_Archive not installed: generated phar will require PHP's phar extension be enabled.
directorytreeiterator.inc
directorygraphiterator.inc
pharcommand.inc
clicommand.inc
invertedregexiterator.inc
phar.inc

Build complete.
Don't forget to run 'make test'.
	</screen></td></tr></tbody>
      </table>
      and with <command>make install</command>
      <table frame="box">
	<thead><tr><td>[Shell terminal session]</td></tr></thead>
	<tbody><tr><td><screen>
tiian@ubuntu:~/lixa/ext/php/php-5.4.0$ sudo nice make install
[sudo] password for tiian:
Installing PHP CLI binary:        /opt/php-5.4-lixa/bin/
Installing PHP CLI man page:      /opt/php-5.4-lixa/php/man/man1/
Installing PHP CGI binary:        /opt/php-5.4-lixa/bin/
Installing build environment:     /opt/php-5.4-lixa/lib/php/build/
Installing header files:          /opt/php-5.4-lixa/include/php/
Installing helper programs:       /opt/php-5.4-lixa/bin/
  program: phpize
  program: php-config
Installing man pages:             /opt/php-5.4-lixa/php/man/man1/
  page: phpize.1
  page: php-config.1
Installing PEAR environment:      /opt/php-5.4-lixa/lib/php/
[PEAR] Archive_Tar    - installed: 1.3.7
[PEAR] Console_Getopt - installed: 1.3.0
[PEAR] Structures_Graph- installed: 1.0.4
[PEAR] XML_Util       - installed: 1.2.1
[PEAR] PEAR           - installed: 1.9.4
Wrote PEAR system config file at: /opt/php-5.4-lixa/etc/pear.conf
You may want to add: /opt/php-5.4-lixa/lib/php to your php.ini include_path
/home/tiian/lixa/ext/php/php-5.4.0/build/shtool install -c ext/phar/phar.phar /opt/php-5.4-lixa/bin
ln -s -f /opt/php-5.4-lixa/bin/phar.phar /opt/php-5.4-lixa/bin/phar
Installing PDO headers:          /opt/php-5.4-lixa/include/php/ext/pdo/
	</screen></td></tr></tbody>
      </table>
    </para>
    <section>
      <title>PHP environment</title>
      <para>
	If everything went right you would build a PHP environment patched for
	LIXA. It should behaves exactly as a standard PHP environment until
	you start to use LIXA specific features.
      </para>
    </section>
    <section>
      <title>Testing LIXA PHP integration</title>
      <para>
	LIXA PHP integration supplies some basic case tests you can execute
	to verify the build and install process went right.
      </para>
      <para>
	Move to PHP source root directory and execute the LIXA related tests
	as shown below:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu:~/lixa/ext/php/php-5.4.0$ TEST_PHP_EXECUTABLE=/opt/php-5.4-lixa/bin/php /opt/php-5.4-lixa/bin/php run-tests.php ext/lixa/tests/

=====================================================================
PHP         : /tmp/php-5.4-lixa/bin/php 
PHP_SAPI    : cli
PHP_VERSION : 5.4.0
ZEND_VERSION: 2.4.0
PHP_OS      : Linux - Linux mojan 2.6.32-40-generic #87-Ubuntu SMP Mon Mar 5 20:26:31 UTC 2012 i686
INI actual  : /tmp/lixa-0.9.0/ext/php/php-5.4.0
More .INIs  :  
CWD         : /tmp/lixa-0.9.0/ext/php/php-5.4.0
Extra dirs  : 
VALGRIND    : Not used
=====================================================================
Running selected tests.
PASS LIXA T.M. availability - basic test: the T.M. is up and running [ext/lixa/tests/lixa_001.phpt] 
PASS LIXA T.M. trivial commit - basic test: a trivial commit transaction [ext/lixa/tests/lixa_002.phpt] 
PASS LIXA mysqli availability - basic test: MySQL is reachable with mysqli [ext/lixa/tests/lixa_003.phpt] 
PASS LIXA mysqli integration - a simple transaction using LIXA and MySQL (mysqli
driver) [ext/lixa/tests/lixa_004.phpt] 
=====================================================================
Number of tests :    4                 4
Tests skipped   :    0 (  0.0%) --------
Tests warned    :    0 (  0.0%) (  0.0%)
Tests failed    :    0 (  0.0%) (  0.0%)
Expected fail   :    0 (  0.0%) (  0.0%)
Tests passed    :    4 (100.0%) (100.0%)
---------------------------------------------------------------------
Time taken      :    1 seconds
=====================================================================
	  </screen></td></tr></tbody>
	</table>
	Pay attention you must specify the PHP installation path twice in
	command <command>TEST_PHP_EXECUTABLE=/opt/php-5.4-lixa/bin/php /opt/php-5.4-lixa/bin/php run-tests.php ext/lixa/tests/</command>
      </para>
      <note>
	<para>
	  If you were interested in executing the whole PHP test suite,
	  you would use command <command>make test</command>: the PHP
	  environment would execute all the PHP tests, LIXA supplied too.
	</para>
      </note>
      <warning>
	<para>
	  Some case tests need specific third party Resource Managers
	  configuration: the same configuration required to run
	  LIXA PHP examples (see
	  <xref linkend="Using_LIXA_extension_for_PHP"/>)
	  is required for the test cases as well.
	</para>
      </warning>
    </section>
    <section>
      <title>LIXA details</title>
      <para>
	If you were building a Zend LIXA patched PHP engine, you should pay
	attention to some specific issues:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      it's not mandatory, but it's <emphasis>strongly</emphasis>
	      suggested you will use a specific verbose installation path
	      (<option>--prefix=/opt/php-5.4-lixa</option> in the 
	      above example)
	  </para></listitem>
	  <listitem><para>
	      to enable LIXA support you must specify something like
	      <option>--with-lixa=/opt/lixa/bin/lixa-config</option>
	      (if you didn't install LIXA in default path, you would specify
	      a different path for <filename>lixa-config</filename> utility
	      program)
	  </para></listitem>
	  <listitem>
	    <para>
	      <quote>mysqli</quote> extension provided by Zend engine can
	      be used with LIXA <emphasis>only</emphasis> if standard 
		  MySQL client library is
	      wrapped by mysqli (this is not the defaul behavior in the latest
	      releases of Zend PHP)<footnote><para>MySQL 
		  <quote>Native Driver</quote> can not be used with LIXA
		  because it should be managed as a distinct Resource Manager,
		  not as a standard MySQL one</para></footnote>.
	    </para>
	    <para>
	      You can use something like this to force the usage of standard
	      MySQL client library instead of <quote>Native Driver</quote>
	      provided by Zend:
	      <option>--with-mysqli=/usr/bin/mysql_config</option>
	    </para>
	  </listitem>
	</itemizedlist>	
      </para>
    </section>
  </section>
  <section xml:id="Using_LIXA_extension_for_PHP">
    <title>Using LIXA extension for PHP</title>
    <para>
      LIXA extension is useful to perform Distributed Transaction Processing
      with an Application Program that uses two or more Resource Managers.
      It can be used with an Application Program that uses one Resource
      Manager, but it gives no advantages if compared with the native 
      transactional support supplied by the Resource Manager itself.
    </para>
    <para>
      Some examples will show you some configurations with only one 
      Resource Manager: they are provided as an introducing step to 
      more complex examples.
    </para>
    <section>
      <title>LIXA PHP Application Programming Interface (API)</title>
      <para>
	If you compiled LIXA extension as a core extension, there's no need
	to specify something like this in your PHP source code:
	<table frame="box">
	  <thead><tr><td>[PHP source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php
    include("lixa.php")
    ...
?&gt;
	  </screen></td></tr></tbody>
	</table>
	where <filename>lixa.php</filename> is the file provided in
	<filename>ext/php</filename> LIXA source directory.
	If you compiled LIXA as a stand-alone extension you need to place
	<filename>lixa.php</filename> file in a suitable directory and
	configure your <filename>php.ini</filename> to allow LIXA extension
	shared object retrieval using something like:
	<table frame="box">
	  <thead><tr><td>[php.ini config file]</td></tr></thead>
	  <tbody><tr><td><screen>
extension=/path/to/php/extensions/lixa/modules/lixa.so
	  </screen></td></tr></tbody>
	</table>
	This manual will not talk about this scenario because the standard
	procedure explained in <xref linkend="PHP_installation"/>
	produces a core extension by default.
      </para>
      <para>
	The easiest LIXA PHP example might probably be the following one:
	<table frame="box">
	  <thead><tr><td>[PHP source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php
        $rc=tx_open();
        print "tx_open() --&gt; $rc\n";
        $rc=tx_close();
        print "tx_close() --&gt; $rc\n";
?&gt;
	  </screen></td></tr></tbody>
	</table>
	You can copy the above source code in file <filename>foo.php</filename>
	and execute it using something like:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/tmp$ /opt/php-5.4-lixa/bin/php foo.sh 
tx_open() --&gt; 0
tx_close() --&gt; 0
	  </screen></td></tr></tbody>
	</table>
	If your LIXA state server (<command>lixad</command>) was not up and
	running, you would get something like this:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/tmp$ /opt/php-5.4-lixa/bin/php foo.sh 
tx_open() --&gt; -7
tx_close() --&gt; -7
	  </screen></td></tr></tbody>
	</table>
	and you can activate your LIXA state server (and restart the example)
	with something like this:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/tmp$ sudo su - lixa
lixa@mojan:~$ /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ ps -ef|grep lixad
lixa      7388     1  0 22:44 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
lixa      7393  7378  0 22:44 pts/3    00:00:00 grep lixad
lixa@mojan:~$ exit
logout
tiian@mojan:~/tmp$ /opt/php-5.4-lixa/bin/php foo.sh 
tx_open() --&gt; 0
tx_close() --&gt; 0
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	A second example can show how TX constants are defined; change your
	<filename>foo.php</filename> source file as below:
	<table frame="box">
	  <thead><tr><td>[PHP source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php
        $rc=tx_open();
        print "tx_open() --&gt; $rc\n";
        $rc=tx_close();
        print "tx_close() --&gt; $rc\n";
	$tx_ok=TX_OK;
	$tx_fail=TX_FAIL;
	echo "TX_OK=" . $tx_ok . "\tTX_FAIL=" . $tx_fail . "\n";
?&gt;
	  </screen></td></tr></tbody>
	</table>
	And execute it again:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/tmp$ /opt/php-5.4-lixa/bin/php foo.sh 
tx_open() --&gt; 0
tx_close() --&gt; 0
TX_OK=0	TX_FAIL=-7
	  </screen></td></tr></tbody>
	</table>
	All the stuff defined in <citation>TXspec</citation> (and available
	in C header file <filename>tx.h</filename>) is available from PHP as
	well as from C. File <filename>lixa.php</filename> define the
	functions and the constants provided by LIXA PHP extension.
      </para>
    </section>
    <section>
      <title>An example with dummy Resource Managers</title>
      <para>
	Please move to directory <filename>ext/php/examples</filename>
	and take a look to <filename>example01_lixa.php</filename>: it's a
	simple 4 steps program that tries to:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      open (connect to) all the Resource Managers
	  </para></listitem>
	  <listitem><para>
	      start a new transaction
	  </para></listitem>
	  <listitem><para>
	      commit the transaction started before
	  </para></listitem>
	  <listitem><para>
	      close (disconnect from) all the Resource Managers
	  </para></listitem>
	</itemizedlist>
	Take a look to the source code:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ cat example01_lixa.php 
&lt;?php	
	print "Trying to open all the Resource Managers with tx_open()...\n";
	$rc=tx_open();
	if (TX_OK != $rc) 
		exit("tx_open returned rc=$rc, can't going on!\n");
	
	print "Trying to start a new transaction with tx_begin()...\n";	
	$rc=tx_begin();
	if (TX_OK != $rc) 
		exit("tx_begin returned rc=$rc, can't going on!\n");

	print "Trying to commit the transaction with tx_commit()...\n";	
	$rc=tx_commit();
	if (TX_OK != $rc) 
		exit("tx_commit returned rc=$rc, can't going on!\n");

	print "Trying to close all the Resource Managers with tx_close()...\n";
	$rc=tx_close();
	if (TX_OK != $rc) 
		exit("tx_close returned rc=$rc, can't going on!\n");

	print "Execution completed!\n";
?&gt;
	  </screen></td></tr></tbody>
	</table>
	It's time to execute this simple program without a specific value for
	<varname>LIXA_PROFILE</varname> and without an active LIXA state
	server:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE

tiian@mojan:~/lixa/ext/php/examples$ ps -ef|grep lixad|grep -v grep
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example01_lixa.php 
Trying to open all the Resource Managers with tx_open()...
tx_open returned rc=-7, can't going on!
	  </screen></td></tr></tbody>
	</table>
	<function>tx_open</function> returns the value 
	<varname>-7 (TX_FAIL)</varname>
	<footnote>
	  <para>Refer to file <filename>/opt/lixa/include/tx.h</filename> 
	    for TX return codes and their meaning.
	  </para>
	</footnote>
	because the LIXA state server is not
	available.
      </para>
      <para>
	Start the LIXA state server and try it again:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ sudo su - lixa
lixa@mojan:~$ /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ ps -ef|grep lixad|grep -v grep
lixa      9050     1  0 17:13 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ exit
logout
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example01_lixa.php 
Trying to open all the Resource Managers with tx_open()...
Trying to start a new transaction with tx_begin()...
Trying to commit the transaction with tx_commit()...
Trying to close all the Resource Managers with tx_close()...
Execution completed!
	  </screen></td></tr></tbody>
	</table>
	Assuming your LIXA installation was build with MySQL support and
	MySQL server is not available, you can try what happens when you
	try to execute the program using a profile that needs MySQL:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ /opt/lixa/bin/lixa-config -r|grep MySQL
MySQL		yes
tiian@mojan:~/lixa/ext/php/examples$ ps -ef|grep lixad|grep -v grep
lixa      9176     1  0 17:17 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
tiian@mojan:~/lixa/ext/php/examples$ ps -ef|grep mysql|grep -v grep
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_PROFILE=MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE
MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example01_lixa.php 
Trying to open all the Resource Managers with tx_open()...
tx_open returned rc=-6, can't going on!
	  </screen></td></tr></tbody>
	</table>
	<function>tx_open</function> returns the value 
	<varname>-6 (TX_ERROR)</varname>
	because one Resource Manager (MySQL) is not available; start the
	MySQL Resource Manager and this will be the new behavior:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ sudo service mysql start
mysql start/running, process 9246
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example01_lixa.php 
Trying to open all the Resource Managers with tx_open()...
Trying to start a new transaction with tx_begin()...
Trying to commit the transaction with tx_commit()...
Trying to close all the Resource Managers with tx_close()...
Execution completed!
	  </screen></td></tr></tbody>
	</table>
	You can activate LIXA tracing for PHP programs as described in
	<citation>LIXArg</citation>:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_TRACE_MASK=0x00002000
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example01_lixa.php 
Trying to open all the Resource Managers with tx_open()...
2012-04-06 17:26:15.866963 [9324/3077965600] lixa_xa_open
2012-04-06 17:26:15.867094 [9324/3077965600] lixa_xa_open: fd = 4
2012-04-06 17:26:15.867200 [9324/3077965600] lixa_xa_open: sending 298 bytes ('000292&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;msg level="0" verb="1" step="8"&gt;&lt;client job="ddd45999a1b1c6edd8983fbe5ca89b89/127.0.0.1      " config_digest="ddd45999a1b1c6edd8983fbe5ca89b89" maint="0"/&gt;&lt;rsrmgrs&gt;&lt;rsrmgr rmid="0" dynamic="0" name="MySQL_stareg" xa_name="MySQL[LIXA]"/&gt;&lt;/rsrmgrs&gt;&lt;/msg&gt;') to the server for step 8 (socket fd 4)
2012-04-06 17:26:15.867753 [9324/3077965600] lixa_xa_open: received 95 bytes from the server |&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;msg level="0" verb="1" step="16"&gt;&lt;answer rc="0"/&gt;&lt;/msg&gt;|
2012-04-06 17:26:15.881197 [9324/3077965600] lixa_xa_open: xa_open_entry('host=localhost,user=lixa,passwd=,db=lixa,client_flag=0', 0, 0x0) = 0
2012-04-06 17:26:15.881293 [9324/3077965600] lixa_xa_open: sending 257 bytes to the server for step 24
2012-04-06 17:26:15.881624 [9324/3077965600] lixa_xa_open/excp=12/ret_cod=0/errno=0
Trying to start a new transaction with tx_begin()...
2012-04-06 17:26:15.883409 [9324/3077965600] lixa_xa_start
2012-04-06 17:26:15.883557 [9324/3077965600] lixa_xa_start: sending 213 bytes to the server for step 8
2012-04-06 17:26:15.884574 [9324/3077965600] lixa_xa_start: receiving 95 bytes from the server |&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;msg level="0" verb="3" step="16"&gt;&lt;answer rc="0"/&gt;&lt;/msg&gt;|
2012-04-06 17:26:15.893130 [9324/3077965600] lixa_xa_start: xa_start_entry(xid, 0, 0x0) = 0
2012-04-06 17:26:15.893228 [9324/3077965600] lixa_xa_start: sending 210 bytes to the server for step 24
2012-04-06 17:26:15.893552 [9324/3077965600] lixa_xa_start/excp=10/ret_cod=0/errno=0
Trying to commit the transaction with tx_commit()...
2012-04-06 17:26:15.893678 [9324/3077965600] lixa_xa_end
2012-04-06 17:26:15.894033 [9324/3077965600] lixa_xa_end: xa_end_entry(xid, 0, 0x4000000) = 0
2012-04-06 17:26:15.894125 [9324/3077965600] lixa_xa_end: sending 208 bytes to the server for step 8
2012-04-06 17:26:15.898574 [9324/3077965600] lixa_xa_end: receiving 95 bytes from the server |&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;msg level="0" verb="4" step="16"&gt;&lt;answer rc="0"/&gt;&lt;/msg&gt;|
2012-04-06 17:26:15.898876 [9324/3077965600] lixa_xa_end/excp=8/ret_cod=0/errno=0
2012-04-06 17:26:15.898959 [9324/3077965600] lixa_xa_commit
2012-04-06 17:26:15.899004 [9324/3077965600] lixa_xa_commit: one_phase_commit=1
2012-04-06 17:26:15.899403 [9324/3077965600] lixa_xa_commit: xa_commit_entry(xid, 0, 0x40000000) = 0
2012-04-06 17:26:15.899512 [9324/3077965600] lixa_xa_commit: sending 218 bytes to the server for step 8
2012-04-06 17:26:15.899632 [9324/3077965600] lixa_xa_commit/excp=7/ret_cod=0/errno=0
2012-04-06 17:26:15.899687 [9324/3077965600] lixa_xa_forget
2012-04-06 17:26:15.899747 [9324/3077965600] lixa_xa_forget/excp=3/ret_cod=0/errno=0
Trying to close all the Resource Managers with tx_close()...
2012-04-06 17:26:15.899856 [9324/3077965600] lixa_xa_close
2012-04-06 17:26:15.899975 [9324/3077965600] lixa_xa_close: xa_close_entry('', 0, 0x0) = 0
2012-04-06 17:26:15.900058 [9324/3077965600] lixa_xa_close: sending 121 bytes to the server for step 8
2012-04-06 17:26:15.900145 [9324/3077965600] lixa_xa_close/excp=5/ret_cod=0/errno=0
Execution completed!
	  </screen></td></tr></tbody>
	</table>
	Trace messages go to <filename>stderr</filename>.
      </para>
    </section>
    <section xml:id="An_example_with_MySQL">
      <title>An example with MySQL (mysqli driver)</title>
      <important>
	<para>
	  The examples shown below need the set up explained in 
	  <citation>LIXArg</citation> (see chapter <quote>Development/An example
	    with MySQL</quote>).
	  You won't be able to execute the following examples without a right
	  configured MySQL database.
	</para>
      </important>
      <para>
	Before trying LIXA and MySQL together you should try MySQL alone
	with <filename>example02_mysqli.php</filename> example:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example02_mysqli.php 
Using mysqli direct API
Result set:
id=969, last_name=Ferrari, first_name=Christian
	  </screen></td></tr></tbody>
	</table>
	The source code is quite easy to understand:
	<table frame="box">
	  <thead><tr><td>[example02_mysqli.php source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php
	/* retrieve MySQL connection */
	$mysqli = new mysqli("localhost", "lixa", "", "lixa", 3306);
	if ($mysqli-&gt;connect_errno)
		echo "Failed to connect to MySQL: (" . $mysqli-&gt;connect_errno . ") " . $mysqli-&gt;connect_error;

	/* remove all the rows from the table */
	if (!$mysqli-&gt;query("DELETE FROM authors;"))
		echo "DELETE failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;

	/* populate the table */
	if (!$mysqli-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
		echo "INSERT failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;

	/* check the content of the table */
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
?&gt;
	  </screen></td></tr></tbody>
	</table>
	Special attention must be reserved to this row:
	<table frame="box">
	  <thead><tr><td>[example02_mysqli.php source code (fragment)]</td></tr></thead>
	  <tbody><tr><td><screen>
$mysqli = new mysqli("localhost", "lixa", "", "lixa", 3306);
	  </screen></td></tr></tbody>
	</table>
	because it will be changed to use LIXA as a Transaction Manager.
      </para>
      <para>
	What we are performing now is similar to a supplied C language example; 
	below there's a picture copied from <citation>LIXArg</citation>
	(take a look to C example before this one).
	<figure xml:id="develop8">
	  <title>Deploy model of an example with MySQL DBMS
	    (example8_mys =&gt; example03_lixa_mysqli.php)</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../../images/LIXA_Development_8.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	Start the LIXA state server (if it was not yet started):
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~$ ps -ef|grep lixad|grep -v grep
tiian@mojan:~$ sudo su - lixa
[sudo] password for tiian: 
lixa@mojan:~$ /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ ps -ef|grep lixad|grep -v grep
lixa      4164     1  0 20:56 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ exit
logout
	  </screen></td></tr></tbody>
	</table>
	Set up <varname>LIXA_PROFILE</varname> environment variable to choose
	a profile with MySQL as Resource Manager and execute the PHP 
	source code:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_PROFILE=MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE
MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example03_lixa_mysqli.php 
tx_open(): 0
tx_begin(): 0
DELETE FROM authors;
Result set:
tx_commit(): 0
tx_begin(): 0
Result set:
INSERT INTO authors...
Result set:
id=969, last_name=Ferrari, first_name=Christian
tx_rollback(): 0
Result set:
tx_begin(): 0
INSERT INTO authors...
Result set:
id=969, last_name=Ferrari, first_name=Christian
tx_commit(): 0
Result set:
id=969, last_name=Ferrari, first_name=Christian
tx_close(): 0
	  </screen></td></tr></tbody>
	</table>
	read the source code, and the comments, to understand how to develop
	an Application Program coordinated by LIXA Transaction Manager with
	MySQL Resource Manager:
	<table frame="box">
	  <thead><tr><td>[example03_lixa_mysqli.php source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php	
	/* open all the Resource Managers (MySQL instance in this example) */
	$rc=tx_open();
	print "tx_open(): $rc\n"; 

	/* retrieve MySQL connection from LIXA Transaction Manager instead
	   of MySQL directly: lixa// means:
	   database name=lixa
	   chooser type (pos/rmid)=none
	   id (0, 1, 2, ...)=none
	   and can be read as "retrieve the first available MySQL connection
	   established by the Transaction Manager using the current
	   LIXA profile" */
	$mysqli = new mysqli("localhost", "lixa", "", "lixa//", 3306);
	if ($mysqli-&gt;connect_errno)
		echo "Failed to connect to MySQL: (" . $mysqli-&gt;connect_errno . ") " . $mysqli-&gt;connect_error . "\n";

	/* start a new transaction coordinated by LIXA */
	$rc=tx_begin();
	print "tx_begin(): $rc\n"; 

	/* remove all the rows from the table */
	print "DELETE FROM authors;\n";
	if (!$mysqli-&gt;query("DELETE FROM authors;"))
		echo "DELETE failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;

	/* check the content of the table */	
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";

	/* commit the transaction (DELETE FROM ...) */
	$rc=tx_commit();
	print "tx_commit(): $rc\n"; 

	/* start a new transaction coordinated by LIXA */
	$rc=tx_begin();
	print "tx_begin(): $rc\n"; 

	/* check the content of the table */	
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";

	/* populate the table */
	print "INSERT INTO authors...\n";
	if (!$mysqli-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
		echo "INSERT failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
	
	/* check the content of the table */
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";

	/* rollback the transaction (INSERT INTO ...) */
	$rc=tx_rollback();
	print "tx_rollback(): $rc\n"; 

	/* check the content of the table */
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";

	/* start a new transaction coordinated by LIXA */
	$rc=tx_begin();
	print "tx_begin(): $rc\n"; 

	/* populate the table */
	print "INSERT INTO authors...\n";
	if (!$mysqli-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
		echo "INSERT failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
	
	/* check the content of the table */
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";

	/* commit the transaction (INSERT INTO ...) */
	$rc=tx_commit();
	print "tx_commit(): $rc\n"; 

	/* check the content of the table */
	$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
	$res = $mysqli-&gt;use_result();
	echo "Result set:\n";
	while ($row = $res-&gt;fetch_assoc())
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";

	/* close all the Resource Managers */
	$rc=tx_close();
	print "tx_close(): $rc\n"; 
?&gt;
	  </screen></td></tr></tbody>
	</table>
	I suggest you to verify the table is really populated and the debug
	messages produced by the above program are truthful:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ mysql -u lixa lixa
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 40
Server version: 5.1.61-0ubuntu0.10.04.1 (Ubuntu)

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; SELECT * FROM authors;
+-----+-----------+------------+
| id  | last_name | first_name |
+-----+-----------+------------+
| 969 | Ferrari   | Christian  |
+-----+-----------+------------+
1 row in set (0.00 sec)
	  </screen></td></tr></tbody>
	</table>
      </para>
    </section>
    <section xml:id="connection_string_syntax">
      <title>MySQL (mysqli) connection string syntax</title>
      <para>
	As explained in the previous example (see
	<xref linkend="An_example_with_MySQL"/>) the 
	<emphasis>database</emphasis> part of <function>mysqli</function>
	connection function 
	<footnote><para>
	    Take a look to 
	    <link xlink:href="http://www.php.net/manual/en/mysqli.quickstart.connections.php">
	    PHP official documentation
	    </link>
	</para></footnote>
	must be changed when using LIXA and MySQL:
	<table frame="box">
	  <thead><tr><td>[mysqli detail]</td></tr></thead>
	  <tbody><tr><td><screen>
        /* Standard mysqli invocation for a database named "lixa" */
        $mysqli = new mysqli("localhost", "lixa", "", "lixa", 3306);

        /* LIXA enabled mysqli invocation */
	$mysqli = new mysqli("localhost", "lixa", "", "lixa//", 3306);
	  </screen></td></tr></tbody>
	</table>
	This is the syntax of the <emphasis>database</emphasis> part for
	a LIXA patched PHP mysqli module:
	<synopsis>lixa/[pos|rmid]/[id]</synopsis>
	<itemizedlist mark="bullet">
	  <listitem><para>
	      <token>lixa</token><footnote>
		<para>
		  Do not confuse <token>lixa</token> token (it means:
		  <quote>use a connection opened by LIXA 
		    Transaction Manager</quote>) with <quote>lixa</quote>
		  MySQL database name used in many examples. 
		  Incidentally they are the same word,
		  but when using <token>lixa/[pos|rmid]/[id]</token> the
		  name of the used databases may be any: foo, bar, mydb,
		  etc... The real name of the databases opened by LIXA
		  Transaction Manager is defined in configuration file
		  <filename>/opt/lixa/ect/lixac_conf.xml</filename>
		</para>
	      </footnote>: the Resource Manager (database) 
	      has been already opened by LIXA Transaction
	      Manager with <function>tx_open()</function> function
	  </para></listitem>
	  <listitem><para>
	      <token>pos|rmid</token>: specify if the following field 
	      (<token>id</token>) must be picked up
	      counting only the MySQL Resource Managers specified in the 
	      profile (file <filename>etc/lixac_conf.xml</filename>) or 
	      counting all the Resource Managers (rmid as specified by
	      XA specification)
	  </para></listitem>
	  <listitem><para>
	      <token>id</token>: specify the position of the 
	      choosen Resource Manager
	  </para></listitem>
	</itemizedlist>
	<important><para>
	    If the database string passed to a LIXA patched PHP mysqli
	    driver does not match the above syntax, it will passed 
	    <emphasis>unchanged</emphasis>
	    to <function>mysqli</function> function and the returned
	    connection <emphasis>will not</emphasis>
	    partecipate to LIXA coordinated transactions.
	</para></important>
	<warning><para>
	    If you mixed LIXA managed Resource Managers with LIXA unmanaged
	    Resource Managers, you would <emphasis>not</emphasis> obtain
	    a distributed transaction: only LIXA managed Resource Managers
	    obey to <function>tx_begin(), tx_commit(), tx_rollback()</function>
	    functions. You may mix them in your Application Program, but
	    it will be your job to guarantee data consistency among them.
	</para></warning>
	<note><para>
	    The string is <emphasis>case insensitive</emphasis>, but this
	    documentation will ever use it using lowercase letters.
	</para></note>
	If you had a profile as the following one:
	<table frame="box">
	  <thead><tr><td>[mysqli detail]</td></tr></thead>
	  <tbody><tr><td><screen>
      &lt;rsrmgrs&gt;
        &lt;rsrmgr&gt;MySQL_stareg1&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;MySQL_stareg2&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;PostgreSQL_stareg&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;MySQL_stareg3&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;OracleXE_stareg&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;MySQL_stareg4&lt;/rsrmgr&gt;
      &lt;/rsrmgrs&gt;
	  </screen></td></tr></tbody>
	</table>
	you could refer to the Resource Managers with these strings:
	<itemizedlist mark="bullet">
	  <listitem><para>
	      lixa// --&gt; MySQL_stareg1
	  </para></listitem>
	  <listitem><para>
	      lixa//0 --&gt; MySQL_stareg1
	  </para></listitem>
	  <listitem><para>
	      lixa//1 --&gt; MySQL_stareg2
	  </para></listitem>
	  <listitem><para>
	      lixa//2 --&gt; MySQL_stareg3
	  </para></listitem>
	  <listitem><para>
	      lixa//3 --&gt; MySQL_stareg4
	  </para></listitem>
	  <listitem><para>
	      lixa/pos/0 --&gt; MySQL_stareg1
	  </para></listitem>
	  <listitem><para>
	      lixa/pos/1 --&gt; MySQL_stareg2
	  </para></listitem>
	  <listitem><para>
	      lixa/pos/2 --&gt; MySQL_stareg3
	  </para></listitem>
	  <listitem><para>
	      lixa/pos/3 --&gt; MySQL_stareg4
	  </para></listitem>
	  <listitem><para>
	      lixa/rmid/0 --&gt; MySQL_stareg1
	  </para></listitem>
	  <listitem><para>
	      lixa/rmid/1 --&gt; MySQL_stareg2
	  </para></listitem>
	  <listitem><para>
	      lixa/rmid/2 --&gt; not valid, it's not MySQL (it's PostgreSQL!)
	  </para></listitem>
	  <listitem><para>
	      lixa/rmid/3 --&gt; MySQL_stareg3
	  </para></listitem>
	  <listitem><para>
	      lixa/rmid/4 --&gt; not valid, it's not MySQL (it's Oracle!)
	  </para></listitem>
	  <listitem><para>
	      lixa/rmid/5 --&gt; MySQL_stareg4
	  </para></listitem>
	</itemizedlist>
	You can use <quote>pos</quote> (default behaviour) or 
	<quote>rmid</quote>, as you prefer.
      </para>
    </section>
    <section>
      <title>An example with <emphasis>two</emphasis> MySQL servers (mysqli)</title>
      <important>
	<para>
	  The examples shown below need the set up explained in 
	  <citation>LIXArg</citation> (see chapter <quote>Development/An 
	    example with two MySQL servers</quote>).
	  You won't be able to execute the following examples without two right
	  configured MySQL databases.
	</para>
      </important>
      <para>
	You need at least: one host with LIXA state server and a first
	MySQL server, a second host with another MySQL server to try this
	example.
	Adapt the example to your own environment, remember it was implemented
	using these hosts:
	<itemizedlist mark="bullet">
	  <listitem><para>
	      LIXA state server, MySQL local server, host of the sample 
	      application server: 192.168.10.2
	  </para></listitem>
	  <listitem><para>
	      MySQL remote server: 192.168.10.1
	  </para></listitem>
	</itemizedlist>
	Follow these steps after proper adaptation:
	<itemizedlist mark="bullet">
	  <listitem><para>
	      edit the configuration of your remote MySQL server
	      (file <filename>/etc/mysql/my.cnf</filename>, the path
	      might be slightly different)
	      because it must accept network connections from 192.168.10.2;
	      replace row
	      <screen>
bind-address            = 127.0.0.1
	      </screen>
	      with something like
	      <screen>
#bind-address            = 127.0.0.1
bind-address            = 192.168.10.1
	      </screen>
	  </para></listitem>
	  <listitem><para>
	      connect locally (from host 192.168.10.2) to the 
	      <quote>remote</quote> MySQL server as root and grant access
	      from the other host with something like:
	      <screen>
tiian@presanella:~$ mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 34
Server version: 5.1.61-0ubuntu0.10.04.1 (Ubuntu)

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> GRANT ALL ON lixa.* TO 'lixa'@'192.168.10.2';
Query OK, 0 rows affected (0.00 sec)
	      </screen>
	  </para></listitem>
	  <listitem><para>
	      restart MySQL server using something like
	      <command>sudo /etc/init.d/mysql restart</command>
	  </para></listitem>
	  <listitem><para>
	      check you can connect remotely (from 192.168.10.2) using
	      something like
	      <command>mysql -h 192.168.10.1 -u lixa lixa</command>
	  </para></listitem>
	  <listitem><para>
	      edit config file (host 192.168.10.2)
	      <filename>/opt/lixa/ect/lixac_conf.xml</filename>,
	      locate <quote>MySQL2_stareg</quote> Resource Manager
	      definition and change the default IP address with the IP
	      address of your remote MySQL server (192.168.10.1)
	  </para></listitem>
	</itemizedlist>	
	What we are performing now is similar to a supplied C language example; 
	below there's a picture copied from <citation>LIXArg</citation>
	(take a look to C example before this one).
	<figure xml:id="develop8">
	  <title>Deploy model of an example with two MySQL DBMS
	  (example11_mys_mys =&gt; example04_lixa_mysqli2.php)</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../../images/LIXA_Development_11.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	Start the LIXA state server (if it was not yet started):
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~$ ps -ef|grep lixad|grep -v grep
tiian@mojan:~$ sudo su - lixa
[sudo] password for tiian: 
lixa@mojan:~$ /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ ps -ef|grep lixad|grep -v grep
lixa      4164     1  0 20:56 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ exit
logout
	  </screen></td></tr></tbody>
	</table>
	Set up <varname>LIXA_PROFILE</varname> environment variable to choose
	a profile with two MySQL Resource Managers and execute 
	the PHP source code:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_PROFILE=MYS_STA_MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE
MYS_STA_MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example04_lixa_mysqli2.php 
tx_open(): 0
tx_begin(): 0
DELETE FROM authors;
DELETE FROM authors; (2)
Result set:
Result set (2):
tx_commit(): 0
tx_begin(): 0
Result set:
Result set (2):
INSERT INTO authors...
INSERT INTO authors (2)...
Result set:
id=969, last_name=Ferrari, first_name=Christian
Result set (2):
id=969, last_name=Ferrari, first_name=Christian
tx_rollback(): 0
Result set:
Result set (2):
tx_begin(): 0
INSERT INTO authors...
INSERT INTO authors (2)...
Result set:
id=969, last_name=Ferrari, first_name=Christian
Result set (2):
id=969, last_name=Ferrari, first_name=Christian
tx_commit(): 0
Result set:
id=969, last_name=Ferrari, first_name=Christian
Result set (2):
id=969, last_name=Ferrari, first_name=Christian
tx_close(): 0
	  </screen></td></tr></tbody>
	</table>
	Now you can try to use a <emphasis>wrong</emphasis>
	<varname>LIXA_PROFILE</varname> environemnt variable and check 
	the result...
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_PROFILE=MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE
MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example04_lixa_mysqli2.php 
tx_open(): 0

Warning: mysqli::mysqli(): (99999/99999): Unable to retrieve a valid connection from LIXA Transaction Manager in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 18
Failed to connect to MySQL2: (99999) Unable to retrieve a valid connection from LIXA Transaction Manager
tx_begin(): 0
DELETE FROM authors;
DELETE FROM authors; (2)

Warning: mysqli::query(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 31

Warning: main(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 32

Warning: main(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 32
DELETE (2) failed: () Result set:

Warning: mysqli::real_query(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 40

Warning: mysqli::use_result(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 41
Result set (2):

Fatal error: Call to a member function fetch_assoc() on a non-object in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 43
	  </screen></td></tr></tbody>
	</table>
	you can now inspect the source code to discover where the error
	happens:
	<table frame="box">
	  <thead><tr><td>[example04_lixa_mysqli2.php source code]</td></tr></thead>
	  <tbody><tr><td><screen>
     1	&lt;?php	
     2		/* open all the Resource Managers (MySQL instance in this example) */
     3		/* export LIXA_PROFILE=MYS_STA_MYS_STA */
     4		$rc=tx_open();
     5		print "tx_open(): $rc\n"; 
     6	
     7		/* retrieve MySQL connections from LIXA Transaction Manager instead
     8		   of MySQL directly: lixa// means:
     9		   database name=lixa
    10		   chooser type (pos/rmid)=none
    11		   id (0, 1, 2, ...)=none
    12		   and can be read as "retrieve the first available MySQL connection
    13		   established by the Transaction Manager using the current
    14		   LIXA profile" */
    15		$mysqli = new mysqli("localhost", "lixa", "", "lixa/pos/0", 3306);
    16		if ($mysqli-&gt;connect_errno)
    17			echo "Failed to connect to MySQL: (" . $mysqli-&gt;connect_errno . ") " . $mysqli-&gt;connect_error . "\n";
    18		$mysqli2 = new mysqli("localhost", "lixa", "", "lixa/pos/1", 3306);
    19		if ($mysqli2-&gt;connect_errno)
    20			echo "Failed to connect to MySQL2: (" . $mysqli2-&gt;connect_errno . ") " . $mysqli2-&gt;connect_error . "\n";
    21	
    22		/* start a new transaction coordinated by LIXA */
    23		$rc=tx_begin();
    24		print "tx_begin(): $rc\n"; 
    25	
    26		/* remove all the rows from the tables */
    27		print "DELETE FROM authors;\n";
    28		if (!$mysqli-&gt;query("DELETE FROM authors;"))
    29			echo "DELETE failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
    30		print "DELETE FROM authors; (2)\n";
    31		if (!$mysqli2-&gt;query("DELETE FROM authors;"))
    32			echo "DELETE (2) failed: (" . $mysqli2-&gt;errno . ") " . $mysqli2-&gt;error;
    33	
    34		/* check the content of the tables */	
    35		$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    36		$res = $mysqli-&gt;use_result();
    37		echo "Result set:\n";
    38		while ($row = $res-&gt;fetch_assoc())
    39			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    40		$mysqli2-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    41		$res = $mysqli2-&gt;use_result();
    42		echo "Result set (2):\n";
    43		while ($row = $res-&gt;fetch_assoc())
    44			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    45	
    46		/* commit the transaction (DELETE FROM ...) */
    47		$rc=tx_commit();
    48		print "tx_commit(): $rc\n"; 
    49	
    50		/* start a new transaction coordinated by LIXA */
    51		$rc=tx_begin();
    52		print "tx_begin(): $rc\n"; 
    53	
    54		/* check the content of the tables */	
    55		$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    56		$res = $mysqli-&gt;use_result();
    57		echo "Result set:\n";
    58		while ($row = $res-&gt;fetch_assoc())
    59			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    60		$mysqli2-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    61		$res = $mysqli2-&gt;use_result();
    62		echo "Result set (2):\n";
    63		while ($row = $res-&gt;fetch_assoc())
    64			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    65	
    66		/* populate the tables */
    67		print "INSERT INTO authors...\n";
    68		if (!$mysqli-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
    69			echo "INSERT failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
    70		print "INSERT INTO authors (2)...\n";
    71		if (!$mysqli2-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
    72			echo "INSERT (2) failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
    73	
    74		/* check the content of the tables */
    75		$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    76		$res = $mysqli-&gt;use_result();
    77		echo "Result set:\n";
    78		while ($row = $res-&gt;fetch_assoc())
    79			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    80		$mysqli2-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    81		$res = $mysqli2-&gt;use_result();
    82		echo "Result set (2):\n";
    83		while ($row = $res-&gt;fetch_assoc())
    84			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    85	
    86		/* rollback the transaction (INSERT INTO ...) */
    87		$rc=tx_rollback();
    88		print "tx_rollback(): $rc\n"; 
    89	
    90		/* check the content of the tables */
    91		$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    92		$res = $mysqli-&gt;use_result();
    93		echo "Result set:\n";
    94		while ($row = $res-&gt;fetch_assoc())
    95			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
    96		$mysqli2-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
    97		$res = $mysqli2-&gt;use_result();
    98		echo "Result set (2):\n";
    99		while ($row = $res-&gt;fetch_assoc())
   100			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
   101	
   102		/* start a new transaction coordinated by LIXA */
   103		$rc=tx_begin();
   104		print "tx_begin(): $rc\n"; 
   105	
   106		/* populate the tables */
   107		print "INSERT INTO authors...\n";
   108		if (!$mysqli-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
   109			echo "INSERT failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
   110		print "INSERT INTO authors (2)...\n";
   111		if (!$mysqli2-&gt;query("INSERT INTO authors VALUES(969,'Ferrari','Christian');"))
   112			echo "INSERT (2) failed: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;
   113		
   114		/* check the content of the tables */
   115		$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
   116		$res = $mysqli-&gt;use_result();
   117		echo "Result set:\n";
   118		while ($row = $res-&gt;fetch_assoc())
   119			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
   120		$mysqli2-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
   121		$res = $mysqli2-&gt;use_result();
   122		echo "Result set (2):\n";
   123		while ($row = $res-&gt;fetch_assoc())
   124			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
   125	
   126		/* commit the transaction (INSERT INTO ...) */
   127		$rc=tx_commit();
   128		print "tx_commit(): $rc\n"; 
   129	
   130		/* check the content of the tables */
   131		$mysqli-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
   132		$res = $mysqli-&gt;use_result();
   133		echo "Result set:\n";
   134		while ($row = $res-&gt;fetch_assoc())
   135			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
   136		$mysqli2-&gt;real_query("SELECT id,last_name,first_name FROM authors ORDER BY id DESC;");
   137		$res = $mysqli2-&gt;use_result();
   138		echo "Result set (2):\n";
   139		while ($row = $res-&gt;fetch_assoc())
   140			echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . ", first_name=" . $row['first_name'] . "\n";
   141	
   142		/* close all the Resource Managers */
   143		$rc=tx_close();
   144		print "tx_close(): $rc\n"; 
   145	?&gt;
	  </screen></td></tr></tbody>
	</table>
	The program fails because the used profile does not have a second
	MySQL Resource Manager (take a look to file
	<filename>/opt/lixa/etc/lixac_conf.xml</filename> for profile
	<quote>MYS_STA</quote>).
      </para>
      <para>
	A different error can be exploited fixing the
	<varname>LIXA_PROFILE</varname> environment variable:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_PROFILE=MYS_STA_MYS_STA
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE
MYS_STA_MYS_STA
	  </screen></td></tr></tbody>
	</table>
	and breaking the source code changing
	<screen>
    15		$mysqli = new mysqli("localhost", "lixa", "", "lixa/pos/0", 3306);
	</screen>
	into
	<screen>
    15		$mysqli = new mysqli("localhost", "lixa", "", "lixa/pos/2", 3306);
	</screen>
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example04_lixa_mysqli2.php 
tx_open(): 0

Warning: mysqli::mysqli(): (99999/99999): Unable to retrieve a valid connection 
from LIXA Transaction Manager in /home/tiian/src/lixa/ext/php/examples/example04
_lixa_mysqli2.php on line 15
Failed to connect to MySQL: (99999) Unable to retrieve a valid connection from L
IXA Transaction Manager
tx_begin(): 0
DELETE FROM authors;

Warning: mysqli::query(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 28

Warning: main(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 29

Warning: main(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 29
DELETE failed: () DELETE FROM authors; (2)
Warning: mysqli::real_query(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 35

Warning: mysqli::use_result(): Couldn't fetch mysqli in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 36
Result set:

Fatal error: Call to a member function fetch_assoc() on a non-object in /home/tiian/src/lixa/ext/php/examples/example04_lixa_mysqli2.php on line 38
	  </screen></td></tr></tbody>
	</table>
	Now the program fails because there's no a third Resource Manager as
	required by <synopsis>lixa//2</synopsis> (the first one is 0, the second
	one is 1 and so on...)
      </para>
      <important><para>
	  Fix example <filename>example04_lixa_mysqli2.php</filename>
	  restoring <synopsis>lixa//0</synopsis> at row 15!
      </para></important>
    </section>
    <section xml:id="An_example_with_PostgreSQL">
      <title>An example with PostgreSQL (pgsql driver)</title>
      <important>
	<para>
	  The examples shown below need the set up explained in 
	  <citation>LIXArg</citation> (see chapter <quote>Development/An example
	    with PostgreSQL</quote>).
	  You won't be able to execute the following examples without a right
	  configured PostgreSQL database.
	</para>
      </important>
      <para>
	Before trying LIXA and PostgreSQL together you should try 
	PostgreSQL alone
	with <filename>example05_pgsql.php</filename> example:
	<table frame="box">
	  <thead><tr><td>[Terminal shell session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example05_pgsql.php 
Using pgsql direct API
Result set:
id=999, last_name=Ferrari, first_name=Christian
	  </screen></td></tr></tbody>
	</table>
	The source code is quite easy to understand:
	<table frame="box">
	  <thead><tr><td>[example05_pgsql.php source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php
	// Connect to database
	$dbconn = pg_connect("dbname=testdb") 
		or die("Could not connect: " . pg_last_error() . "\n");

	// Clean table
	$query = 'DELETE FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error() . "\n");

	// Insert a row in the table
	$query = "INSERT INTO authors VALUES(999, 'Ferrari', 'Christian')";
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error() . "\n");

	// Perform SQL query
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");

	// Print query output
	echo "Using pgsql direct API\n";
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// Free resultset
	pg_free_result($result);

	// Close connection
	pg_close($dbconn);
?&gt;
	  </screen></td></tr></tbody>
	</table>
	Special attention must be reserved to this row:
	<table frame="box">
	  <thead><tr><td>[example05_pgsql.php source code (fragment)]</td></tr></thead>
	  <tbody><tr><td><screen>
        $dbconn = pg_connect("dbname=testdb") 
                or die("Could not connect: " . pg_last_error() . "\n");
	  </screen></td></tr></tbody>
	</table>
	because it will be changed to use LIXA as a Transaction Manager.
      </para>
      <para>
	What we are performing now is similar to a supplied C language example; 
	below there's a picture copied from <citation>LIXArg</citation>
	(take a look to C example before this one).
	<figure xml:id="develop5">
	  <title>Deploy model of an example with PostgreSQL (example5_pql => example06_lixa_pgsql.php)</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../../images/LIXA_Development_5.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	Start the LIXA state server (if it was not yet started):
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~$ ps -ef|grep lixad|grep -v grep
tiian@mojan:~$ sudo su - lixa
[sudo] password for tiian: 
lixa@mojan:~$ /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ ps -ef|grep lixad|grep -v grep
lixa      4164     1  0 20:56 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
lixa@mojan:~$ exit
logout
	  </screen></td></tr></tbody>
	</table>
	Set up <varname>LIXA_PROFILE</varname> environment variable to choose
	a profile with PostgreSQL as Resource Manager and execute the PHP 
	source code:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ export LIXA_PROFILE=PQL_STA
tiian@mojan:~/lixa/ext/php/examples$ echo $LIXA_PROFILE
PQL_STA
tiian@mojan:~/lixa/ext/php/examples$ /opt/php-5.4-lixa/bin/php example06_lixa_pgsql.php 
tx_open(): 0
tx_begin(): 0
Result set:
tx_commit(): 0
tx_begin(): 0
Result set:
Result set:
id=999, last_name=Ferrari, first_name=Christian
tx_rollback(): 0
Result set:
tx_begin(): 0
Result set:
id=999, last_name=Ferrari, first_name=Christian
tx_commit(): 0
Result set:
id=999, last_name=Ferrari, first_name=Christian
tx_close(): 0
	  </screen></td></tr></tbody>
	</table>
	take a look to the source code, and the comments, 
	to understand how to develop
	an Application Program coordinated by LIXA Transaction Manager with
	PostgreSQL Resource Manager:
	<table frame="box">
	  <thead><tr><td>[example06_lixa_pgsql.php source code]</td></tr></thead>
	  <tbody><tr><td><screen>
&lt;?php
	// open all the Resource Managers (PostgreSQL instance in this example)
	$rc = tx_open();
	print "tx_open(): $rc\n";

	/* retrieve PostgreSQL connection from LIXA Transaction Manager instead
	   of PostgreSQL directly: lixa// means:
	   database name=lixa
	   chooser type (pos/rmid)=none
	   id (0, 1, 2, ...)=none
	   and can be read as "retrieve the first available PostgreSQL 
	   connection established by the Transaction Manager using the current
	   LIXA profile" */
	$dbconn = pg_connect("dbname=lixa//") 
		or die("Could not connect: " . pg_last_error() . "\n");

	// start a new transaction coordinated by LIXA Transaction Manager
	$rc=tx_begin();
	print "tx_begin(): $rc\n"; 

	// remove all the rows from the table 
	$query = 'DELETE FROM authors';
	$result = pg_query($query) 
		or die("DELETE failed: " . pg_last_error() . "\n");

	// check the table content
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// commit the transaction (DELETE FROM...)
	$rc=tx_commit();
	print "tx_commit(): $rc\n";

	// start a new transaction coordinated by LIXA Transaction Manager
	$rc=tx_begin();
	print "tx_begin(): $rc\n"; 

	// check the table content
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// populate the table 
	$query = "INSERT INTO authors VALUES(999, 'Ferrari', 'Christian')";
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error() . "\n");

	// check the table content
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// rollback the transaction (INSERT INTO...)
	$rc=tx_rollback();
	print "tx_rollback(): $rc\n";

	// check the table content
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// start a new transaction coordinated by LIXA Transaction Manager
	$rc=tx_begin();
	print "tx_begin(): $rc\n"; 

	// populate the table 
	$query = "INSERT INTO authors VALUES(999, 'Ferrari', 'Christian')";
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error() . "\n");

	// check the table content
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// commit the transaction (DELETE FROM...)
	$rc=tx_commit();
	print "tx_commit(): $rc\n";

	// check the table content
	$query = 'SELECT * FROM authors';
	$result = pg_query($query) 
		or die("Query failed: " . pg_last_error(). "\n");
	echo "Result set:\n";
	while ($row = pg_fetch_array($result, null, PGSQL_ASSOC))
		echo "id=" . $row['id'] . ", last_name=" . $row['last_name'] . 
			", first_name=" . $row['first_name'] . "\n";

	// release resultset
	pg_free_result($result);

	/* release PHP handler for dbconn (it does not close database 
	   connection because it was opened by LIXA Transaction Manager).
	   You must call "pg_close(...)" before "tx_close()" to avoid
	   automatic clean-up at script end (it might fail due to dirty
	   memory if you didn't perform the correct close sequence */
	pg_close($dbconn);

	// close al the Resource Managers
	$rc = tx_close();
	print "tx_close(): $rc\n";
?&gt;
	  </screen></td></tr></tbody>
	</table>
	I suggest you to verify the table is really populated and the debug
	messages produced by the above program are truthful:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@mojan:~/lixa/ext/php/examples$ psql testdb
psql (8.4.11)
Type "help" for help.

testdb=> SELECT * FROM authors;
 id  | last_name | first_name 
-----+-----------+------------
 999 | Ferrari   | Christian
(1 rows)
	  </screen></td></tr></tbody>
	</table>
	Example <filename>example06_lixa_pgsql.php</filename> should be
	deeply understood for three main reasons:
	<orderedlist numeration='arabic'>
	  <listitem><para>
	      the syntax of the connection string passed to function
	      <function>pg_connect</function>
	  </para></listitem>
	  <listitem><para>
	      the absence of parameter 
	      <parameter class='function'>persistent</parameter> when calling
	      function <function>pg_connect</function>
	  </para></listitem>
	  <listitem><para>
	      the close sequence with both <function>pg_close(...)</function>
	      and <function>tx_close()</function> functions
	  </para></listitem>
	</orderedlist>
      </para>
      <section>
	<title><function>pg_connect</function> connection string syntax</title>
	<para>
	  If you want to use a database connection managed by LIXA Transaction
	  Manager you have to:
	  <orderedlist numeration='arabic'>
	    <listitem><para>
		call function <function>tx_open()</function>: LIXA Transaction
		Manager will open all the resource managers specified by the
		current <varname>LIXA_PROFILE</varname> profile
		(see file <filename>/opt/lixa/etc/lixac_conf.xml</filename>)
	    </para></listitem>
	    <listitem><para>
		call function <function>pg_connect</function> using a 
		connection string with the syntax explained in
		<xref linkend="connection_string_syntax"/>; the same rules
		are true for both MySQL and PostgreSQL because they share the
		same LIXA provided XA switch file
	    </para></listitem>
	    <listitem><para>
		avoid to use 
		<parameter class='function'>persistent</parameter> parameter
		when calling <function>pg_connect(...)</function> function
		because persistent connections managed by PostgreSQL database
		driver conflict with LIXA's XA implementation
	    </para></listitem>
	  </orderedlist>
	</para>
      </section>
      <section>
	<title>the <function>pg_close(...)</function>, <function>tx_close()</function> closing sequence</title>
	<para>
	  The implementation of PostgreSQL <package>pgsql</package> driver is
	  different than MySQL <package>mysqli</package> driver and LIXA
	  patch tries to change as less as possible of the original code.
	  <package>pgsql</package> driver saves only the handler (pointer)
	  returned by <function>PQconnectdb</function>, while 
	  <package>mysqli</package> saves a structure with some additional 
	  information. In the case of <package>mysqli</package>, LIXA patch
	  adds a flag to identify the database connections provided by the
	  LIXA Transaction Manager.
	  With <package>pgsql</package> the same approach would have refactored
	  most of the code and a different approach was choosen:
	  <function>pg_close(...)</function> calls 
	  <function>lixa_pq_is_managed_conn(...)</function> to understand the
	  connection type. If it was a LIXA managed connection,
	  <function>pg_close(...)</function> would avoid 
	  <function>PQfinish(...)</function>, but it would remove the 
	  connection from the pool. The program calls 
	  <function>tx_close()</function> later, and this function will
	  call <function>PQfinish(...)</function> to close the PostgreSQL
	  database connection.
	</para>
	<warning>
	  <para>
	    If you didn't call <function>pg_close(...)</function>, at 
	    script end the automatic clean-up routine would try to close the
	    PostgreSQL connection because it is stored in the connection pool, 
	    but it was already closed by
	    <function>tx_close()</function> and you could catch unexpected
	    results like segmentation faults and so on.
	  </para>
	</warning>
	<important>
	  <para>
	    Use these sequences to avoid unexpected results:
	    <itemizedlist mark='bullet'>
	      <listitem><para>
		  first <function>tx_open()</function> and then
		  <function>pg_connect(...)</function> when connecting to
		  PostgreSQL under the control of LIXA Transaction Manager
	      </para></listitem>
	      <listitem><para>
		  first <function>pg_close(...)</function> and then
		  <function>tx_close()</function> when disconnecting from
		  PostgreSQL under the control of LIXA Transaction Manager
	      </para></listitem>
	    </itemizedlist>
	  </para>
	</important>
      </section>
    </section>
  </section>
</chapter>
