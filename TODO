there is a bug in 
server_manager_pollout
when it calls
payload_header_store_verb_step
2010-03-04 22:47:54.608533 [27139/3082550160] payload_header_store_verb_step:(verb,step): (0,0) --> (0,0)
2010-03-04 22:47:54.608543 [27139/3082550160] payload_header_store_verb_step:(verb,step): (0,0) --> (0,0)
2010-03-04 22:47:54.608553 [27139/3082550160] payload_header_store_verb_step:(verb,step): (0,0) --> (0,0)
2010-03-04 22:47:54.608562 [27139/3082550160] payload_header_store_verb_step:(verb,step): (1,8) --> (0,0)
2010-03-04 22:47:54.608572 [27139/3082550160] payload_header_store_verb_step:(verb,step): (1936538686,1701584999) --> (1,8)
values of verb and step are out of range and it's not clear where they come
from; after some client cycle, there may be a sigfault: something is writing
the wrong memory piece and corrupt this array...


execute recovery when a new client arrive of the same job
when recovery happens check config_digest; on server side only warning; 
on client side, stop 
processing if digests do no match (Request for Enhancement: reload config
from server, recovery, discard config read from server, use config on file,
go on with new transactions...)

When server_manager_thread exits, the listener must be aware of this... 

Implement a "test resource manager" can be driven by "open string" with the
return code of every XA function. This would become the reference tool for
testing and debugging:
1. experiment a defect
2. activate the trace
3. pick-up the return code of every resource manager
4. reproduce the behavior with any "test resource manager"
The same source should be compiled 3 times to produce 3 different resource
managers and avoid pesky matters related to static variables.

Remove all @@@ from source code: every one was/is an "open point"

