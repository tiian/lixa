there is a memory corruption issue spotted by valgrind probably in a wrong
place :(
without valgrind it generates a random access memory error: it can happen
in malloc, in g_lib_*_free, and so on.
with valgrind the simplest case test is:
- start lixad on fresh status files
- run a single transaction
- stop (kill) lixad
- re-start lixad on used status files
- run a single transaction
- valgrind shout an error in lixa_msg_free/g_array_free on the first call
  (xa_open step 8)
next diagnosys: inspect code to understand what's different in restart on
used files...

execute recovery when a new client arrive of the same job
when recovery happens check config_digest; on server side only warning; 
on client side, stop 
processing if digests do no match (Request for Enhancement: reload config
from server, recovery, discard config read from server, use config on file,
go on with new transactions...)

When server_manager_thread exits, the listener must be aware of this... 

Implement a "test resource manager" can be driven by "open string" with the
return code of every XA function. This would become the reference tool for
testing and debugging:
1. experiment a defect
2. activate the trace
3. pick-up the return code of every resource manager
4. reproduce the behavior with any "test resource manager"
The same source should be compiled 3 times to produce 3 different resource
managers and avoid pesky matters related to static variables.

Remove all @@@ from source code: every one was/is an "open point"

