in single threaded scenario too, something is writing in a wrong memory 
location and damage a pointer inside server recovery table:
- jb = '                                         '
- all blank/zeros it must be discovered
- who damage the string (lixa_job_t)???
- valgrind sees nothing but an invalid read when it's too late...
- the damager damage the pointer to the string
- or the search string is not valid...
- are all the strings put in the recovery table duplicated??
- in single thread scenario, no task switch happens: it can not be related to
  multithread programming error; but it seems with 3 threads the problem
  happens with fewer cycles; with a client at a time it does not seem to happen
  (or it may happen after too many cycles)

When server_manager_thread exits, the listener must be aware of this... 

Print the features (debug, trace, crash) has been compiled in the software and
the version (main version, library version) on syslog and/or command line for
lixad

Implement a "test resource manager" can be driven by "open string" with the
return code of every XA function. This would become the reference tool for
testing and debugging:
1. experiment a defect
2. activate the trace
3. pick-up the return code of every resource manager
4. reproduce the behavior with any "test resource manager"
The same source should be compiled 3 times to produce 3 different resource
managers and avoid pesky matters related to static variables.

Remove all @@@ from source code: every one was/is an "open point"

