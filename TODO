Restart from server_manager.c line 258 (CT/0.1)

Crash test must be performed
Augment the test with premature exit checks: after a call to a function, the
client program exits: what happens at server side?

Remove all @@@ from source code: every one was/is an "open point"

Document a memory leak introduced by libxml2:
xmlInitParser()
xmlCleanupParser()
must be called from the same thread (cite the thread/libxml2 URL).
If xmlCleanupParser() is called from a different thread, 1 block of 24 bytes
is definitely lost.
It seems the leak is limited to 24 bytes, but some critical pattern might
exploit a recursive behavior... :(
This could be an issue for some situations:
if the called functions are executed inside threads and the main program is the
transaction monitor itself, there is no way to assure the same thread called
xmlInitParser() is able to call xmlCleanupParser() too because the first thread
should remain locked until all the thread completed.
From a LIXA point of view, xmlInitParser() is called from the first thread
that calls tx_open() and xmlCleanupParser() is called from the last thread
that leaves tx_close(). The issue must be discussed with libxml2 development
team. Unfortunately, tx_open() can no be called from the main program and the
following functions from a different thread because this behavior would violate
XA standard: to avoid this issue a "proxy thread" should be used for XA
functions, but the "solution" is worst then the "problem".
If the multithreaded application has a main program - you are not writing a
library or a module - you can call
tx_open() in the main, before every thread is started
tx_close() in the main, after every thread is completed
this should avoid the memory leak. Pay attention the tx_open() at main level
is not inherited at the thread level: every thread must call its own tx_open()
too; this is only a workaround to force xmlInitParser() and xmlCleanupParser()
only at main program instead of at first starting thread / last ending thread.

After beta release, after interesting stuff like Python and PHP bindings, the 
custom containers developed for LIXA could be substituted with glib standard 
containers.
