******************************************************************************

tx_commit() sequence diagram


A.P.		T.M.		R.M.		lixad
|
[] tx_commit()	|		|		|
[]------------->[] save commit/rollback intent	|		A
|		[]--------------|-------------->[] save		|
|		|		|		[] &		|
|		[]<-------------|---------------[] synch	|
|	     {1}[]		|		|		|
|		[] xa_end()	|		|		|lixa_xa_
|		[]------------->[]		|		|end
|		|		[]		|		|
|		[]<-------------[]		|		|
|		[]		|		|		|
|		[] save xa_end result		|		|
|		[]--------------|-------------->[] save		V
|	     {2}[]		|		|  		A
|		[] xa_prepare()	| 		|		|
|		[]------------->[]		|		|
|		|  		[]		|		|
|		[]<-------------[]		|		|
|	     {3}[]		|		|		|lixa_xa_
|		[] save xa_prepare result and	|		|prepare
|		[] commit/rollback intent	|		|
|		[]--------------|-------------->[] save		|
|		|		|		[] &		|
|		[]<-------------|---------------[] synch	|
|		[]		|		|  		V
|		[] xa_commit()/	|		|		A
|		[] xa_rollback()|		|		|
|		[]------------->[]		|		|lixa_xa_
|		|		[]		|		|commit
|		[]<-------------[]		|		|
|		[]		|		|		|lixa_xa_
|		[] save xa_commit result	|		|rollback
|   TX_*	[]--------------|-------------->[] discard	|
[]<-------------[]		|		[] data		V
[]
|

A.P. = Application Program
T.M. = Transaction Manager (lixac library)
R.M. = Resource Manager
lixad = LIXA daemon

{1}
xa_end() invoked using TMSUCCES flag; if an "xa_end()" call fails, the 
successive might be called using TMFAIL. This point is not so clear from 
standard.

{2}
if there is only one resource manager, xa_prepare() can be avoided and the
T.M. jumps to "xa_commit(TMONEPHASE)" step

{3}
if any resource manager fails "xa_prepare()" there is no reason to try
"xa_prepare()" on the remaining resource manager set and T.M. jumps to 
"xa_rollback" step

******************************************************************************

tx_rollback() sequence diagram


A.P.		T.M.		R.M.		lixad
|
[] tx_rollback()|		|		|
[]------------->[] save rollback intent	 	|		A
|		[]--------------|-------------->[] save		|
|		[] xa_end()	|		[] {1}		|lixa_xa_
|		[]------------->[]		|		|end
|		|		[]		|		|
|		[]<------------	[]		|		|
|		[] save xa_end result		|		|
|		[]--------------|-------------->[] save		|
|		[] xa_rollback()|		[]		V
|		[]------------->[]		|		A
|		[]		[]		|		|
|		[]<-------------[]		|		|lixa_xa_
|		[] save xa_rollback result	|		|rollback
|   TX_*	[]--------------|-------------->[] discard	|
[]<-------------[]		|		[] data		|
[]		|		|		|		V
|		|		|		|		|
|		|		|		|		|

{1}
rollback intent does not need synchronization on the Lixa server side
because the absence of a persistence commit info means rollback

******************************************************************************

open and recovery phase sequence diagram


A.P.		T.M.		R.M.		lixad
|
[] tx_open()	|		|		|
[]------------->[] open 	|		|
|		[]--------------|-------------->[] create room
|		|  recovery pending?		[] save open
|		[]<-------------|---------------[] check recovery
|		[]		|		|
|		[] xa_open()	|		|
|		[]------------->[]		|
|		|  xa_open_execs[] open r.m.	|
|		[]<-------------[]		|
|		[]		|		|
|		[]--------------|-------------->[] save results
|		[]		|		[]
|	/------>[] recovery query		|
|	|	[]--------------|-------------->[] switch
|	|	|  XID & info	|		[] thread {1}
|	|	[]<-------------|---------------[]
|	|	[]		|		|
|	|	[] xa_rollback()/xa_commit()	|
|	|	[]------------->[]		|
|	|	|  result	[]		|
|	|	[]<-------------[]		|
|	|	[]		|		|
|	|	[]--------------|-------------->[] free TX blocks
|	|	[]		|		[]
|	\-------[] another query|		|
|		[]		|		|
|		[] lixad has no more TXs	|
|		[]		|		|
|		[] xa_recovery	|		|
|		[]------------->[]		|
|		|		[] {2}		|
|		[]<-------------[]		|
|		[]		|		|
|		[] xa_rollback()/xa_commit()	|
|		[]------------->[]		|
|		|		[]		|
|		[]<-------------[]		|
|		[]		|		|
[]<-------------[]		|		|
[]		|		|		|
|		|		|		|
|		|		|		|

{1} The recovery query could return a transaction is managed by a different
    thread: the server switches the client to another thread and answers
    with the XID and infos related to the recovery pending transaction

{2} All the resource managers are polled to discover potential transactions
    "disappeared" from lixad server: this should never produce any more
    transactions (it might report a just in time recovery pending transaction)
    Transactions are recognized as revoverable if:
    - XID format matches
    - XID branch qualifier matches
    It must be INVESTIGATED if this second phase of recovery is necessary
    (it should not) or dangerous (it might stole a first phase for a different
    thread; it can NOT perform commit if the transaction failed after prepare
    and before commit...)


