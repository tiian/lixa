This file contains documentation related to the LIXA client/server protocol

The protocol is based on XML messages exchange.
No validation is performed against XML.
XML parsing is "static": only expected tags/attributes are searched and
retrieved.
XML generation is "static": from a composite struct, a serialization function
able to understand the struct, generates the resulting XML document.
The usage of XML is possibly not strictly compliant with standards; it's used
as a serialization/deserialization tool to avoid portability nightmares and
cross platform issues (server is big endian, client is little endian or server
is ASCII, client is EBCDIC...).

Every message must have two distinctive fields in the header:
- verb: the operation correlated to the data contained in the XML document
- step: the progress inside the operation
an optional field is
- level: the level of implemented protocol

This documentations contains: state tables for transitions of client/server
messages and some message samples.

***************************************************************************

verb=1 (xa_open)

  level: message level, version
  verb:  xa_open -> 1
  step:  8, 16, 24

  client->server message (question)
  <msg level="1" verb="1" step="8">
    <client job="59530bdf33659b29e73d4adb9f9f6552/127.0.0.1      " conf_digest="59530bdf33659b29e73d4adb9f9f6552"/>
    <rsrmgrs>
      <rsrmgr rmid="0" dynamic="1" name="dummyrm" xa_name="lixa_dummyrm"/>
      <rsrmgr rmid="1" dynamic="0" name="randomrm" xa_name="lixa_randomrm"/>
    </rsrmgrs>
  </msg>

  server -> client message (answer)
  <msg level="1" verb="1" step="16">
    <answer rc="0"/>
  </msg>

  client -> server message (async assertion)
  <msg level="1" verb="1" step="24">
    <conthr txstate="1"/>
    <xa_open_execs>
      <xa_open_exec xa_info="xa_open string" rmid="0" flags="0x0" rc="0" r_state="1"/>
      <xa_open_exec xa_info="xa_open string" rmid="1" flags="0x0" rc="0" r_state="1"/>
    </xa_open_execs>
  </msg>
  

client 			 server		description
verb=1,step=8 -->			send list of resource managers
	      				allocate blocks & synch
		<-- verb=1,step=16	confirm block allocation
verb=1,step=24 -->  			send list of executions of xa_open
	       				routine (store xa_open results on 
					transaction manager server)

***************************************************************************

verb=2 (xa_close)

  level: message level, version
  verb:  xa_close -> 2
  step:  8

  client->server message (async assertion)
  <msg verb="2" step="8">
    <rsrmgrs>
      <rsrmgr rmid="0"/>
      <rsrmgr rmid="1"/>
    </rsrmgrs>
  </msg>

client 			 server		description
verb=2,step=8 -->			send list of resource managers
	      				free now useless blocks

***************************************************************************

verb=3 (xa_start)

  level: message level, version
  verb:  xa_start -> 3
  step:  8, 16, 24

  client->server message (send the XID - transaction id - and the resource
                          managers will receive xa_start)
  <msg level="1" verb="3" step="8">
    <conthr xid="cd7f2d86-a6d8-4237-8e1e-83347e478c49.87cd2b4e-7ec7-4c7c-b839-f570171554cb"/>
    <rsrmgrs>
      <rsrmgr rmid="0"/>
      <rsrmgr rmid="1"/>
    </rsrmgrs>
  </msg>

  server -> client message (answer)
  <msg level="1" verb="3" step="16">
    <answer rc="0"/>
  </msg>

  client -> server message (async assertion)
  <msg level="1" verb="3" step="24">
    <conthr txstate="3"/>
    <xa_start_execs>
      <xa_start_exec rmid="0" flags="0x0" rc="0" td_state="11"/>
      <xa_start_exec rmid="1" flags="0x0" rc="0" td_state="11"/>
    </xa_start_execs>
  </msg>

client 			 server		description
verb=3,step=8 -->			send XID (transaction id)
					send list of resource managers
	      				will receive xa_start
		<-- verb=3,step=16	synchronize status file
		    			confirm operation
verb=3,step=24 -->  			send list of executions of xa_start
	       				routine (store xa_start results and
					new states on transaction manager 
					server)

***************************************************************************

verb=4 (xa_end)

  level: message level, version
  verb:  xa_end -> 4
  step:  8, 16, 24

  client->server message (send if the transaction is committing - commit="1" -
  		 	 or rollbacking - commit="0")
  <msg level="1" verb="4" step="8">
    <conthr commit="0"/>
  </msg>

  server -> client message (answer)
  <msg level="1" verb="4" step="16">
    <answer rc="0"/>
  </msg>

  client -> server message (async assertion)
  <msg level="1" verb="4" step="24">
    <xa_end_execs>
      <xa_end_exec rmid="0" flags="0x4000000" rc="0" s_state="32" td_state="10"/>
      <xa_end_exec rmid="1" flags="0x4000000" rc="0" s_state="32" td_state="10"/>
    </xa_end_execs>
  </msg>


client 			 server		description
verb=4,step=8 -->			send commit/rollback
		<-- verb=4,step=16	synchronize status file
		    			confirm operation
verb=4,step=24 -->  			send list of executions of xa_end
	       				routine (store xa_end results)

***************************************************************************

verb=5 (xa_prepare)

  level: message level, version
  verb:  xa_prepare -> 5
  step:  8, 16

  client->server message (send the xa_prepare result)
  <msg level="1" verb="5" step="8">
    <conthr commit="1"/>
    <xa_prepare_execs>
      <xa_prepare_exec rmid="0" flags="0x0" rc="0" s_state="33" td_state="10"/>
      <xa_prepare_exec rmid="1" flags="0x0" rc="0" s_state="33" td_state="10"/>
    </xa_prepare_execs>
  </msg>

  server -> client message (answer)
  <msg level="1" verb="5" step="16">
    <answer rc="0"/>
  </msg>


client 			 server		description
verb=5,step=8 -->			send xa_prepare result
		<-- verb=5,step=16	synchronize status file
		    			confirm operation

***************************************************************************

verb=6 (xa_commit)

  level: message level, version
  verb:  xa_commit -> 6
  step:  8

  client->server message (send the xa_commit result)
  <msg level="1" verb="6" step="8">
    <conthr finished="1"/>
    <xa_commit_execs>
      <xa_commit_exec rmid="0" flags="0x0" rc="0" r_state="1" s_state="30"/>
      <xa_commit_exec rmid="1" flags="0x0" rc="0" r_state="1" s_state="30"/>
    </xa_commit_execs>
  </msg>

client 			 server		description
verb=6,step=8 -->			send xa_commit result
					gives server information the
					transaction finished

***************************************************************************

verb=7 (xa_rollback)

  level: message level, version
  verb:  xa_commit -> 7
  step:  8

  client->server message (send the xa_rollback result)
  <msg level="1" verb="7" step="8">
    <conthr finished="1"/>
    <xa_rollback_execs>
      <xa_rollback_exec rmid="0" flags="0x0" rc="0" r_state="1" s_state="30"/>
      <xa_rollback_exec rmid="1" flags="0x0" rc="0" r_state="1" s_state="30"/>
    </xa_rollback_execs>
  </msg>

client 			 server		description
verb=7,step=8 -->			send xa_rollback result
					gives server information the
					transaction finished

***************************************************************************

verb=8 (query recovery)

  level: message level, version
  verb:  xa_open -> 1
  step:  8, 16

  client->server message (question)
  <msg level="1" verb="8" step="8">
    <client job="59530bdf33659b29e73d4adb9f9f6552/127.0.0.1      " conf_digest="59530bdf33659b29e73d4adb9f9f6552"/>
  </msg>

  server -> client message (answer there is at least one
                            transaction to recover)
  <msg level="1" verb="8" step="16">
    <answer rc="0"/>
    <client job="59530bdf33659b29e73d4adb9f9f6552/127.0.0.1      " conf_digest="59530bdf33659b29e73d4adb9f9f6552">
      <last_verb_step verb="3" step="16"/>
      <state finished="0" txstate="1" will_commit="1" will_rollback="0" xid="cd7f2d86-a6d8-4237-8e1e-83347e478c49.87cd2b4e-7ec7-4c7c-b839-f570171554cb"/>
    </client>
    <rsrmgrs>
      <rsrmgr rmid="0" next_verb="4" r_state="?" s_state="?" td_state="?"/>
      <rsrmgr rmid="1" next_verb="4" r_state="?" s_state="?" td_state="?"/>
    </rsrmgrs>
  </msg>


  server -> client message (answer there are no
                            transactions to recover)
  <msg level="1" verb="8" step="16">
    <answer rc="1"/>
  </msg>
 
 
  client->server message (recovery result)
  <msg level="1" verb="8" step="24">
    <recovery failed="0" commit="0"/>
    <rsrmgrs>
      <rsrmgr rmid="0" rc="?"/>
      <rsrmgr rmid="1" rc="?"/>
    </rsrmgrs>
  </msg>


client 			 server		description
verb=8,step=8 -->			query for recovery pending 
					transactions
		<-- verb=8,step=16	return the first transaction must
					be recovered
verb=8,step=24 -->			send recovery result
					store failed info or discard
					transaction info
***************************************************************************

  client -> server message (async assertion)
  <msg level="1" verb="9" step="8">
    <ax_reg_exec rmid="0" flags="0x0" rc="0" td_state="21"/>
  </msg>

client			server		description
verb=9,step=8 -->			register the new status
					(ax_reg result)
***************************************************************************

  client -> server message (async assertion)
  <msg level="1" verb="10" step="8">
    <ax_unreg_exec rmid="0" flags="0x0" rc="0" td_state="20"/>
  </msg>

client			server		description
verb=10,step=8 -->			register the new status
					(ax_unreg result)
