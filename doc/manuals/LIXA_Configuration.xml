<chapter xml:id="Configuration">
  <title>Configuration</title>
  <para>
    A LIXA system is the assembling of two components: the client and 
    the server. The figure
    below shows a typical configuration with one Application
    Program and two Resource Managers.
  </para>
  <figure xml:id="config1">
    <title>Typical LIXA topology</title>
    <mediaobject>
      <imageobject>
	<imagedata fileref="LIXA_Configuration_1.png"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>
    The model shows logical and "phisycal" blocks:
    <itemizedlist mark='bullet'>
      <listitem><para>
	  "Application Program code" is the code of your own application
      </para></listitem>
      <listitem><para>
	  "librm1" is the code of the library your application must use to
	  communicate with "RM1" (the first resource manager)
      </para></listitem>
      <listitem><para>
	  "librm2" is the code of the library your application must use to
	  communicate with "RM2" (the second resource manager)
      </para></listitem>
      <listitem><para>
	  "liblixac" is the code of the library your application must use to
	  invoke the TX verbs and send instruction to the Transaction Manager
      </para></listitem>
      <listitem><para>
	  "Application Program code" + "librm1" + "librm2" + "liblixac" must
	  be linked togheter to produce the Application Program; the
	  Application Program is an executable object
      </para></listitem>
      <listitem><para>
	  "RM1" is the first resource manager; it may be a relational database
	  (RDBMS)
      </para></listitem>
      <listitem><para>
	  "RM2" is the second resource manager; it may be an object oriented
	  database (OODBMS)
      </para></listitem>
      <listitem><para>
	  "lixad" is the <emphasis>daemon</emphasis> used by "liblixac" to
	  store the states of the transactions
      </para></listitem>
    </itemizedlist>
  </para>
  <para>
    The model shows how the blocks communicate:
    <itemizedlist mark='bullet'>
      <listitem><para>
	  (A1): is the protocol supplied by the first resource manager; 
	  SQL/CLI is an example and is supplied by IBM DB2, 
	  SQL/OCI is another example and is supplied by Oracle Database Server
      </para></listitem>
      <listitem><para>
	  (B1): is the protocol supplied by the second resource manager; every
	  resource manager has its own protocol and its own API
      </para></listitem>
      <listitem><para>
	  (A2): is the internal protocol used by the client of RM1 to 
	  communicate with RM1 server process(es); it can be a cross memory
	  or a network protocol and it depends on RM1 configuration
      </para></listitem>
      <listitem><para>
	  (B2): is the internal protocol used by the client of RM2 to 
	  communicate with RM2 server process(es); it can be a cross memory
	  or a network protocol and it depends on RM2 configuration
      </para></listitem>
      <listitem><para>
	  (TX): is the protocol supplied by the LIXA project and is described
	  in <citation>TXspec</citation>; it's a standard protocol and API
      </para></listitem>
      <listitem><para>
	  (XA): is the standard protocol used by the LIXA project to 
	  communicateand with the resource managers and is described
	  in <citation>XAspec</citation>; it's a standard protocol and API
      </para></listitem>
      <listitem><para>
	  (LX): is the internal protocol used by the client of LIXA to 
	  communicate with the LIXA server process (lixad); it is a network 
	  protocol
      </para></listitem>
    </itemizedlist>
  </para>
  <section>
    <title>Architectural elements</title>
    <para>
      The <command>lixad</command> daemon process can be executed on any
      system: there is no need it is executed on the same system that's hosting
      the Application Programs. The communications between 
      the client and the server (<command>lixad</command>) uses TCP/IP sockets.
    </para>
    <para>
      The <command>lixac</command> library is embedded in the Application
      Programs; the communication between the Application Program and
      the <command>lixac</command> library uses TX (Transaction Demarcation)
      API, see <citation>TXspec</citation>. The <command>lixac</command> 
      library contains all the logic of the LIXA Transaction Manager.
    </para>
    <para>
      The communication between the Application Program and the Resource
      Managers depends on Resource Managers type and configuration: 
      it may be cross memory, TCP/IP, System V IPC, etc...
      The communication between the <command>lixac</command> library and the
      Resource Manager depends on Resource Manager configuration and must be
      of the same used by the Application Program.
    </para>
    <para>
      The communication between <command>lixac</command> library and 
      <command>lixad</command> is ever istantiated by the client: the
      server never calls the clients.
    </para>
    <section>
      <title>Deployment models</title>
      <para>
	This section explains some different deployment models you can
	set up leveraging the LIXA project technology.
      </para>
      <section>
	<title>The easiest non trivial model</title>
	<para>
	  The easiest non trivial deployment of a distributed transaction
	  processing system based on the LIXA project is showed below: a single
	  node hosts the Application Program, the Resource Managers and the
	  LIXA server.
	</para>
	<figure xml:id="config2">
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Configuration_2.png"/>
	    </imageobject>
	  </mediaobject>
	  <title>Easiest non trivial deployment model</title>
	</figure>
      </section>
      <section>
	<title>A trivial model</title>
	<para>
	  A trivial deployment of a distributed transaction
	  processing system based on the LIXA project is showed below: a single
	  node hosts the Application Program, the Resource Manager and the
	  LIXA server. This configuration is obtained from the previous one
	  removing a Resource Manager.
	</para>
	<para>
	  Using only one Resource Manager is supported by the LIXA project
	  technology, but it's quite useless because you don't need a
	  transaction manager to perform 
	  <emphasis>single phase commit</emphasis> against 
	  <emphasis>one</emphasis>
	  Resource Manager. This type of configuration will not be described
	  more deeply.
	</para>
	<figure xml:id="config3">
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Configuration_3.png"/>
	    </imageobject>
	  </mediaobject>
	  <title>Trivial deployment model</title>
	</figure>
      </section>
      <section>
	<title>A fully distributed model</title>
	<para>
	  A fully distributed transaction processing system can be achieved
	  hosting every component in a different node.
	  The picture below shows 4 different nodes:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
		an application server node hosting the Application Program
	    </para></listitem>
	    <listitem><para>
		a Transaction Manager dedicated node hosting the 
		LIXA server
	    </para></listitem>
	    <listitem><para>
		two Resource Manager dedicated nodes hosting the
		Reosurce Manager
	    </para></listitem>
	  </itemizedlist>
	</para>
	<figure xml:id="config4">
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Configuration_4.png"/>
	    </imageobject>
	  </mediaobject>
	  <title>Fully distributed deployment model</title>
	</figure>
      </section>
      <section>
	<title>A more complex distributed model</title>
	<para>
	  A more complex distributed transaction processing system 
	  can be achieved introducing a second application server and a third
	  Resource Manager; in the picture below the third Resource Manager 
	  is hosted in the same node of the second Resource Manager.
	</para>
	<para>
	  The two different Application Programs do not need to be hosted in
	  different application servers. They are different 
	  Application Programs because they use a different mix of
	  Resource Managers.
	</para>
	<figure xml:id="config5">
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Configuration_5.png"/>
	    </imageobject>
	  </mediaobject>
	  <title>Complex distributed deployment model</title>
	</figure>
	<para>
	  Further complexity can be reached introducing an Application
	  Program that uses three (or more) different Resource Managers,
	  but this document will not go on this path to preserve
	  understandability
	  <footnote><para>
	      The dashed box named "Transaction Manager" was removed to
	      simplify the picture.
	  </para></footnote>
	  .
	</para>
      </section>
    </section>
  </section>
  <section>
    <title>Configuring LIXA components</title>
    <para>
      The picture below emphasizes the LIXA components must be configured
      in a simple scenario:
    </para>
    <figure xml:id="config6">
      <title>The LIXA components and the necessary configuration files</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="LIXA_Configuration_6.png"/>
	</imageobject>
      </mediaobject>
    </figure>
    <para>
      The client component (<command>lixac</command>) is configured using the
      <filename>etc/lixac_conf.xml</filename> file; the server component
      (<command>lixad</command>) is configured using the
      <filename>etc/lixad_conf.xml</filename> file
      <footnote><para>
	  Both the files reside in <filename>/opt/lixa/etc/</filename>
	  directory and must be managed by
	  <systemitem class="username">lixa</systemitem> user, the
	  LIXA administrative user
      </para></footnote>.
    </para>
    <para>
      If a node hosts both the client and the server components, both the
      files must be configured. If a node hosts only one component, only
      one configuration file is necessary
      <footnote><para>
	  The standard installation procedure installs both the files with
	  default content; it's your responsability to customize the content
	  of the files.
      </para></footnote>.
    </para>
    <section>
      <title>Configuring the server</title>
      <para>
	The default configuration file is 
	<filename>etc/lixad_conf.xml</filename>
	and is located at the root installation path (i.e.
	<filename>/opt/lixa/etc/lixad_conf.xml</filename>).
      </para>
      <para>
	The file is composed of three sections:
	<figure xml:id="config7">
	  <title>The structure of lixad_conf.xml</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Configuration_7.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      the <emphasis>server</emphasis> section contains the global
	      parameters of the server
	  </para></listitem>
	  <listitem><para>
	      the <emphasis>listeners</emphasis> section specifies how many
	      TCP/IP addresses and ports must be listened to accept incoming
	      client connections
	  </para></listitem>
	  <listitem><para>
	      the <emphasis>managers</emphasis> section specifies how many
	      parallel threads must be activated to serve the LIXA clients
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Below there is a sample configuration file:
	<screen>
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;server pid_file="/opt/lixa/var/run.pid"&gt;
  &lt;listeners&gt;
    &lt;listener domain="AF_INET" address="127.0.0.1" port="3456"/&gt;
    &lt;listener domain="AF_INET" address="0.0.0.0" port="2345"/&gt;
  &lt;/listeners&gt;
  &lt;managers&gt;
    &lt;manager status_file="/opt/lixa/var/lixad_status1"/&gt;
    &lt;manager status_file="/opt/lixa/var/lixad_status2"/&gt;
    &lt;manager status_file="/opt/lixa/var/lixad_status3"/&gt;
  &lt;/managers&gt;
&lt;/server&gt;
      </screen>
	The tags and the
	properties of the XML file are described below:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      <varname>pid_file</varname>: it is the file used by the server 
	      to store the daemon <acronym>PID</acronym>; the server creates
	      the file at start-up and destroys it at shutdown
	  </para></listitem>
	  <listitem><para>
	      <varname>listener</varname>: the server can activate one or more
	      listeners; most of the times one listener is sufficient, but if
	      you want to use only a subset of the IP addresses defined at
	      the operating system level, you have to configure a dedicated
	      listener for every desired address
	  </para></listitem>
	  <listitem><para>
	      <varname>domain</varname>: the type of socket must be used to
	      listen for clients. The only allowed type is 
	      <constant>AF_INET</constant>; this may change in the future
	  </para></listitem>
	  <listitem><para>
	      <varname>address</varname>: the address that must be used 
	      to listen for
	      clients; the special value "<constant>0.0.0.0</constant>" means
	      <emphasis>any</emphasis> address
	  </para></listitem>
	  <listitem><para>
	      <varname>port</varname>: the port that must be used to listen for
	      clients; it must be a free port (use command 
	      <command>netstat</command> to find out one)
	  </para></listitem>
	  <listitem><para>
	      <varname>manager</varname>: any configured 
	      <emphasis>manager</emphasis> is a server worker and runs as
	      a dedicated thread. The number of managers that should 
	      be activated 
	      depends on the workload; if D is the number of indipendent 
	      hard disk devices and P is the number of processors/cores, the
	      suggested values are in the range:
	      <equation>
		<title>Suggested range for the number of managers</title>
		<mathphrase>
		  [min(D,P) ; D*P]
		</mathphrase>
	      </equation>
	  </para></listitem>
	  <listitem><para>
	      <varname>status_file</varname>: the physical path that 
	      must be used to
	      create the status files (a couple) for a manager; 
	      this generally is
	      a persistent and reliable storage device like a RAID partition.
	      The string specified by the tag <varname>status_file</varname>
	      is used as a prefix: every manager (thread) creates two files
	      with the same prefix and different suffix.
	  </para></listitem>
	</itemizedlist>
      </para>
    </section>
    <section>
      <title>Configuring the client</title>
      <para>
	The default configuration file is 
	<filename>etc/lixac_conf.xml</filename>
	and is located at the root installation path (i.e.
	<filename>/opt/lixa/etc/lixac_conf.xml</filename>). 
      </para>
      <para>
	The file is composed of three sections:
	<figure xml:id="config8">
	  <title>The structure of lixac_conf.xml</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Configuration_8.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      the <emphasis>state servers</emphasis> section 
	      contains a list of the available LIXA state servers and how they
	      can be contacted
	  </para></listitem>
	  <listitem><para>
	      the <emphasis>resource managers</emphasis> section
	      contains a list of the available Resource Managers and how they
	      can be managed by LIXA using XA standard API and protocol
	  </para></listitem>
	  <listitem><para>
	      the <emphasis>profiles</emphasis> section
	      contains a set of possibly different profiles: every
	      Application Program can use only one profile; if you had
	      different Application Programs with different requirements,
	      you should create different profiles. Every profile contains
	      a set of servers and a set of Resource Managers that must be
	      used to support the Application Program.
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Below there is a sample configuration file:
	<screen>
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;client&gt;
  &lt;sttsrvs&gt;
    &lt;sttsrv name="server1" domain="AF_INET" address="10.23.45.67" port="2345" /&gt;
    &lt;sttsrv name="server2" domain="AF_INET" address="10.23.46.91" port="3456" /&gt;
  &lt;/sttsrvs&gt;
  &lt;rsrmgrs&gt;
    &lt;rsrmgr name="OracleXE_dynreg" switch_file="/opt/lixa/lib/switch_oracle_dynreg.so" xa_open_info="Oracle_XA+Acc=P/hr/hr+SesTm=30+LogDir=/tmp+threads=true+DbgFl=7+Loose_Coupling=true" xa_close_info="" /&gt;
    &lt;rsrmgr name="OracleXE_stareg" switch_file="/opt/lixa/lib/switch_oracle_stareg.so" xa_open_info="Oracle_XA+Acc=P/hr/hr+SesTm=30+LogDir=/tmp+threads=true+DbgFl=7+Loose_Coupling=true" xa_close_info="" /&gt;
    &lt;rsrmgr name="IBMDB2_dynreg" switch_file="/opt/lixa/lib/switch_ibmdb2_dynreg.so" xa_open_info="axlib=/opt/lixa/lib/liblixac.so,db=sample,tpm=lixa" xa_close_info="" /&gt;
    &lt;rsrmgr name="IBMDB2_stareg" switch_file="/opt/lixa/lib/switch_ibmdb2_stareg.so" xa_open_info="axlib=/opt/lixa/lib/liblixac.so,db=sample,tpm=lixa" xa_close_info="" /&gt;
  &lt;/rsrmgrs&gt;
  &lt;profiles&gt;
    &lt;profile name="GT71"&gt;
      &lt;sttsrvs&gt;
        &lt;sttsrv&gt;local_1&lt;/sttsrv&gt;
      &lt;/sttsrvs&gt;
      &lt;rsrmgrs&gt;
        &lt;rsrmgr&gt;OracleXE_stareg&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;IBMDB2_stareg&lt;/rsrmgr&gt;
      &lt;/rsrmgrs&gt;
    &lt;/profile&gt;
    &lt;profile name="VZ67"&gt;
      &lt;sttsrvs&gt;
        &lt;sttsrv&gt;local_1&lt;/sttsrv&gt;
      &lt;/sttsrvs&gt;
      &lt;rsrmgrs&gt;
        &lt;rsrmgr&gt;OracleXE_dynreg&lt;/rsrmgr&gt;
        &lt;rsrmgr&gt;IBMDB2_dynreg&lt;/rsrmgr&gt;
      &lt;/rsrmgrs&gt;
    &lt;/profile&gt;
    &lt;profile name="AG71"&gt;
      &lt;sttsrvs&gt;
        &lt;sttsrv&gt;local_2&lt;/sttsrv&gt;
      &lt;/sttsrvs&gt;
      &lt;rsrmgrs&gt;
        &lt;rsrmgr&gt;IBMDB2_dynreg&lt;/rsrmgr&gt;
      &lt;/rsrmgrs&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/client&gt;
	</screen>
	The tags and the
	properties of the XML file are described below:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      <varname>sttsrv</varname>: this section is used to describe a
	      state server (a LIXA server instance) that must be reached by any
	      client described below
	  </para></listitem>
	  <listitem><para>
	      <varname>sttsrv/name</varname>: a name associated to the 
	      state server; it is a logical name that is referenced by 
	      the profiles defined below
	  </para></listitem>
	  <listitem><para>
	      <varname>domain</varname>: it must be the same domain specified 
	      by the listener that must be reached; the listener is configured
	      in <filename>lixad_conf.xml</filename> (see above) and may be
	      local or remote
	  </para></listitem>
	  <listitem><para>
	      <varname>address</varname>: it must be the same same address 
	      specified by the listener that must be reached; the listener is
	      configured in <filename>lixad_conf.xml</filename> (see above)
	      and may be local or remote
	  </para></listitem>
	  <listitem><para>
	      <varname>port</varname>: it must be the same port specified
	      by the listener that must be reached; the listener is
	      configured in
	      <filename>lixad_conf.xml</filename> (see above)
	      and may be local or remote
	  </para></listitem>
	  <listitem><para>
	      <varname>rsrmgr</varname>: this section is used to describe 
	      a resource manager that will be used by the
	      Application Programs configured below (see profiles)
	  </para></listitem>
	  <listitem><para>
	      <varname>rsrmgr/name</varname>: a name associated to the 
	      Resource Manager; it is a logical name that is referenced by
	      the profile defined below
	  </para></listitem>
	  <listitem><para>
	      <varname>switch_file</varname>: name of the file that contains 
	      the XA switch structure; the file is produced by the installation
	      procedure
	  </para></listitem>
	  <listitem><para>
	      <varname>xa_open_info</varname>: it is the string of parameters
	      that must be passed to the Resource Manager by the xa_open() 
	      function call; the content
	      of the string depends on the Resource Manager, please refer to
	      the documentation distributed with the resource manager you
	      are using. The string can not exceed 255 characters
	  </para></listitem>
	  <listitem><para>
	      <varname>xa_close_info</varname>: it is the string of parameters
	      that must be passed to the Resource Manager by the xa_open() 
	      function call; the content
	      of the string depends on the Resource Manager, please refer to
	      the documentation distributed with the resource manager you
	      are using. The string can not exceed 255 characters
	  </para></listitem>
	  <listitem><para>
	      <varname>profile</varname>: it contains the description of the
	      LIXA every transactional profile must be
	      used by the Application Programs needs to be listed here
	  </para></listitem>
	  <listitem><para>
	      <varname>profile/name</varname>: the name associated to the
	      transaction profile; this name is used in different places and
	      it is suggested to avoid special characters, blanks and possibly
	      mixed case (these hints may help you in troubleshooting)
	  </para></listitem>
	  <listitem><para>
	      <varname>profile/sttsrv</varname>: the state server that
	      will be used to store
	      the transactional information associated to this profile; more
	      than one state servers can be specified but 
	      <emphasis>only</emphasis> 
	      the first one is used with the current release software
	  </para></listitem>
	  <listitem><para>
	      <varname>profile/rsrmgr</varname>: every Resource Manager that
	      must be
	      used by the Application Programs associated to this transactional
	      profile needs to be listed here. There is no a limit: you can
	      specify 1, 2, 3, ... resource managers. Avoid useless resource
	      manager because xa_open() and xa_close() will be performed 
	      against all the listed resource managers. If you can choose 
	      between a "dynamic" and a "static" version of the same resource
	      manager, the "dynamic" one is more efficient	    
	  </para></listitem>
	</itemizedlist>
      </para>
      <section xml:id="Client_configuration_explanation">
	<title>Client configuration explanation</title>
	<para>
	  The client configuration file contains three sections:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
		<varname>sttsrvs</varname>: is the list of the LIXA daemons 
		you are
		running inside your network and you will use to manage the
		persistent state of the clients that are using the
		configuration
		file; many times a single LIXA state server is sufficient, but
		sometimes you need more (development, test and production
		environment might use different LIXA servers)
	    </para></listitem>
	    <listitem><para>
		<varname>rsrmgrs</varname>: the list of the Resource Managers
		necessary execute the Application Programs; there is no limit
		to the number of resource managers you can specify from a LIXA
		point of view, but you should avoid to list useless 
		Resource Managers to obtain the best performance
	    </para></listitem>
	    <listitem><para>
		<varname>profiles</varname>: the list of the available
		transactional profiles for your Application Programs. This
		concept allows you a great configuration flexibility: the same
		configuration file can be used for completely different
		Application Programs and completely different environment.
		As an example, imagine you have 3 distinct applications and
		every application uses a different mix of resource managers; 
		then
		you manage 3 different environments (development, test and
		production): with 9 profiles you can completely model your
		transactional needs (APP1DEV, APP2DEV, APP3DEV, APP1TEST,
		APP2TEST, APP3TEST, APP1PROD, APP2PROD, APP3PROD).
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>
	  The picture below models an environment that's using the sample
	  <filename>etc/lixac_conf.xml</filename>
	  showed above:
	  <figure xml:id="config9">
	    <title>A "real" environment</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="LIXA_Configuration_9.png"/>
	      </imageobject>
	    </mediaobject>
	  </figure>
	  The scenario is composed of three distinct applications:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
		GT71: it's an application that uses both an Oracle and an
		IBM DB2 DBMS; most of the transactions need to perform
		distributed transaction processing and the profile specifies
		the static registration versions of the switch files.
	    </para></listitem>
	    <listitem><para>
		AG71: it's an application that uses only an
		IBM DB2 DBMS; only few transactions need to perform
		distributed transaction processing and the profile specifies
		the dynamic registration versions of the switch files. This
		application does not need an XA Transaction Manager because
		it uses only one Resource Manager, but the development team
		decided to use LIXA because it will use a second Resource
		Manager in the next few months.
	    </para></listitem>
	    <listitem><para>
		VZ67: it's an application that uses both an Oracle and an
		IBM DB2 DBMS; only few transactions need to perform
		distributed transaction processing and the profile specifies
		the dynamic registration versions of the switch files.
	    </para></listitem>
	  </itemizedlist>
	  The scenario uses two distinct LIXA state servers: this is an
	  unusual situation but it works.
	</para>
	<para>
	  The <varname>LIXA_PROFILE</varname> environment variable must be used 
	  to specify the transactional profile associated to the Application 
	  Program.
	  If you do not specify a valid transactional profile, 
	  the first profile
	  of the list will be applied (in the above example it's
	  <varname>GT71</varname>).
	  <note><para>
	      There is not an alternate way to specify the 
	      transactional profile:
	      <function>tx_open</function> does not allow parameters.
	  </para></note>
	  With reference to scenario showed above, Application Program GT71
	  must export <varname>LIXA_PROFILE</varname> before execution; if
	  you are using <command>bash</command> shell you must specifiy
	  something like this
	  <screen>
export LIXA_PROFILE=GT71
	  </screen>
	  before application execution. The same applies to Application Program
	  AG71 and VZ67:
	  <screen>
export LIXA_PROFILE=AG71
[...]
export LIXA_PROFILE=VZ67
	  </screen>
	</para>
      </section>
    </section>
  </section>
  <section>
    <title>Environment variables</title>
    <para>
      You can use some environment variables to tailor the LIXA configuration
      to your needs. Some environment variables applies only to one component,
      others apply to both client and server LIXA components.
    </para>
      <section>
	<title>LIXA_CONFIG_FILE</title>
	<para>
	  This environment variable can be used to specify an alternate
	  configuration file for your application. 
	  Example: if you are trying a new configuration, but you 
	  wont to modify the default
	  <filename>etc/lixac_conf.xml</filename>
	  file, you can export the variable before program execution:
	  <screen>
export LIXA_CONFIG_FILE=/tmp/my_lixac
./myapp
	  </screen>
	  <command>myapp</command> will be executed using the configuration
	  stored inside
	  <filename>/tmp/my_lixac</filename>
	  instead of the configuration stored inside the default
	  <filename>etc/lixac_conf.xml</filename>
	  client configuration file.
	</para>
      </section>
      <section>
	<title>LIXA_CRASH_COUNT</title>
	<para>
	  This environment variable must be used only in a development
	  environment: after the program crossed the
	  <emphasis>crash point</emphasis> as many times as the value of
	  this variable (default = 1), the process crashes. See
	  environemt variable
	  <varname>LIXA_CRASH_POINT</varname> too.
	</para>
      </section>
      <section>
	<title>LIXA_CRASH_POINT</title>
	<para>
	  This environment variable must be used only in a development
	  environment: it specifies the crash point inside the LIXA
	  code. The acceptable values for this variable are listed
	  inside the C header file
	  <filename>src/common/lixa_crash.h</filename>
	  LIXA project uses 
	  the <function>abort()</function> function to simulated a soft
	  crash.
	</para>
      </section>
      <section>
	<title>LIXA_JOB</title>
	  <warning><para>
	      This environment variable may be very useful to deal with some
	      specific requirements, but it changes how the automatic
	      recovery process works and the final result could be strange
	      or "unpredictable" if you didn't understand the whole picture.
	  </para></warning>
	<para>
	  Use this environment variable to associate a specific transactional
	  job identifier instead of the automatically assigned one. 
	  See <xref linkend="Workload_balanced_environments"/> 
	  for more information.
	</para>
      </section>
      <section>
	<title>LIXA_PROFILE</title>
	<para>
	  This environment variable must be used 
	  to specify the transactional profile associated to the Application 
	  Program.
	  If you do not specify a valid transactional profile, the first
	  profile listed inside 
	  <filename>etc/lixac_conf.xml</filename>
	  will be applied.
	  See <xref linkend="Client_configuration_explanation"/> too.
	</para>
      </section>
      <section>
	<title>LIXA_TRACE_MASK</title>
	<para>
	  This environment variable specifies which internal modules must
	  be traced at run-time. 
	  The C header file
	  <filename>src/common/lixa_trace.h</filename>
	  contains the exadecimal value of every internal module; if you 
	  want to trace two or more modules you have make the logical OR
	  among all the desired values.
	</para>
	<para>
	  You are interested in tracing what happens inside 
	  <emphasis>"server listener"</emphasis>,
	  <emphasis>"server manager"</emphasis> and
	  <emphasis>"server status"</emphasis> modules.
	  Looking at file
	  <filename>src/common/lixa_trace.h</filename>:
	  <screen>
#define LIXA_TRACE_MOD_SERVER_LISTENER    0x00000004
#define LIXA_TRACE_MOD_SERVER_MANAGER     0x00000008
#define LIXA_TRACE_MOD_SERVER_STATUS      0x00000010
	  </screen>
	  the resulting value is 0x0000001C:
	  <screen>
export LIXA_TRACE_MASK=0x00000010
	  </screen>
	  The <emphasis>"trace all"</emphasis> value is 0xffffffff:
	  <screen>
export LIXA_TRACE_MASK=0xffffffff
	  </screen>
	  <warning><para>
	      Tracing too much is dangerous: it slows down your system and
	      possibly fills-up your filesystems.
	  </para></warning>
	  Establishing the internal modules that must be traced is a typical
	  troubleshooting task you can acquire working with LIXA project.
	</para>
      </section>
  </section>
</chapter>
