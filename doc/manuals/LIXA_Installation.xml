<chapter xml:id="Installation" 
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Installation</title>
  <para>
    This chapter explains how to download, install and verify the software
    released by LIXA project.
  </para>
  <section>
    <title>System requirements</title>
    <para>
      LIXA project is developed on an x86-64 based 
      <link xlink:href="http://www.ubuntu.com/">
	<citetitle>Ubuntu 14.04 system</citetitle>
      </link>. 
      LIXA project is ported on different Linux versions for x86-64: major
      stable releases are tested using some different configurations, please
      refer to file 
      <link xlink:href="https://github.com/tiian/lixa/blob/master/TestLog">
	<citetitle>TestLog</citetitle>
      </link>
      for an update.
      Installation on a different Linux distribution should be quite 
      straightforward; installation on a different
      <trademark>UNIX</trademark> like system would probably need some work.
    </para>
    <para>
      If you successfully installed LIXA on a different system, you might
      publish your experience on the public forum hosted on SourceForge.net 
      and share your results with other users. 
    </para>
    <section>
      <title>Pre-requisites</title>
      <para>
	To compile LIXA software the GNU tools are needed: gcc, gmake, libtool.
	Autoconf and automake are used, but they should not be necessary if 
	you install from the original tarball.
      </para>
      <para>
	Some <emphasis>libraries (run time and development stuff)</emphasis> 
	are necessary too:
	<itemizedlist mark='bullet'>
	  <listitem><para><application>libdl</application></para></listitem>
	  <listitem><para><application>libglib</application> (libglib2.0-dev on Ubuntu)</para></listitem>
	  <listitem><para><application>libgmodule</application></para></listitem>
	  <listitem><para><application>libgthread</application></para></listitem>
	  <listitem><para><application>libm</application></para></listitem>
	  <listitem><para><application>libpthread</application></para></listitem>
	  <listitem><para><application>libuuid</application> (uuid-dev on Ubuntu)</para></listitem>
	  <listitem><para><application>libxml2</application> (libxml2-dev on Ubuntu)</para></listitem>
	</itemizedlist>
	<application>libglib</application> (and others libg*) and 
	<application>libxml2</application> are discovered with 
	<command>pkg-config</command> command, while the others must be in
	standard include <envar>PATH</envar>.
      </para>
      <section>
	<title>Client libraries for other languages</title>
	<para>
	  LIXA and XTA sources are developed using ANSI C: a standard and
	  complete C build tool set is necessary to compile and link them.
	  Client libraries for other languages are automatically built and
	  installed if <filename>configure</filename> discover the proper tool
	  at config time.
	</para>
	<section>
	  <title>C++</title>
	  <para>
	    C++ is available only for XTA: the legacy TX Transaction
	    Demarcation standard interface is a pure C API and it does not
	    make sense to wrap it as a set of C++ classes. Anyway, you should
	    be able to use the ANSI C standard API inside a C++ program.
	  </para>
	</section>
	<section>
	  <title>COBOL</title>
	  <para>
	    If you are interested in COBOL, LIXA supports only Gnu COBOL 1.1 or
	    upper; COBOL development and testing is currently performed on
	    Ubuntu 14.04 with default COBOL version: 1.1
	  </para>
	  <para>
	    COBOL is actually supported only by the legacy TX Transaction
	    Demarcation standard interface. XTA for COBOL is not available, but
	    it could be implemented on users' request.
	  </para>
	</section>
	<section>
	  <title>Python</title>
	  <para>
	    Python is available only for XTA: implementing it for the legacy
	    TX Transaction Demarcation standard interface would require a lot
	    changes in Python specific resource (database) drivers.
	  </para>
	  <para>
	    XTA for Python works with Python 2 and Python 3, but the build
	    procedure compiles and links just one version at a time.
	    If your system uses Python 2 as the default Python version as in
	    the following example:
	    <table frame="box">
	      <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/lixa$ python --version
Python 2.7.6
	      </screen></td></tr></tbody>
	    </table>
	    you configure XTA for Python 2 with a command like this one:
	    <table frame="box">
	      <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/lixa$ ./configure --with-mysql --with-postgresql
	      </screen></td></tr></tbody>
	    </table>
	    and you configure XTA for Python 3 with a command like this one:
	    <table frame="box">
	      <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/lixa$ PYTHON_VERSION=3 ./configure --with-mysql --with-postgresql
	      </screen></td></tr></tbody>
	    </table>
	  </para>
	</section>
      </section>
      <section>
	<title>Packages for Linux Ubuntu</title>
	<para>
	  <application>xsltproc</application>,
	  <application>docbook-xsl</application> and
	  <application>docbook-xml</application> are necessary
	  to produce this manual.
	</para>
	<para>
	  <application>automake</application> and 
	  <application>autoconf</application> are 
	  necessary to run the test suite (<command>make check</command>).
	</para>
      </section>
      <section>
	<title>Packages for Linux CentOS (7.x)</title>
	<para>
	  This packages are necessary to create a build environment:
 	  <application>glib2-devel.i686</application>,
 	  <application>libuuid-devel.i686</application>,
 	  <application>libxml2-devel.i686</application>,
 	  <application>gcc.i686</application>,
 	  <application>libtool.i686</application> and
 	  <application>make.i686</application>.
	</para>
	<para>
	  <application>docbook5-style-xsl.noarch</application> is necessary
	  to produce this manual.
	</para>
	<section>
	  <title>CentOS, RHEL and derivative notes</title>
	  <para>
	    Version 6 of CentOS, RHEL and derivative Linux distributions ships
	    a very old glib version and can't be used to compile LIXA source
	    code since LIXA 1.3.2 . Use a newer Linux version or an older
	    LIXA version.
	  </para>
	</section>
      </section>
      <section>
	<title>Low level software pre-requisites</title>
	<para>
	  If you are trying to install LIXA software on a different operating
	  system, these are some fundamental requirements:
	  <itemizedlist mark='bullet'>
	    <listitem><para><function>poll</function>: 
		LIXA daemon uses this function for high parallelism network
		operations
	    </para></listitem>
	    <listitem><para><function>mmap</function>:
		LIXA daemon uses this function for high performance disk
		access
	    </para></listitem>
	    <listitem><para><function>dlopen</function>:
		LIXA transaction manager uses this function to dynamically load
		resource managers XA switch structures 
	    </para></listitem>
	    <listitem><para><function>uuid_generate</function>:
		LIXA transaction manager uses this function to generate unique
		transaction identifiers (xid)
	    </para></listitem>
	  </itemizedlist>
	  Without the above functions, a specific porting process is necessary
	  to adapt LIXA to your system.
	</para>
      </section>
      <section>
	<title>Hardware requirements</title>
	<para>
	  There's no specific hardware requirement for the client part of LIXA
	  (libraries and utilities): the type of hardware you are using for
	  your application will be sufficient to run your application even if
	  you start to use LIXA libraries for TX or XTA.
	</para>
	<para>
	  LIXA state server, <command>lixad</command>, requires low latency
	  disks to perform at its best: the lower the latency of the disks that
	  hosts the state files, tipically <filename>/opt/lixa/var</filename>,
	  the better. The best performance should be expected by a storage
	  array with battery-backed cache or a technology with equivalent
	  speed.
	</para>
      </section>
    </section>
    <section>
      <title>Co-requisites</title>
      <para>
	An XA transaction manager is used to coordinate one or more XA
	resource managers. From a LIXA perspective there are basically 3 type
	of resource managers:
	<orderedlist numeration="arabic">
	  <listitem><para>
	      <emphasis>LIXA:</emphasis> Resource Managers
	      provided by the project that are useful only for testing and as 
	      sample implementations
	  </para></listitem>
	  <listitem><para>
	      <emphasis>F/OSS:</emphasis> Resource Managers provided by
	      Free/Open Source Software projects like PostgreSQL and MySQL
	  </para></listitem>
	  <listitem><para>
	      <emphasis>Proprietary:</emphasis> Resource Managers
	      provided by business corporations using commercial licensing.
	  </para></listitem>
	</orderedlist>
	There is not a list of <emphasis>supported</emphasis> third party
	resource managers, because LIXA is a project and not a product; this
	is the list of third party resource managers that have been tested in
	conjuction with LIXA transaction manager:
	<itemizedlist mark='bullet'>
	  <listitem><para><productname>
		IBM DB2 Express-C 9.7 (32 bit) / IBS DB2 Express0C 11.1 (64 bit)
	  </productname></para></listitem>
	  <listitem><para><productname>
		MySQL 5.0 (32 bit) / MySQL 5.1 (64 bit) / MySQL 5.6.34 (64 bit) / MySQL 8.0.22 (64 bit)
		<footnote><para>
		    You must use InnoDB back-end to perform transactions with
		    MySQL; MyISAM back-end is not supported.
		</para></footnote>
	  </productname></para></listitem>
	  <listitem><para><productname>
		Oracle XE 10.2 (32 bit) / Oracle XE 11.2 (64 bit)
	  </productname></para></listitem>
	  <listitem><para><productname>
		Oracle SE 12.1 (64 bit) Instant Client
	  </productname></para></listitem>
	  <listitem><para><productname>
		PostgreSQL 8.3 (32 bit) / PostgreSQL 8.4 (64 bit) / PostgreSQL 9.2 (64 bit) / PostgreSQL 12.4 (64 bit)
	  </productname></para></listitem>
	  <listitem><para><productname>
		WebSphere MQ 7.1 (32 bit)
	  </productname></para></listitem>
	</itemizedlist>
      </para>
    </section>
    <section>
      <title>Authorization</title>
      <important><para>
	The software produced by the LIXA project 
	<emphasis>does</emphasis> not require any
	special authorization to run.
      </para></important>
      <para>
	You can run the processes with the desired UNIX user you prefer but
	in this manual specific user and group will be used as a suggestion.
	<section>
	  <title>Create <systemitem class="username">lixa</systemitem>
	    user with Ubuntu</title>
	  Use this commands in an Ubuntu based Linux system to create the
	  <systemitem class="username">lixa</systemitem> user and the
	  <systemitem class="groupname">lixa</systemitem> group:
	  <screen>
tiian@ubuntu:~$ sudo su -
root@ubuntu:~# id
uid=0(root) gid=0(root) groups=0(root)
root@ubuntu:~# addgroup --system lixa
Adding group `lixa' (GID 113) ...
Done.
root@ubuntu:~# adduser --system --ingroup lixa --shell /bin/bash lixa
Adding system user `lixa' (UID 106) ...
Adding new user `lixa' (UID 106) with group `lixa' ...
Creating home directory `/home/lixa' ...
root@ubuntu:~# su -c id lixa
uid=106(lixa) gid=113(lixa) groups=113(lixa)
root@ubuntu:~# exit
logout
	  </screen>
	</section>
	<section>
	  <title>Create <systemitem class="username">lixa</systemitem>
	    user with CentOS</title>
	  Use this commands in an Ubuntu based Linux system to create the
	  <systemitem class="username">lixa</systemitem> user and the
	  <systemitem class="groupname">lixa</systemitem> group:
	  <screen>
[tiian@centos ~]$ su -
Password:
[root@centos ~]# id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
[root@centos ~]# groupadd --system lixa
[root@centos ~]# useradd --system --no-user-group --gid lixa --home /home/lixa --create-home --shell /bin/bash lixa
[root@centos ~]# su -c id lixa
uid=496(lixa) gid=490(lixa) groups=490(lixa)
[root@centos ~]# exit
logout
	  </screen>
	</section>
	Refer to the man page of your Linux distribution if the above
	commands fail; on some distributions you must use
	<quote><command>su -</command></quote> instead of 
	<quote><command>sudo su -</command></quote>.
      </para>
      <note><para>
	  LIXA client communicates to LIXA server (daemon) throught TCP/IP and
	  the client processes do not access the status files located in
	  <filename>/opt/lixa/var/</filename>, only the 
	  <command>lixad</command> has to access the files.
	  The LIXA client can be considered <emphasis>stateless</emphasis>
	  because all the state information is persisted by the LIXA server.
      </para></note>
    </section>
  </section>
  <section>
    <title>Certified and Tested configurations</title>
    <para>
      A certified configuration is a configuration that passed all the 
      relevant test cases. The list of the certified configurations is
      described inside the file <filename>TestLog</filename> that's
      distributed along with LIXA tarball.
      <note><para>
	A certified configuration should build and install flawlessly on
	any system with the same configuration.
      </para></note>
    </para>
    <para>
      A tested configuration is a configuration that was tested in the past
      and should reasonably work with similar configurations: tested
      configurations are proposed in 
      <xref linkend="Development"/>.
      They can be used as a starting point for non trivial configurations with
      one or more commercial Resource Managers.
    </para>
  </section>
  <section>
    <title>Software download</title>
    <para>
      The LIXA project is hosted both on 
      <link xlink:href="https://github.com/tiian/lixa">
	<citetitle>GitHub.com</citetitle>
      </link>
      and
      <link xlink:href="http://sourceforge.net/projects/lixa/">
	<citetitle>SourceForge.net</citetitle>
      </link>
      portals. GitHub.com is mainly intended for system software developers
      that need to access, change and share the source code with the
      project. SourceForge.net is mainly intended for system engineers that
      need to download and install the software.
    </para>
    <note><para>
      The source code that can be fetched using <emphasis>git</emphasis>
      typically contains the last commit: there's no guarantee
      that every commit contains stable software, sometimes it can be
      intermediate work that does not compile. Every release is explicitly
      tagged.
    </para></note>
    <warning><para>
      The tarball that can be downloaded by SourceForge.net is a release
      that has passed some sort of test and should compile and run
      flawlessly. Even releases are associated to <emphasis>stable</emphasis>
      software and odd releases are associated to <emphasis>testing</emphasis>
      software with new features.
    </para></warning>
  </section>
  <section>
    <title>Configure, build and install</title>
    <para>
      LIXA project tries to adhere to the GNU <emphasis>de facto</emphasis>
      standard. Supposing you downloaded the package 
      <filename>lixa-X.Y.Z.tar.gz</filename>, the basic sequence is:
      <screen>
tar xvzf lixa-X.Y.Z.tar.gz
cd lixa-X.Y.Z
./configure
make
      </screen>
      <note><para>
	Sometimes, especially if you clone the git repository, you can
	get an error like the following one:
	<screen>
WARNING: 'aclocal-1.14' is missing on your system.
         You should only need it if you modified 'acinclude.m4' or
         'configure.ac' or m4 files included by 'configure.ac'.
         The 'aclocal' program is part of the GNU Automake package:
         &lt;http://www.gnu.org/software/automake&gt;
         It also requires GNU Autoconf, GNU m4 and Perl in order to run:
         &lt;http://www.gnu.org/software/autoconf&gt;
         &lt;http://www.gnu.org/software/m4/&gt;
         &lt;http://www.perl.org/&gt;
Makefile:457: recipe for target 'aclocal.m4' failed
make: *** [aclocal.m4] Error 127
	</screen>
        You can try the following command to solve the issue:
	<screen>
	  touch configure.ac aclocal.m4 configure Makefile.am Makefile.in
	</screen>
	or, in the event that the previous one failed, the following one:
        <screen>
          autoreconf -v -f -i
        </screen>
      </para></note>
      To install the software you need 
      <systemitem class="username">root</systemitem> 
      access. With some distributions, 
      like Ubuntu, 
      <systemitem class="username">root</systemitem> 
      access is available with the 
      <command>sudo</command> command and your own password:
      <screen>
sudo make install
      </screen>
      If the previous command does not work,
      <systemitem class="username">root</systemitem> 
      access is available with the
      <command>su</command> command and the
      <systemitem class="username">root</systemitem> 
      password: 
      <screen>
su -c "make install"
      </screen>
      If nothing goes wrong, the above commands install the LIXA software
      artifacts in <filename>/opt/lixa</filename> default directory.
      After the installation you should change the authorization
      assigned to some directories. Use <command>sudo su -c</command> 
      (Ubuntu) or
      <command>su -c</command> (CentOS) to gain root privileges and execute
      <command>chown</command>:
      <screen>
tiian@ubuntu:~$ sudo su -c "chown -R lixa:lixa /opt/lixa/etc/ /opt/lixa/var/"
tiian@ubuntu:~$ ls -la /opt/lixa/etc/ /opt/lixa/var/
/opt/lixa/etc/:
total 16
drwxr-xr-x 2 lixa lixa 4096 2011-03-30 23:13 .
drwxr-xr-x 9 lixa root 4096 2011-03-30 23:14 ..
-rw-r--r-- 1 lixa lixa 3542 2011-03-30 23:13 lixac_conf.xml
-rw-r--r-- 1 lixa lixa  447 2011-03-30 23:13 lixad_conf.xml

/opt/lixa/var/:
total 12
drwxr-xr-x 2 lixa lixa 4096 2011-03-30 23:14 .
drwxr-xr-x 9 lixa root 4096 2011-03-30 23:14 ..
-rw-r--r-- 1 lixa lixa  178 2011-03-30 23:14 README
      </screen>
      The succesful execution of the above commands guarantees that the
      configuration and the state files can be managed using the
      LIXA administrative account (
      user=<systemitem class="username">lixa</systemitem>,
      group=<systemitem class="groupname">lixa</systemitem>).
      <note><para>
	  The <command>chown</command> command must be executed after every
	  <command>make install</command> execution.
      </para></note>
    </para>
    <section>
      <title>Advanced configuration</title>
      <para>
	There are many options you can pass to the <command>configure</command>
	command to meet your needs (see below). Skip this section and
	jump directly to
	<xref linkend="Linking_third_party_resource_managers"/>
	if you are not expert in LIXA configuration.
      </para>
      <important>
	<para>
	  It is strongly suggested you issue the 
	  <command>make clean</command> command every time you re-configure
	  the package. If you didn't clean the previous build, you might
	  catch some strange undebuggable errors related to not aligned
	  libraries.
	</para>
      </important>
      <section>
	<title>Choosing a different installation <envar>PATH</envar></title>
	<note><para>
	    The commands explained in the previous section should be
	    adapted to different paths, if you choosed a non standard
	    installation path.
	</para></note>
	<para>
	  to perform the very first installation <filename>/tmp</filename> 
	  could be a good destination:
	  <screen>
./configure --prefix=/tmp/lixa
	  </screen>
	</para>
	<para>
	  After some testing, you might prefer your home directory:
	  <screen>
./configure --prefix=$HOME/lixa
	  </screen>
	  and you will get a layout like this:
	  <screen>
$HOME/lixa/bin
$HOME/lixa/etc
$HOME/lixa/include
$HOME/lixa/lib
$HOME/lixa/sbin
$HOME/lixa/var
	  </screen>
	</para>
	<para>
	  You can split code and data with something like this:
	  <screen>
./configure --prefix=/ --exec-prefix=/usr/local
	  </screen>
	</para>
      </section>
      <section>
	<title>Producing this manual too</title>
	<para>
	  To produce LIXA manual in HTML format you need 
	  <command>xsltproc</command> installed in your current search
	  path and <filename>chunk.xsl docbook.xsl</filename> stylesheet 
	  files. Use
	  <screen>
./configure --with-docbook
	  </screen>
	  to enable manual build and search for stylesheets in a subdir of
	  <filename>/usr/share</filename>. You may specify a different path
	  using:
	  <screen>
./configure --with-docbook=/path/to/father/of/xhtml/dir
	  </screen>
	</para>
      </section>
      <section>
	<title>Locating pre-requisites libraries</title>
	<para>
	  If any of the pre-requisite library include files are not in the
	  standard search <envar>PATH</envar>, you can export 
	  <envar>CPPFLAGS</envar> before the configure process to add 
	  your custom path:
	  <screen>
export CPPFLAGS=-I/path/to/libuuid
./configure
make
	  </screen>
	  to see the list of environment variables that can affect the build 
	  process
	  use the command
	  <screen>
./configure --help
	  </screen>
	</para>
      </section>
      <section>
	<title>Optional features</title>
	<para>
	  The supplied defaults are generally good enought to start 
	  working with LIXA, but if you want to perform some hacking 
	  you might be interested
	  in activating/deactivating some optional features.
	</para>
	<section>
	  <title>Tracing</title>
	  <para>
	    The tracing feature is enabled by default: the binary objects
	    produced by the build procedure contains a lot of messages that can
	    be displayed turning on tracing at run time.
	  </para>
	  <para>
	    Removing the tracing feature can save RAM (smaller binary objects)
	    and CPU (every trace message is tested against run time 
	    configuration).
	  </para>
	  <important>
	    <para>
	      Disabling tracing seems a good way to increase the performance of
	      the software, but unfortunately without a trace it is quite 
	      impossible to debug some issues. Only rock stable software can
	      be compiled without tracing, and this is not the case of LIXA.
	    </para>
	  </important>
	  <para>
	    To disable tracing, use <option>--disable-trace</option> on
	    <command>./configure</command> command line:
	    <screen>
./configure --disable-trace
	    </screen>
	  </para>
	</section>
	<section>
	  <title>Extra debug code and messages</title>
	  <para>
	    To enable extra debug code and messages, that's basically some
	    additional code and trace messages, use
	    <option>--enable-debug</option> on
	    <command>./configure</command> command line:
	    <screen>
./configure --enable-debug
	    </screen>
	    This feature is typically used for debugging some hard issues
	    during development and porting activities; for normal use of the
	    LIXA project software, it should not be used.
	  </para>
	</section>
	<section>
	  <title>Crash simulation</title>
	  <para>
	    This feature is useful when testing the software: with crash
	    simulation the software can be tested against simulated software
	    crashes and, on some extents, power outages.
	    To enable crash simulation use <option>--enable-crash</option> on
	    <command>./configure</command> command line:
	    <screen>
./configure --enable-crash
	    </screen>
	    This feature is typically used for testing some features during
	    development and porting activities; for normal use of the
	    LIXA project software, it should not be used.
	  </para>
	</section>
      </section>
    </section>
    <section xml:id="Linking_third_party_resource_managers">
      <title>Linking third party resource managers</title>
      <para>
	To link an already tested third party resource manager you can use
	a specific option on <command>./configure</command> command; to
	link a new resource manager, you have to hack the Makefiles and
	put all you need in place or you can perform a manual link.
      </para>
      <section>
	<title>IBM DB2 Express-C 9.7, 11.1<footnote><para>
	      IBM and DB2 are trademarks of <trademark>IBM</trademark>
	      corporation
	</para></footnote></title>
	<para>
	  This step is useful if you want to use IBM DB2 as a Resource
	  Manager coordinated by LIXA; only versions Express-C 9.7 and 11.1 
      have been tested, but there should not be relevant differences with a
	  different version. Use something like this:
	  <screen>
./configure --with-ibmdb2=/opt/ibm/db2/V9.7
	  </screen>
      Or the following for V11.1
      <screen>
        ./configure --with-ibmdb2=/opt/ibm/db2/V11.1
      </screen>
	  to create a loadable module containing the switch structure.
	</para>
      </section>
      <section>
	<title>MySQL 5.0, 5.1, 5.5, 5.6, 8.0<footnote><para>
	      MySQL is a trademark of <trademark>Oracle</trademark> 
	      corporation; details are available at this link:
	      <link xlink:href="http://www.mysql.com/about/legal/">
		http://www.mysql.com/about/legal/</link>
	  </para></footnote>
	</title>
	<para>
	  This step is useful if you want to use MySQL
	  <footnote><para>
	      These are the necessary packages on CentOS: 
	      mysql.i686 mysql-devel.i686 mysql-server.i686
	  </para></footnote>
	  as a Resource Manager coordinated by LIXA; only versions 5.0, 5.1,
	  5.5 and 5.6 have been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this:
	  <screen>
./configure --with-mysql
	  </screen>
	  or something like this if you need to point a specific installation:
	  <screen>
./configure --with-mysql=/path/to/mysql_config
	  </screen>
	  to create a loadable module containing the switch structure. It's
	  not necessary to specify the MySQL installation directory because
	  the <command>mysql_config</command> utility command is used.
	</para>
	<section xml:id="Mysql_XTA_for_Python">
	  <title>XTA for Python</title>
	  <para>
	    If you want to use XTA for Python (see
	    <xref linkend="XTA_technology_matrix"/>), you need the
	    <quote>mysqlclient-python</quote> driver
	    with function <function>_get_native_connection</function> enabled:
	    <screen>
sudo pip install mysqlclient
	    </screen>
	    or
	    <screen>
sudo pip3 install mysqlclient
	    </screen>
	    if you are using Python 3.
	    The required feature is available in mysqlclient-python starting
	    with version 1.4.0.
	  </para>
	</section>
	<section>
	  <title>XTA for Java</title>
	  <para>
	    If you want to use XTA for Java (see
	    <xref linkend="XTA_technology_matrix"/>), you need a JDBC driver
	    that supports MySQL and JTA standard. Specify the JAR file that
	    contains the JDBC driver during config phase with something like
	    this:
	    <screen>
./configure --with-mysql --with-mysql-jdbc=/usr/share/java/mysql.jar
	    </screen>
	    As a general warning, don't stick to the version provided by your
	    Linux distribution: sometimes a better one is available in the
	    vendor's portal.
	  </para>
	</section>
	<note><para>
	    MySQL does not supply an XA standard switch structure, but
	    only some SQL non standard statements (
	    <code>XA START, XA END, XA PREPARE, XA COMMIT, XA ROLLBACK, 
	      XA RECOVER</code>
	    ) that can be used to implement some XA features.
	    This is good enough to build a loadable module that can be
	    used by the LIXA transaction manager, but some XA standard features
	    - like dynamic registration - can not be implemented.
	</para></note>
	<warning><para>
	  Some old versions of the software are affected by a
	    <link xlink:href="http://bugs.mysql.com/bug.php?id=12161">
	      serious documented bug (# 12161)</link>
	    related to the XA implementation of MySQL. The symptoms perceived
	    while developing LIXA are described below:
	    <orderedlist enumeration='arabic'>
	      <listitem><para>
		  a MySQL client application invokes XA START
	      </para></listitem>
	      <listitem><para>
		  it updates some data in the database
	      </para></listitem>
	      <listitem><para>
		  it invokes XA END and XA PREPARE
	      </para></listitem>
	      <listitem><para>
		  it crashes and disconnects from the MySQL server 
	      </para></listitem>
	      <listitem><para>
		  MySQL server rollbacks the transaction and there's no way to
		  see it again using XA RECOVER
	      </para></listitem>
	    </orderedlist>
	    This behavior violates the XA specification: below there is an 
	    excerpt for <function>xa_prepare</function> from man page (
	    <citation>XAspec</citation>, page 44)
	    <quote>Once this function successfully returns, 
	      the resource manager 
	      must guarantee that the transaction branch may be either 
	      committed or rolled back regardless of failures. A resource 
	      manager cannot erase its knowledge of a branch until the 
	      transaction manager calls either xa_commit() or xa_rollback () 
	      to complete the branch
	    </quote>.
	  </para>
	  <para>
	    The impact of this bug is quite severe and seriously compromises
	    the ACID properties of the resulting system (application program
	    + MySQL resource manager + LIXA transaction manager).
	  </para>
	</warning>
      </section>
      <section>
	<title>MariaDB</title>
	<para>
	  Even if MariaDB is different from MySQL, it can be used with LIXA in
	  the same way of MySQL: most of the times it's just a matter of
	  changing some file or directory name.
	  LIXA does not provide specific options for MariaDB, just use the
	  options provided for MySQL.
	</para>
      </section>
      <section>
	<title>Oracle XE 10.2/11.2 (server)<footnote><para>
	      Oracle is a trademark of <trademark>Oracle</trademark>
	      corporation
	</para></footnote></title>
	<para>
	  This step is useful if you want to use Oracle Database as a Resource
	  Manager coordinated by LIXA; only version XE 10.2/11.2 has been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this for Oracle 10.2
	  (32 bit architecture):
	  <screen>
./configure --with-oracle=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server
	  </screen>
	  and something like this for Oracle 11.2 (64 bit architecture):
	  <screen>
./configure --with-oracle=/u01/app/oracle/product/11.2.0/xe
	  </screen>
	  to create a loadable module containing the switch structure.
	</para>
	<para>
	  Extra configuration is needed in order to use Oracle DBMS; the
	  necessary steps are documented in the configuration chapter.
	</para>
      </section>
      <section>
	<title>Oracle SE 12.1 (Instant Client)<footnote><para>
	      Oracle is a trademark of <trademark>Oracle</trademark>
	      corporation
	</para></footnote></title>
	<para>
	  This step is useful if you want to use Oracle Database Instant
	  Client as a Resource Manager coordinated by LIXA; only version 
	  Standard Edition 12.1 has been tested, but there should not be 
	  relevant differences with a different version. Use something like 
	  this for Oracle 12.1 Instant Client (64 bit architecture):
	  <screen>
./configure --with-oracle-include=/opt/oracle/instantclient_12_1/sdk/include/ \
            --with-oracle-lib=/opt/oracle/instantclient_12_1/
	  </screen>
	  to create a loadable module containing the switch structure.
	</para>
	<para>
	  Extra configuration is needed in order to use Oracle DBMS; the
	  necessary steps are documented in the configuration chapter.
	</para>
      </section>
      <section>
	<title>PostgreSQL 8.3, 8.4, 9.2, 9.3, 9.5, 10, 12.4<footnote><para>
	      The Trademark Policy of PostgreSQL is available at this link:
	      <link xlink:href="http://wiki.postgresql.org/wiki/Trademark_Policy">
		http://wiki.postgresql.org/wiki/Trademark_Policy</link>
	</para></footnote></title>
	<para>
	  This step is useful if you want to use PostgreSQL as a Resource
	  Manager coordinated by LIXA; only versions 8.3, 8.4 and 9.3 have been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this (Ubuntu):
	  <screen>
./configure --with-postgresql-include=/usr/include/postgresql --with-postgresql-lib=/usr/lib
	  </screen>
	  or something like this (CentOS)
	  <footnote><para>
	      These are the necessary packages on CentOS: 
	      postgresql-server.i686 postgresql.i686 postgresql-devel.i686
	  </para></footnote>:
	  <screen>
./configure --with-postgresql-include=/usr/include --with-postgresql-lib=/usr/lib
	  </screen>
	  to create a loadable module containing the switch structure.
	</para>
	<section xml:id="Postgresql_XTA_for_Python">
	  <title>XTA for Python</title>
	  <para>
	    If you want to use XTA for Python (see
	    <xref linkend="XTA_technology_matrix"/>), you need the
	    <quote>psycopg2</quote> driver
	    with function <function>get_native_connection</function> enabled:
	    <screen>
sudo pip install psycopg2 
	    </screen>
	    or
	    <screen>
sudo pip3 install psycopg2
	    </screen>
	    if you are using Python 3.
	    The required feature is available in psycopg2 starting
	    with version 2.8.
	  </para>
	</section>
	<section>
	  <title>XTA for Java</title>
	  <para>
	    If you want to use XTA for Java (see
	    <xref linkend="XTA_technology_matrix"/>), you need a JDBC driver
	    that supports PostgreSQL and JTA standard. Specify the JAR file that
	    contains the JDBC driver during config phase with something like
	    this:
	    <screen>
./configure --with-postgresql --with-postgresql-jdbc=/opt/postgresql/postgresql.jar
	    </screen>
	    As a general warning, don't stick to the version provided by your
	    Linux distribution: sometimes a better one is available in the
	    project's portal. For instance, version 9.2-1002-1 distributed with
	    Ubuntu 14.04 does not pass all case tests due a bug related
	    to XA protocol implementation.
	  </para>
	</section>
	<note><para>
	    PostgreSQL does not supply an XA standard switch structure, but
	    only some SQL non standard statements (
	    <code>PREPARE TRANSACTION, COMMIT PREPARED, ROLLBACK PREPARED</code>
	    ) that can be used to implement some XA features.
	    This is good enough to build a loadable module that can be
	    used by the LIXA transaction manager, but some XA standard features
	    - like dynamic registration - can not be implemented.
	</para></note>
      </section>
      <section>
	<title>WebSphere MQ 7.1<footnote><para>
	      WebSphere and WebSphere MQ are trademarks of 
	      <trademark>IBM</trademark> corporation
	</para></footnote></title>
	<para>
	  If you want to use WebSphere MQ with server/bind mode, you have to
	  use something like this when configuring LIXA:
	  <screen>
./configure --enable-wsmq --with-wsmq=/opt/mqm71
	  </screen>
	  If you want to use WebSphere MQ with Extended Transactional Client
	  mode, you have to use something like this when configuring LIXA:
	  <screen>
./configure --enable-wsmq=ETC --with-wsmq=/opt/mqm71
	  </screen>
	  There should be no reason you want both on the same host: if you
	  could use the server/bind mode, you should use it because it would
	  give you the best performance.
	  If you don't have the queue manager inside the host, you 
	  will have to use the Extended Transactional Client mode (ETC).
	</para>
      </section>
      <section>
	<title>Two or more resource managers</title>
	<para>
	  If you want to use two or more resource managers, and this is a
	  typical condition for the XA usage, you must concatenate two or more
	  <parameter>--with-</parameter> parameters.
	  This command, for instance, can be used to build IBM DB2, Oracle
	  and PostgreSQL loadable modules:
	  <screen>
./configure --with-ibmdb2=/opt/ibm/db2/V9.7 \
> --with-oracle=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server \
> --with-postgresql-include=/usr/include/postgresql --with-postgresql-lib=/usr/lib \
> --with-mysql
	  </screen>
	</para>
      </section>
    </section>
    <section xml:id="Configuring_Resource_Managers_for_XTA_Java">
      <title>Configuring Resource Managers for XTA Java</title>
      <para>
	To build the XTA for Java component, it's not strictly necessary to
	specify at configure time the classpath of all the Resource Managers
	that will be linked by the Application Programs.
	Anyway, if you want to check you build, you have to specify all the
	jar files related to the Resource Managers used by the tests.
	The following <command>configure</command> command, for example,
	configure 3 Java Resource Managers: MySQL, PostgreSQL and Oracle 
	Database server:
	<screen>
./configure --with-mysql --with-mysql-jdbc=/usr/share/java/mysql.jar \
&gt; --with-postgresql --with-postgresql-jdbc=/opt/postgresql/postgresql.jar \
&gt; --with-oracle-include=/opt/oracle/instantclient_12_1/sdk/include/ --with-oracle-lib=/opt/oracle/instantclient_12_1/ --with-oracle-jdbc=/opt/oracle/OJDBC-Full/ojdbc7.jar
	</screen>
	Notice the parameters related to JDBC drivers:
	<parameter class='command'>--with-mysql-jdbc=/usr/share/java/mysql.jar</parameter>,
	<parameter class='command'>--with-postgresql-jdbc=/opt/postgresql/postgresql.jar</parameter>,
	<parameter class='command'>--with-oracle-jdbc=/opt/oracle/OJDBC-Full/ojdbc7.jar</parameter>.
	Other parameters like 
	<parameter class='command'>--with-mysql</parameter> refer to the C
	driver used by other languages: C, C++, Python...
      </para>
      <note>
	<para>
	  JDBC drivers available inside Linux distributions are sometimes old
	  in comparison with the drivers that can be downloaded directly from
	  the project or product site: if possible, try to use the latest
	  available JDBC driver that's compatible with your (database) server
	  and with your Java Runtime Environment.
	</para>
      </note>
    </section>
    <section>
      <title>Summary</title>
      <para>
	The options illustrated above can be combined to obtain a specific
	configuration. This is an example of a IBM DB2 + Oracle enabled
	installation using an alternate installation path:
	<screen>
tar xvzf lixa-X.Y.Z.tar.gz
cd lixa-X.Y.Z
./configure --prefix=$HOME/lixa --with-ibmdb2=/opt/ibm/db2/V9.7 --with-oracle=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server
make
sudo make install
	</screen>
      </para>
    </section>
  </section>
  <section>
    <title>Checking (LIXA developers only)</title>
    <important>
      <para>
	The check procedure of LIXA is not intended for general purpose, but 
	only during the development process to guarantee a change does not 
	introduce regressions.
	The procedure requires a lot of configuration to run properly because
	several specific behaviors of some resource managers are tested.
	In case you want to execute it, start with a configuration
	documented in Testlog file, and only after you can complete it
	successfully try something different.
      </para>
      <para>
	The most common issues in performing the check are:
	<itemizedlist mark='bullet'>
	  <listitem>
	    <para>
	      one ore more resource manager(s) is not configure or is not
	      reachable: test scripts skip some tests that cannot be performed
	      without a specific resource manager, but the most sophisticated
	      tests for XTA cannot be parametrized
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      some tests are based on timing to wait for an event, like for
	      example waiting that a resource manager put a transaction in its
	      internal recovery list: sometimes timing doesn't work and the
	      same test, if repeated is passed
	    </para>
	  </listitem>
	</itemizedlist>
	
      </para>
    </important>
    <para>
      LIXA has its own test suite implemented with 
      <application>Autotest</application>. A specific build configuration is
      <emphasis>necessary</emphasis> to enable all the tests:
      <screen>
tar xvzf lixa-X.Y.Z.tar.gz
cd lixa-X.Y.Z
./configure --prefix=/tmp/lixa --enable-crash
make check
      </screen>
      If the binary code produced by the compiler is fine, and your system
      is fine too, all the test <emphasis>must</emphasis> complete without
      errors.
    </para>
    <section>
      <title>Checking notes</title>
      <para>
	Some case tests, specifically MT/1.0/* and MT/2.0/*, stress the
	LIXA software with a massive multithread workload.
	Sometimes the tests fail due to the configuration of your system
	and/or your user account. There are two well known issues:
	<orderedlist enumeration='arabic'>
	  <listitem><para>
	      max files: the case tests open approximately 1000 files
	      (TCP/IP sockets); command 
	      <command>ulimit -n</command> must return the value 1024 or
	      more
	  </para></listitem>
	  <listitem><para>
	      stack size: if the stack size is too large, 32 bit platform
	      can experience addressing limit errors; reduce the default 
	      stack size to 4096 if necessary with command
	      <command>ulimit -s 4096</command>
	  </para></listitem>
	</orderedlist>
      </para>
      <para>
	Due to practical reasons, for some features there is not automatic
	testing: tests that requires too many configurations become very
	difficult to develop and to maintain. Here's a list of features that
	are not automatically tested and how you can manually test them if
	necessary:
	<orderedlist enumeration='arabic'>
	  <listitem><para>
	    Oracle Instant Client: it does not provide a
	    standard <filename>oracle_env.sh</filename> and a SqlNet
	    configuration should be done in advance. To test it, use sample 
	    programs provided and follow the reference manual for environment
	    set-up, program build and test
	  </para></listitem>
	  <listitem><para>
	    Oracle Pro*C: the "sys_include" statement of file
	    <filename>pcscfg.cfg</filename> requires a lot of hacking for
	    proper configuration, especially if the user installed the "zip"
	    package and/or the system is Ubuntu Linux. To test it, use sample 
	    programs provided and follow the reference manual for environment
	    set-up, program build and test
	  </para></listitem>
	  <listitem><para>
	    Oracle Pro*COBOL: not yet available.  To test it, use sample 
	    programs provided and follow the reference manual for environment
	    set-up, program build and test
	  </para></listitem>
	</orderedlist>
      </para>
    </section>
    <section>
      <title>Valgrind advanced checking (LIXA developers only)</title>
      <para>
	If you are interested in checking the internals of LIXA you can
	activate memory or thread check using 
	<link xlink:href="http://valgrind.org/">Valgrind</link> (it's
	assumed you already have installed Valgrind).
	If you were insterested in memory usage analysis, this is the sequence
	of commands you would use:
	<screen>
export CLIENT_CHECK_TYPE=memory
export SERVER_CHECK_TYPE=memory
make check
	</screen>
	If you were interested in thread usage analysis, this is the sequence
	of commands you would use:
	<screen>
export CLIENT_CHECK_TYPE=thread
export SERVER_CHECK_TYPE=thread
make check
	</screen>
	Check type can be set independently: you may check memory behavior of 
	the client component without checking memory behavior of the server
	component and vice versa.
	<note><para>
	    Valgrind is a very good tool, but can not understand some
	    optimizations and detects some wrong memory leaks 
	    (false positives). Nevertheless if you were suspecting there is
	    a memory leak inside LIXA, this would be a good start point to
	    discover where the issue is.
	</para></note>
      </para>
    </section>
    <section>
      <title>GDB assisted checking (LIXA developers only)</title>
      <para>
	Sometimes it may be useful to execute the case tests under the
	supervision of <command>gdb</command> instead of running it directly
	from the shell.
	Both client and server can be executed inside <command>gdb</command>
	using these commands:
	<screen>
export CLIENT_CHECK_TYPE=debug
export SERVER_CHECK_TYPE=debug
make check
	</screen>
	<note>
	  <para>
	    Running a case test inside <command>gdb</command> may change
	    the exit code checked by <command>automake</command> tests.
	    You can not use this option as a default test option,
	    but it may be useful to inspect some strange problems because
	    <command>gdb</command> produce the stack trace related to the
	    issue.
	  </para>
	</note>
      </para>
    </section>
  </section>
</chapter>
