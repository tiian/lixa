<chapter xml:id="Installation">
  <title>Installation</title>
  <para>
    This chapter explains how to download, install and verify the software
    released by LIXA project.
  </para>
  <section>
    <title>System requirements</title>
    <para>
      LIXA project is developed on an x86 based 
      <link xlink:href="http://www.ubuntu.com/">
	<citetitle>Ubuntu 8.04 system</citetitle>
      </link>; it
      compiles and runs on both <emphasis>server</emphasis> and
      <emphasis>desktop</emphasis> flavors. 
      LIXA project is ported on x86_64 architecture using
      <link xlink:href="http://www.ubuntu.com/">
	<citetitle>Ubuntu 10.04 system</citetitle>
      </link>.
      Installation on a different GNU/Linux
      distribution should be quite straightforward; installation on a different
      <trademark>UNIX</trademark> like system would probably need some work.
    </para>
    <para>
      If you successfully installed LIXA on a different system, you might
      publish your experience on the public forum hosted on SourceForge.net 
      and share your results with other users. 
    </para>
    <section>
      <title>Pre-requisites</title>
      <para>
	To compile LIXA software the GNU tools are needed: gcc, gmake, libtool.
	Autoconf and automake are used, but should not be necessary if you want
	to install the original tarball.
      </para>
      <para>
	Some <emphasis>libraries (run time and development stuff)</emphasis> 
	are necessary too:
	<itemizedlist mark='bullet'>
	  <listitem><para><application>libdl</application></para></listitem>
	  <listitem><para><application>libglib</application> (libglib2.0-dev on Ubuntu)</para></listitem>
	  <listitem><para><application>libgmodule</application></para></listitem>
	  <listitem><para><application>libgthread</application></para></listitem>
	  <listitem><para><application>libm</application></para></listitem>
	  <listitem><para><application>libpthread</application></para></listitem>
	  <listitem><para><application>libuuid</application> (uuid-dev on Ubuntu)</para></listitem>
	  <listitem><para><application>libxml2</application> (libxml2-dev on Ubuntu)</para></listitem>
	</itemizedlist>
	<application>libglib</application> (and others libg*) and 
	<application>libxml2</application> are discovered with 
	<command>pkg-config</command> command, while the others must be in
	standard include <envar>PATH</envar>.
      </para>
      <section>
	<title>Packages for Linux Ubuntu (8.04 and 10.04)</title>
	<para>
	  <application>xsltproc</application>,
	  <application>docbook-xsl</application> and
	  <application>docbook-xsl-doc-html</application> are necessary
	  to produce this manual.
	</para>
	<para>
	  <application>automake</application> and 
	  <application>autoconf</application> are 
	  necessary to run the test suite (<command>make check</command>).
	</para>
      </section>
      <section>
	<title>Packages for Linux CentOS (6.2)</title>
	<para>
	  This packages are necessary to create a build environment:
 	  <application>glib2-devel.i686</application>,
 	  <application>libuuid-devel.i686</application>,
 	  <application>libxml2-devel.i686</application>,
 	  <application>gcc.i686</application>,
 	  <application>libtool.i686</application> and
 	  <application>make.i686</application>.
	</para>
	<para>
	  <application>docbook5-style-xsl.noarch</application> is necessary
	  to produce this manual.
	</para>
      </section>
      <simplesect>
	<title>Low level pre-requisites</title>
	<para>
	  If you are trying to install LIXA software on a different operating
	  system, these are some fundamental requirements:
	  <itemizedlist mark='bullet'>
	    <listitem><para><function>poll</function>: 
		LIXA daemon uses this function for high parallelism network
		operations
	    </para></listitem>
	    <listitem><para><function>mmap</function>:
		LIXA daemon uses this function for high performance disk
		access
	    </para></listitem>
	    <listitem><para><function>dlopen</function>:
		LIXA transaction manager uses this function to dynamically load
		resource managers XA switch structures 
	    </para></listitem>
	    <listitem><para><function>uuid_generate</function>:
		LIXA transaction manager uses this function to generate unique
		transaction identifiers (xid)
	    </para></listitem>
	  </itemizedlist>
	  Without the above functions, a specific porting process is necessary
	  to adapt LIXA to your system.
	</para>
      </simplesect>
    </section>
    <section>
      <title>Co-requisites</title>
      <para>
	An XA transaction manager is used to coordinate one or more XA
	resource managers. From a LIXA perspective there are basically 3 type
	of resource managers:
	<orderedlist numeration="arabic">
	  <listitem><para>
	      <emphasis>LIXA:</emphasis> resource managers
	      provided by the project for testing and as sample implementations
	  </para></listitem>
	  <listitem><para>
	      <emphasis>F/OSS:</emphasis> resource managers provided by
	      Free/Open Source Software projects
	  </para></listitem>
	  <listitem><para>
	      <emphasis>Proprietary:</emphasis> resource managers
	      provided by business corporations using commercial licensing.
	  </para></listitem>
	</orderedlist>
	There is not a list of <emphasis>supported</emphasis> third party
	resource managers, because LIXA is a project and not a product; this
	is the list of third party resource managers that have been tested in
	conjuction with LIXA transaction manager:
	<itemizedlist mark='bullet'>
	  <listitem><para><productname>
		IBM DB2 Express-C 9.7 (32 bit)
	  </productname></para></listitem>
	  <listitem><para><productname>
		MySQL 5.0 (32 bit) / MySQL 5.1 (64 bit)
	  </productname></para></listitem>
	  <listitem><para><productname>
		Oracle XE 10.2 (32 bit) / Oracle XE 11.2 (64 bit)
	  </productname></para></listitem>
	  <listitem><para><productname>
		PostgreSQL 8.3 (32 bit) / PostgreSQL 8.4 (64 bit)
	  </productname></para></listitem>
	</itemizedlist>
      </para>
    </section>
    <section>
      <title>Authorization</title>
      <important><para>
	The software produced by the LIXA project 
	<emphasis>does</emphasis> not require any
	special authorization to run.
      </para></important>
      <para>
	You can run the processes with the desired UNIX user you prefer but
	in this manual specific user and group will be used as a suggestion.
	<section>
	  <title>Create <systemitem class="username">lixa</systemitem>
	    user with Ubuntu</title>
	  Use this commands in an Ubuntu based Linux system to create the
	  <systemitem class="username">lixa</systemitem> user and the
	  <systemitem class="groupname">lixa</systemitem> group:
	  <screen>
tiian@ubuntu:~$ sudo su -
root@ubuntu:~# id
uid=0(root) gid=0(root) groups=0(root)
root@ubuntu:~# addgroup --system lixa
Adding group `lixa' (GID 113) ...
Done.
root@ubuntu:~# adduser --system --ingroup lixa --shell /bin/bash lixa
Adding system user `lixa' (UID 106) ...
Adding new user `lixa' (UID 106) with group `lixa' ...
Creating home directory `/home/lixa' ...
root@ubuntu:~# su -c id lixa
uid=106(lixa) gid=113(lixa) groups=113(lixa)
root@ubuntu:~# exit
logout
	  </screen>
	</section>
	<section>
	  <title>Create <systemitem class="username">lixa</systemitem>
	    user with CentOS</title>
	  Use this commands in an Ubuntu based Linux system to create the
	  <systemitem class="username">lixa</systemitem> user and the
	  <systemitem class="groupname">lixa</systemitem> group:
	  <screen>
[tiian@centos ~]$ su -
Password:
[root@centos ~]# id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
[root@centos ~]# groupadd --system lixa
[root@centos ~]# useradd --system --no-user-group --gid lixa --home /home/lixa --create-home --shell /bin/bash lixa
[root@centos ~]# su -c id lixa
uid=496(lixa) gid=490(lixa) groups=490(lixa)
[root@centos ~]# exit
logout
	  </screen>
	</section>
	Refer to the man page of your Linux distribution if the above
	commands fail; on some distributions you must use
	<quote><command>su -</command></quote> instead of 
	<quote><command>sudo su -</command></quote>.
      </para>
      <note><para>
	  LIXA client communicates to LIXA server (daemon) throught TCP/IP and
	  the client processes do not access the status files located in
	  <filename>/opt/lixa/var/</filename>, only the 
	  <command>lixad</command> has to access the status files.
      </para></note>
    </section>
  </section>
  <section>
    <title>Tested configurations</title>
    <para>
      A tested configuration is a configuration that passed all the case
      tests.
      This is the list of the tested configurations:
      <table frame="all">
	<thead>
	  <tr><td>Operating system:</td><td>Ubuntu Linux 8.04</td></tr>
	</thead>
	<tbody>
	  <tr><td>Architecture:</td><td>x86 (physical)</td></tr>
	  <tr><td>Resource Manager:</td><td>IBM DB2 9.7</td></tr>
	  <tr><td>Resource Manager:</td><td>MySQL 5.0.51a</td></tr>
	  <tr><td>Resource Manager:</td><td>Oracle XE 10.2</td></tr>
	  <tr><td>Resource Manager:</td><td>PostgreSQL 8.3</td></tr>
	</tbody>
      </table>
      <table frame="all">
	<thead>
	  <tr><td>Operating system:</td><td>Ubuntu Linux 8.04</td></tr>
	</thead>
	<tbody>
	  <tr><td>Architecture:</td><td>x86 (virtual)</td></tr>
	  <tr><td>Resource Manager:</td><td>IBM DB2 9.7</td></tr>
	  <tr><td>Resource Manager:</td><td>MySQL 5.0.51a</td></tr>
	  <tr><td>Resource Manager:</td><td>Oracle XE 10.2</td></tr>
	  <tr><td>Resource Manager:</td><td>PostgreSQL 8.3</td></tr>
	</tbody>
      </table>
      <table frame="all">
	<thead>
	  <tr><td>Operating system:</td><td>Ubuntu Linux 10.04</td></tr>
	</thead>
	<tbody>
	  <tr><td>Architecture:</td><td>x86_64 (physical)</td></tr>
	  <tr><td>Resource Manager:</td><td>MySQL 5.1.41</td></tr>
	  <tr><td>Resource Manager:</td><td>Oracle XE 11.2</td></tr>
	  <tr><td>Resource Manager:</td><td>PostgreSQL 8.4</td></tr>
	</tbody>
      </table>
      <table frame="all">
	<thead>
	  <tr><td>Operating system:</td><td>CentOS 6.2</td></tr>
	</thead>
	<tbody>
	  <tr><td>Architecture:</td><td>x86 (virtual)</td></tr>
	  <tr><td>Resource Manager:</td><td>MySQL 5.0.51a</td></tr>
	  <tr><td>Resource Manager:</td><td>PostgreSQL 8.3</td></tr>
	</tbody>
      </table>
    </para>
  </section>
  <section>
    <title>Software download</title>
    <para>
      The LIXA project is hosted on SourceForge.net portal at this URL:
      <link xlink:href="http://sourceforge.net/projects/lixa/">
	<citetitle>http://sourceforge.net/projects/lixa/</citetitle>
      </link>
    </para>
    <para>
      The software is available only as a <emphasis>source code</emphasis>
      tarball; no
      pre-compiled packages are available: you need the C development tools
      installed to have success in LIXA installation. It is suggested to 
      download the gzipped tarball from the main page: the latest available
      release is generally what you need; you could download a previous release
      if you had a reason to do it.
    </para>
    <para>
      Alternatively you can fetch the source code using a subversion client,
      but you should pay attention that many commits on the subversion 
      repository
      are intermediate works and can give you partial or broken/under
      construction features.
    </para>
  </section>
  <section>
    <title>Configure, build and install</title>
    <para>
      LIXA project tries to adhere to the GNU <emphasis>de facto</emphasis>
      standard. Supposing you downloaded the package 
      <filename>lixa-X.Y.Z.tar.gz</filename>, the basic sequence is:
      <screen>
tar xvzf lixa-X.Y.Z.tar.gz
cd lixa-X.Y.Z
./configure
make
      </screen>
      To install the software you need 
      <systemitem class="username">root</systemitem> 
      access. With some distributions, 
      like Ubuntu, 
      <systemitem class="username">root</systemitem> 
      access is available with the 
      <command>sudo</command> command and your own password:
      <screen>
sudo make install
      </screen>
      If the previous command does not work,
      <systemitem class="username">root</systemitem> 
      access is available with the
      <command>su</command> command and the
      <systemitem class="username">root</systemitem> 
      password: 
      <screen>
su -c "make install"
      </screen>
      If nothing goes wrong, the above commands install the LIXA software
      artifacts in <filename>/opt/lixa</filename> default directory.
      After the installation you should change the authorization
      assigned to some directories. Use <command>sudo su -c</command> 
      (Ubuntu) or
      <command>su -c</command> (CentOS) to gain root privileges and execute
      <command>chown</command>:
      <screen>
tiian@ubuntu:~$ sudo su -c "chown -R lixa:lixa /opt/lixa/etc/ /opt/lixa/var/"
tiian@ubuntu:~$ ls -la /opt/lixa/etc/ /opt/lixa/var/
/opt/lixa/etc/:
total 16
drwxr-xr-x 2 lixa lixa 4096 2011-03-30 23:13 .
drwxr-xr-x 9 lixa root 4096 2011-03-30 23:14 ..
-rw-r--r-- 1 lixa lixa 3542 2011-03-30 23:13 lixac_conf.xml
-rw-r--r-- 1 lixa lixa  447 2011-03-30 23:13 lixad_conf.xml

/opt/lixa/var/:
total 12
drwxr-xr-x 2 lixa lixa 4096 2011-03-30 23:14 .
drwxr-xr-x 9 lixa root 4096 2011-03-30 23:14 ..
-rw-r--r-- 1 lixa lixa  178 2011-03-30 23:14 README
      </screen>
      The succesful execution of the above commands guarantees the
      configuration and the state files can be managed using the
      LIXA administrative account (
      user=<systemitem class="username">lixa</systemitem>,
      group=<systemitem class="groupname">lixa</systemitem>).
      <note><para>
	  The <command>chown</command> command must be executed after every
	  <command>make install</command> execution.
      </para></note>
    </para>
    <section>
      <title>Advanced configuration</title>
      <para>
	There are many options you can pass to <command>configure</command>
	command to meet your needs (see below). Skip this section and
	jump directly to
	<xref linkend="Linking_third_party_resource_managers"/>
	if you are not expert in LIXA configuration to avoid troubles.
      </para>
      <section>
	<title>Choosing a different installation <envar>PATH</envar></title>
	<note><para>
	    The commands explained in the previous section should be
	    adapted to different paths, if you choosed a non standard
	    installation path.
	</para></note>
	<para>
	  Performing the very first install <filename>/tmp</filename> 
	  could be a good destination:
	  <screen>
./configure --prefix=/tmp/lixa
	  </screen>
	</para>
	<para>
	  After some testing, you might prefer your home directory:
	  <screen>
./configure --prefix=$HOME/lixa
	  </screen>
	  and you will get a layout like this:
	  <screen>
$HOME/lixa/bin
$HOME/lixa/etc
$HOME/lixa/include
$HOME/lixa/lib
$HOME/lixa/sbin
$HOME/lixa/var
	  </screen>
	</para>
	<para>
	  You can split code and data with something like this:
	  <screen>
./configure --prefix=/ --exec-prefix=/usr/local
	  </screen>
	</para>
      </section>
      <section>
	<title>Producing this manual too</title>
	<para>
	  To produce LIXA manual in HTML format you need 
	  <command>xsltproc</command> installed in your current search
	  path and <filename>chunk.xsl docbook.xsl</filename> stylesheet 
	  files. Use
	  <screen>
./configure --with-docbook
	  </screen>
	  to enable manual build and search for stylesheets in a subdir of
	  <filename>/usr/share</filename>. You may specify a different path
	  using:
	  <screen>
./configure --with-docbook=/path/to/father/of/xhtml/dir
	  </screen>
	</para>
      </section>
      <section>
	<title>Locating pre-requisites libraries</title>
	<para>
	  If any of the pre-requisite library include files are not in the
	  standard search <envar>PATH</envar>, you can export 
	  <envar>CPPFLAGS</envar> before the configure process to add 
	  your custom path:
	  <screen>
export CPPFLAGS=-I/path/to/libuuid
./configure
make
	  </screen>
	  to see the list of environment variables that can affect the build 
	  process
	  use the command
	  <screen>
./configure --help
	  </screen>
	</para>
      </section>
      <section>
	<title>Optional features</title>
	<para>
	  The supplied defaults are generally good enought to start 
	  working with LIXA, but if you want to perform some hacking 
	  you might be interested
	  in activating/deactivating some optional features.
	</para>
	<section>
	  <title>Tracing</title>
	  <para>
	    The tracing feature is enabled by default: the binary objects
	    produced by the build procedure contains a lot of messages that can
	    be displayed turning on tracing at run time.
	  </para>
	  <para>
	    Removing the tracing feature can save RAM (smaller binary objects)
	    and CPU (every trace message is tested against run time 
	    configuration).
	  </para>
	  <important>
	    <para>
	      Disabling tracing seems a good way to increase the performance of
	      the software, but unfortunately without a trace it is quite 
	      impossible to debug some issues. Only rock stable software can
	      be compiled without tracing, and this is not the case of LIXA.
	    </para>
	  </important>
	  <para>
	    To disable tracing, use <option>--disable-trace</option> on
	    <command>./configure</command> command line:
	    <screen>
./configure --disable-trace
	    </screen>
	  </para>
	</section>
	<section>
	  <title>Extra debug code</title>
	  <para>
	    To enable extra debug code, that's basically some redundant check
	    code use <option>--enable-debug</option> on
	    <command>./configure</command> command line:
	    <screen>
./configure --enable-debug
	    </screen>
	    This feature could be interesting when porting the LIXA project
	    software to a different platform; for normal use, the extra
	    debugging code is useless.
	  </para>
	</section>
	<section>
	  <title>Crash simulation</title>
	  <para>
	    This feature is useful when testing the software: with crash
	    simulation the software can be tested against simulated software
	    crashes and, on some extents, power outages.
	    To enable crash simulation use <option>--enable-crash</option> on
	    <command>./configure</command> command line:
	    <screen>
./configure --enable-crash
	    </screen>
	  </para>
	</section>
      </section>
    </section>
    <section xml:id="Linking_third_party_resource_managers">
      <title>Linking third party resource managers</title>
      <para>
	To link an already tested third party resource manager you can use
	a specific option on <command>./configure</command> command; to
	link a new resource manager, you have to hack the Makefiles and
	put all you need in place or you can perform a manual link.
      </para>
      <section>
	<title>IBM DB2 Express-C 9.7<footnote><para>
	      IBM and DB2 are trademark of <trademark>IBM</trademark>
	      corporation
	</para></footnote></title>
	<para>
	  This step is useful if you want to use IBM DB2 as a Resource
	  Manager coordinated by LIXA; only version Express-C 9.7 has been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this:
	  <screen>
./configure --with-ibmdb2=/opt/ibm/db2/V9.7
	  </screen>
	  to create a loadable module containing the switch structure.
	</para>
      </section>
      <section>
	<title>Oracle XE 10.2/11.2<footnote><para>
	      Oracle is a trademark of <trademark>Oracle</trademark>
	      corporation
	</para></footnote></title>
	<para>
	  This step is useful if you want to use Oracle Database as a Resource
	  Manager coordinated by LIXA; only version XE 10.2 has been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this for Oracle 10.2
	  (32 bit architecture):
	  <screen>
./configure --with-oracle=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server
	  </screen>
	  and something like this for Oracle 11.2 (64 bit architecture):
	  <screen>
./configure --with-oracle=/u01/app/oracle/product/11.2.0/xe
	  </screen>
	  to create a loadable module containing the switch structure.
	</para>
	<para>
	  Extra configuration is needed in order to use Oracle DBMS; the
	  necessary steps are documented in the configuration chapter.
	</para>
      </section>
      <section>
	<title>PostgreSQL 8.3/8.4<footnote><para>
	      The Trademark Policy of PostgreSQL is available at this link:
	      <link xlink:href="http://wiki.postgresql.org/wiki/Trademark_Policy">
		http://wiki.postgresql.org/wiki/Trademark_Policy</link>
	</para></footnote></title>
	<para>
	  This step is useful if you want to use PostgreSQL as a Resource
	  Manager coordinated by LIXA; only versions 8.3 and 8.4 have been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this (Ubuntu):
	  <screen>
./configure --with-postgresql-include=/usr/include/postgresql --with-postgresql-lib=/usr/lib
	  </screen>
	  or something like this (CentOS)
	  <footnote><para>
	      These are the necessary packages on CentOS: 
	      postgresql-server.i686 postgresql.i686 postgresql-devel.i686
	  </para></footnote>:
	  <screen>
./configure --with-postgresql-include=/usr/include --with-postgresql-lib=/usr/lib
	  </screen>
	  to create a loadable module containing the switch structure.
	</para>
	<note><para>
	    PostgreSQL does not supply an XA standard switch structure, but
	    only some SQL non standard statements (
	    <code>PREPARE TRANSACTION, COMMIT PREPARED, ROLLBACK PREPARED</code>
	    ) that can be used to implement some XA features.
	    This is good enought to build a loadable module that can be
	    used by the LIXA transaction manager, but some XA standard features
	    - like dynamic registration - can not be implemented.
	</para></note>
      </section>
      <section>
	<title>MySQL 5.0/5.1<footnote><para>
	      MySQL is a trademark of <trademark>Oracle</trademark> 
	      corporation; details are available at this link:
	      <link xlink:href="http://www.mysql.com/about/legal/">
		http://www.mysql.com/about/legal/</link>
	  </para></footnote>
	</title>
	<para>
	  This step is useful if you want to use MySQL
	  <footnote><para>
	      These are the necessary packages on CentOS: 
	      mysql.i686 mysql-devel.i686 mysql-server.i686
	  </para></footnote>
	  as a Resource
	  Manager coordinated by LIXA; only versions 5.0 and 5.1 have been
	  tested, but there should not be relevant differences with a
	  different version. Use something like this:
	  <screen>
./configure --with-mysql
	  </screen>
	  or something like this if you need to point a specific installation:
	  <screen>
./configure --with-mysql=/path/to/mysql_config
	  </screen>
	  to create a loadable module containing the switch structure. It's
	  not necessary to specify the MySQL installation directory because
	  the <command>mysql_config</command> utility command is used.
	</para>
	<note><para>
	    MySQL does not supply an XA standard switch structure, but
	    only some SQL non standard statements (
	    <code>XA START, XA END, XA PREPARE, XA COMMIT, XA ROLLBACK, 
	      XA RECOVER</code>
	    ) that can be used to implement some XA features.
	    This is good enought to build a loadable module that can be
	    used by the LIXA transaction manager, but some XA standard features
	    - like dynamic registration - can not be implemented.
	</para></note>
	<warning><para>
	    At the time of this writing there is a
	    <link xlink:href="http://bugs.mysql.com/bug.php?id=12161">
	      seriuos documented bug (# 12161)</link>
	    related to the XA implementation of MySQL. The symptoms perceived
	    while developing LIXA are described below:
	    <orderedlist enumeration='arabic'>
	      <listitem><para>
		  a MySQL client application invokes XA START
	      </para></listitem>
	      <listitem><para>
		  it updates some data in the database
	      </para></listitem>
	      <listitem><para>
		  it invokes XA END and XA PREPARE
	      </para></listitem>
	      <listitem><para>
		  it crashes and disconnects from the MySQL server 
	      </para></listitem>
	      <listitem><para>
		  MySQL server rollbacks the transaction and there's no way to
		  see it again using XA RECOVER
	      </para></listitem>
	    </orderedlist>
	    This behavior violates the XA specification: below there is an 
	    excerpt for <function>xa_prepare</function> from man page (
	    <citation>XAspec</citation>, page 44)
	    <quote>Once this function successfully returns, 
	      the resource manager 
	      must guarantee that the transaction branch may be either 
	      committed or rolled back regardless of failures. A resource 
	      manager cannot erase its knowledge of a branch until the 
	      transaction manager calls either xa_commit() or xa_rollback () 
	      to complete the branch
	    </quote>.
	  </para>
	  <para>
	    The impact of this bug is quite severe and seriously compromises
	    the ACID properties of the resulting system (application program
	    + MySQL resource manager + LIXA transaction manager).
	  </para>
	</warning>
      </section>
      <section>
	<title>Two or more resource managers</title>
	<para>
	  If you want to use two or more resource managers, and this is a
	  typical condition for the XA usage, you must concatenate two or more
	  <parameter>--with-</parameter> parameters.
	  This command, for instance, can be used to build IBM DB2, Oracle
	  and PostgreSQL loadable modules:
	  <screen>
./configure --with-ibmdb2=/opt/ibm/db2/V9.7 \
> --with-oracle=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server \
> --with-postgresql-include=/usr/include/postgresql --with-postgresql-lib=/usr/lib \
> --with-mysql
	  </screen>
	</para>
      </section>
    </section>
    <section>
      <title>Summary</title>
      <para>
	The options illustrated above can be combined to obtain a specific
	configuration. This is an example of a IBM DB2 + Oracle enabled
	installation using an alternate installation path:
	<screen>
tar xvzf lixa-X.Y.Z.tar.gz
cd lixa-X.Y.Z
./configure --prefix=$HOME/lixa --with-ibmdb2=/opt/ibm/db2/V9.7 --with-oracle=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server
make
sudo make install
	</screen>
      </para>
    </section>
  </section>
  <section>
    <title>Checking</title>
    <para>
      Before using LIXA to manage your transactions you might be interested
      in checking the compiled software quality.
    </para>
    <para>
      LIXA has its own test suite implemented with 
      <application>Autotest</application>. A specific build configuration is
      <emphasis>necessary</emphasis> to enable all the tests:
      <screen>
tar xvzf lixa-X.Y.Z.tar.gz
cd lixa-X.Y.Z
./configure --prefix=/tmp/lixa --enable-crash
make check
      </screen>
      If the binary code produced by the compiler is fine, and your system
      is fine too, all the test <emphasis>must</emphasis> complete without
      errors.
    </para>
    <section>
      <title>Checking notes</title>
      <para>
	Some case tests, specifically MT/1.0/* and MT/2.0/*, stress the
	LIXA software with a massive multithread workload.
	Sometimes the tests fail due to the configuration of your system
	and/or your user account. There are two well known issues:
	<orderedlist enumeration='arabic'>
	  <listitem><para>
	      max files: the case tests open approximately 1000 files
	      (TCP/IP sockets); command 
	      <command>ulimit -n</command> must return the value 1024 or
	      more
	  </para></listitem>
	  <listitem><para>
	      stack size: if the stack size is too large, 32 bit platform
	      can experience addressing limit errors; reduce the default 
	      stack size to 4096 if necessary with command
	      <command>ulimit -s 4096</command>
	  </para></listitem>
	</orderedlist>
      </para>
    </section>
    <section>
      <title>Valgrind advanced checking (LIXA developers only)</title>
      <para>
	If you are interested in checking the internals of LIXA you can
	activate memory or thread check using 
	<link xlink:href="http://valgrind.org/">Valgrind</link> (it's
	assumed you already have installed Valgrind).
	If you were insterested in memory usage analysis, this is the sequence
	of commands you would use:
	<screen>
export CLIENT_CHECK_TYPE=memory
export SERVER_CHECK_TYPE=memory
make check
	</screen>
	If you were interested in thread usage analysis, this is the sequence
	of commands you would use:
	<screen>
export CLIENT_CHECK_TYPE=thread
export SERVER_CHECK_TYPE=thread
make check
	</screen>
	Check type can be set independently: you may check memory behavior of 
	the client component without checking memory behavior of the server
	component and vice versa.
	<note><para>
	    Valgrind is a very good tool, but can not understand some
	    optimizations and detects some wrong memory leaks 
	    (false positives). Nevertheless if you were suspecting there is
	    a memory leak inside LIXA, this would be a good start point to
	    discover where the issue is.
	</para></note>
      </para>
    </section>
    <section>
      <title>GDB assisted checking (LIXA developers only)</title>
      <para>
	Sometimes it may be useful to execute the case tests under the
	supervision of <command>gdb</command> instead of running it directly
	from the shell.
	Both client and server can be executed inside <command>gdb</command>
	using these commands:
	<screen>
export CLIENT_CHECK_TYPE=debug
export SERVER_CHECK_TYPE=debug
make check
	</screen>
	<note>
	  <para>
	    Running a case test inside <command>gdb</command> may change
	    the exit code checked by <command>automake</command> tests.
	    You can not use this option as a default test option,
	    but it may be useful to inspect some strange problems because
	    <command>gdb</command> produce the stack trace related to the
	    issue.
	  </para>
	</note>
      </para>
    </section>
  </section>
</chapter>
