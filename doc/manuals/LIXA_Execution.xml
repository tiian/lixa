<chapter>
  <title>Execution</title>
  <para>
    Once you have installed (see <xref linkend="Installation"/>)
    and configured (see <xref linkend="Configuration"/>)
    your environment, you are ready to run LIXA.
    <note><para>
	In this chapter it is assumed you installed the LIXA project
	software at the default path <filename>/opt/lixa</filename>; if you
	installed the software at a different path, you'd need to adjust
	the shown commands consequently.
    </para></note>
  </para>
  <section>
    <title>Starting the state server</title>
    <para>
      The first step you must perform is starting the
      <emphasis>state server</emphasis>; it's name is 
      <command>lixad</command> (LIXA daemon). The command
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/sbin/lixad --help
Usage:
  lixad [OPTION...] - LIXA server

Help Options:
  -?, --help             Show help options

Application Options:
  -d, --daemon           Run the process as a daemon
  -m, --maintenance      Start the server in maintenance mode only
  -u, --dump             Dump the content of status files using order [ufs] (u=used, f=free, s=sequential)
  -c, --config-file      Specify an alternate configuration file
  -t, --trace-file       Specify trace file name
  -l, --clean-failed     Clean recovery failed transactions at start-up
  -v, --version          Print package info and exit
    </screen>
    <para>
      displays the available command line options. 
    </para>
    <para>
      If you tried to start the state server without the appropriate 
      privileges it should happen something like this:
      <screen>
tiian@ubuntu:~$ /opt/lixa/sbin/lixad
tiian@ubuntu:~$ sudo su -c "tail /var/log/daemon.log"
[...]
Mar 31 22:53:10 ubuntu lixad[5891]: LXD000N this process is starting a new LIXA server (lixa package version is 0.5.29)
Mar 31 22:53:10 ubuntu lixad[5891]: LXD015W unable to open pid file '/opt/lixa/var/run.pid'
Mar 31 22:53:10 ubuntu lixad[5891]: LXD004E error (ERROR: 'open' function returned an error condition) while starting manager(s), premature exit
      </screen>
      because the process is not able to update the content of the
      <filename>/opt/lixa/var/</filename> directory; use the administrative
      user and try again:
      <screen>
tiian@ubuntu:~$ sudo su - lixa
[sudo] password for tiian:
lixa@ubuntu:~$ /opt/lixa/sbin/lixad
      </screen>
      Running the command
      without options blocks your shell and runs the state server in
      foreground; this is not terribly useful but it may help you when
      you are debugging some issue. Use these commands, from a different
      terminal, to retrieve the PID
      (process id) and to stop the state server:
    </para>
    <screen>
tiian@ubuntu:~$ sudo su - lixa
lixa@ubuntu:~$ ps -ef|grep lixad|grep -v grep
lixa      5909  5906  0 22:56 pts/1    00:00:00 /opt/lixa/sbin/lixad
lixa@ubuntu:~$ kill 5909
lixa@ubuntu:~$ exit
logout
    </screen>
    <para>
      Alternatively you can strike ^C to break the foreground execution.
      A foreground execution is generally more useful if some 
      tracing is enabled:
    </para>
    <screen>
lixa@ubuntu:~$ export LIXA_TRACE_MASK=0x00000001
lixa@ubuntu:~$ /opt/lixa/sbin/lixad 
2011-03-31 22:58:32.244333 [5920/3073509104] lixad/main: starting
2011-03-31 22:58:34.864062 [5920/3073509104] lixad/main: exiting
    </screen>
    <section xml:id="Background_execution">
      <title>Background (<emphasis>daemon</emphasis>) execution</title>
      <para>
	The most useful command option is <option>--daemon</option>: it
	allows you to run the state server as a <emphasis>daemon</emphasis>
	detached from any terminal:
      </para>
      <screen>
lixa@ubuntu:~$ /opt/lixa/sbin/lixad --daemon
lixa@ubuntu:~$ ps -ef|grep lixad|grep -v grep
lixa      5926     1  0 22:59 ?        00:00:00 /opt/lixa/sbin/lixad --daemon
      </screen>
      <para>
	when running the state server as a daemon you need to perform some 
	special tasks to understand the process is up &amp; running.
	With <command>ps -ef|grep lixad|grep -v grep</command> you can
	verify the process is running.
	The state server registers its PID in a special file:
	<filename>/opt/lixa/var/run.pid</filename>; if the content of the file
	is different than the result retrieved with the <command>grep</command>
	command, something is not running well.
      </para>
      <screen>
lixa@ubuntu:~$ cat /opt/lixa/var/run.pid 
5926
      </screen>
      <para>
	To stop a daemonized state server you must use the
	<command>kill</command> command as shown below:
      </para>
      <screen>
lixa@ubuntu:~$ kill $(cat /opt/lixa/var/run.pid)
lixa@ubuntu:~$ ps -ef|grep lixad|grep -v grep
      </screen>
      <para>
	The <command>grep</command> command returns an empty result because
	the state server is not running. The state server publishes some
	messages using the <function>syslog</function> facility; Ubuntu 8.04
	sends default messages to the file
	<filename>/var/log/daemon.log</filename>; below there are some standard
	messages:
      </para>
      <screen>
tiian@ubuntu:~$ sudo su -c "cat /var/log/daemon.log|grep lixad|grep 5926"
Mar 31 22:59:11 ubuntu lixad[5926]: LXD014N LIXA server entered daemon status
Mar 31 23:00:48 ubuntu lixad[5926]: LXD019N received signal 15, server immediate shutdown in progress...
Mar 31 23:00:48 ubuntu lixad[5926]: LXD006N server terminated activities
      </screen>
    </section>
    <section xml:id="Maintenance_mode_execution">
      <title>Maintenance mode execution</title>
      <para>
	The <option>--maintenance</option> option allows you to start
	the state server to perform some special actions; only special
	clients can connect to the server when the server is operating
	in <emphasis>maintenance</emphasis> mode: customer developed
	Application Programs can not perform distributed transactions.
	A special client is <command>lixar</command>: a command line
	utility designed for recovery purposes
	(see <xref linkend="Recovery"/> for more information).
      </para>
      <warning>
	A state server that's operating in maintenance mode is not
	serving the LIXA infrastructure and Distributed Transaction
	Processing can not be performed: use this option 
	<emphasis>only</emphasis> if you really need it.
      </warning>
      <para>
	There's no way to turn a server operating in maintenance mode in
	a server operating in standard mode: you have to stop and start
	the LIXA state server again.
      </para>
    </section>
    <section>
      <title>Dump execution</title>
      <para>
	Use <option>--dump</option> option to get a dump of the content
	of the state currently persisted in the status files. The option
	must specify one or more flags:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	      "s": dump all the blocks, in sequential order
	  </para></listitem>
	  <listitem><para>
	      "u": dump all the <emphasis>used</emphasis> blocks, 
	      travelling the used block chain
	  </para></listitem>
	  <listitem><para>
	      "f": dump all the <emphasis>free</emphasis> blocks, 
	      travelling the free block chain
	  </para></listitem>
	</itemizedlist>
	You may specify two or more flags on the same command line:
	the output will duplicate some blocks.
      </para>
      <para>
	The example below shows the output produced when dumping the
	content of a single status file with no current transactions
	in progress (the free block chain contains all the blocks):
      </para>
      <screen>
tiian@ubuntu:~$ sudo su - lixa
lixa@ubuntu:~$ /opt/lixa/sbin/lixad --dump f
========================================================================
First file ('/opt/lixa/var/lixad_status1_1') will be dumped
Magic number is: 24848 (24848)
Level is: 1 (1)
Last sync timestamp: 2011-03-31T23:00:48.829787+0200
Size: 10 blocks
Used block chain starts at: 0 (empty chain)
Free block chain starts at: 1
Dumping records following physical order: 0
Dumping records following free block chain: 1
Dumping records following used block chain: 0
------------------------------------------------------------------------
Block: 1, next block in chain: 2
Block type: unknown (0)
------------------------------------------------------------------------
Block: 2, next block in chain: 3
Block type: unknown (0)
------------------------------------------------------------------------
Block: 3, next block in chain: 4
Block type: unknown (0)
------------------------------------------------------------------------
Block: 4, next block in chain: 5
Block type: unknown (0)
------------------------------------------------------------------------
Block: 5, next block in chain: 6
Block type: unknown (0)
------------------------------------------------------------------------
Block: 6, next block in chain: 7
Block type: unknown (0)
------------------------------------------------------------------------
Block: 7, next block in chain: 8
Block type: unknown (0)
------------------------------------------------------------------------
Block: 8, next block in chain: 9
Block type: unknown (0)
------------------------------------------------------------------------
Block: 9, next block in chain: 0
Block type: unknown (0)
      </screen>
      <note>
	The dump can be performed while the state server is running:
	the dump will output the content of the currently sinchronized
	status file and you will not be able to see the last updates.
	Dumps performed at different times may produce different
	results if there is a running state server.
      </note>
    </section>
    <section>
      <title>Additional options</title>
      <para>
	Some additional options are available: they don't radically change the 
	state server behavior, but supply some features.
      </para>
      <section>
	<title>Specifying a different configuration file</title>
	<para>
	  With option <option>--config-file</option> you can specify a
	  non default configuration file; this option can be useful if you
	  want to test a different configuration without damaging your
	  production config file. It can be used if you want to
	  run different instances of the state server in the same
	  operating system image, too.
	</para>
	<para>
	  Below there is a sample invocation:
	</para>
	<screen>
lixa@ubuntu:~$ /opt/lixa/sbin/lixad --config-file /tmp/lixad_conf.xml
	</screen>
      </section>
      <section>
	<title>Specifying a trace file</title>
	<para>
	  With option <option>--trace-file</option> you can specify a
	  different trace file instead of the default 
	  <emphasis>stderr</emphasis>
	  process stream; this option is especially useful when you are
	  running the state server as a daemon (see
	  <xref linkend="Background_execution"/>).
	  Below there is a sample invocation:
	</para>
	<screen>
lixa@ubuntu:~$ export LIXA_TRACE_MASK=0x01
lixa@ubuntu:~$ /opt/lixa/sbin/lixad --daemon --trace-file /tmp/lixad.trace
lixa@ubuntu:~$ ls -la /tmp/lixad.trace
-rw-r--r-- 1 lixa lixa 349 2011-03-18 16:14 /tmp/lixad.trace
	</screen>
	<para>
	  Take a look to
	  <xref linkend="Tracing"/>
	  for additional details.
	</para>
      </section>
      <section>
	<title>Clean-up recovery failed transactions</title>
	<para>
	  Use option <option>--clean-failed</option> to clean-up the
	  state of the transactions that LIXA was not able to recover
	  automatically: this option is useful to remove useless information
	  from the state file, but you must pay attention to these
	  <emphasis>warnings</emphasis>.
	  <itemizedlist mark='bullet'>
	    <listitem><para>
		If your LIXA installation worked properly, you would not
		need to clean-up the state file.
	    </para></listitem>
	    <listitem><para>
		Removing recovery failed transactions cleans-up the history
		of your issues: you should understand why your state file
		is accumulating recovery failed transaction records
		need to clean-up the state file.
	    </para></listitem>
	  </itemizedlist>
	  Don't use this option without a deep review of the content of
	  <xref linkend="Recovery"/>.	  
	</para>
      </section>
      <section>
	<title>Retrieving software version</title>
	<para>
	  Use option <option>--version</option> to retrieve the 
	  version of the installed software as shown below:
	</para>
	<screen>
lixa@ubuntu:~$ /opt/lixa/sbin/lixad --version
LIXA: a Libre XA implementation
Copyright (c) 2009-2012, Christian Ferrari; all rights reserved.
License: GPL (GNU Public License) version 2
Package name: lixa; package version: 0.5.29
Access http://sourceforge.net/projects/lixa/ to report bugs and partecipate to the project
	</screen>
	<para>
	  The <command>lixad</command> command does not start a real state 
	  server: it prints version information on 
	  <emphasis>stdout</emphasis> and exits.
	</para>
      </section>
    </section>
  </section>
  <section>
    <title>Starting the test utility</title>
    <para>
      The LIXA project supplies a test utility you can use to 
      perform basic tests on your LIXA environment. 
      The command is named <command>lixat</command> and is
      located in the <filename>bin</filename> directory; use 
      <option>--help</option> option to retrieve the list of 
      the available options:
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixat --help
Usage:
  lixat [OPTION...] - LIXA test utility

Help Options:
  -?, --help         Show help options

Application Options:
  -c, --commit       Perform a commit transaction
  -r, --rollback     Perform a rollback transaction
  -v, --version      Print package info and exit
    </screen>
    <important><para>
	The LIXA test utility is a LIXA client program and it 
	does <emphasis>not</emphasis> need
	any special authorization to run because it does not need to write
	the content of <filename>/opt/lixa/var/</filename> directory.
    </para></important>
    <para>
      The <command>lixat</command> command does nothing useful except trying 
      to contact the state server and optionally perform a commit and/or 
      rollback dummy distributed transaction.
      Below there's the output of a trivial execution: the program connects
      to the state server, performs tx_open() against all the configured 
      resource managers and performs tx_close() against all the configured
      resource managers.
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixat
tx_open(): 0
tx_close(): 0
    </screen>
    <para>
      With <option>--commit</option> option the test program performs a
      dummy commit against all the configured resource managers too:
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixat --commit
tx_open(): 0
tx_begin(): 0
tx_info(): 1
        xid/formatID.gtrid.bqual = 4c495841.080f2b63a3804bfbbdd3347ca7607ba3.ef954655163edff9fee662b12f881c97
tx_commit(): 0
tx_close(): 0
    </screen>
    <para>
      A <emphasis>dummy commit</emphasis> does not damage your data because
      the program does not contains instructions that modify the content
      of the resource managers. A dummy rollback can be performed as well:
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixat --rollback
tx_open(): 0
tx_begin(): 0
tx_info(): 1
        xid/formatID.gtrid.bqual = 4c495841.c651f0f2efb249bd92f3f2b5a76741a5.ef954655163edff9fee6-62b12f881c97
tx_rollback(): 0
tx_close(): 0
    </screen>
    <para>
      The test utility can be used to:
      <itemizedlist mark='bullet'>
	<listitem><para>
	    check the state server is up and running
	    <screen>
	      tiian@ubuntu:~$ /opt/lixa/bin/lixat
	      tx_open(): -7
	      tiian@ubuntu:~$ echo $?
	      1
	    </screen>
	    (the state server is not running)
	</para></listitem>
	<listitem><para>
	    check the content of <filename>etc/lixac_conf.xml</filename>
	    is ok
	    <screen>
	      tiian@ubuntu:~$ export LIXA_PROFILE=XXXX
	      tiian@ubuntu:~$ /opt/lixa/bin/lixat
	      tx_open(): -7
	      tiian@ubuntu:~$ echo $?
	      1
	    </screen>
	    (the profile <quote>XXXX</quote> does not exist)
	</para></listitem>
	<listitem><para>
	    try different profiles described inside
	    <filename>etc/lixac_conf.xml</filename>
	</para></listitem>
	<listitem><para>
	    ...
	</para></listitem>
      </itemizedlist>
      You can <emphasis>safely</emphasis> experiment by yourself using 
      <command>lixat</command> command.
    </para>
  </section>
  <section>
    <title>Starting the recovery utility</title>
    <para>
      The LIXA project supplies a recovery utility you must use to 
      perform some special tasks related to distributed transaction
      recovery. The command is named <command>lixar</command> and is
      located in the <filename>bin</filename> directory; use 
      <option>--help</option> option to retrieve the list of 
      the available options:
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixar --help
Usage:
  lixar [OPTION...] - LIXA recovery utility

Help Options:
  -?, --help                      Show help options

Application Options:
  -p, --print                     Print a report of all the prepared and in-doubt transactions compatible with current configuration and profile
  -x, --xid                       Select specified transaction for rollback/commit
  -X, --xid-file                  Select specified file as a list of transaction to rollback/commit
  -c, --commit                    Commit prepared &amp; in-doubt transactions
  -r, --rollback                  Rollback prepared &amp; in-doubt transactions
  -v, --version                   Print package info and exit
  -b, --bypass-bqual-check        Bypass xid branch qualifier check
  -B, --bypass-formatid-check     Bypass xid format id check
  -e, --use-tmendrscan-flag       Use TMENDRSCAN flag for last xa_recover call
    </screen>
    <important><para>
	The LIXA test utility is a LIXA client program and it does 
	<emphasis>not</emphasis> need
	any special authorization to run because it does not need to write
	the content of <filename>/opt/lixa/var/</filename> directory.
    </para></important>
    <para>
      The usage of the <command>lixar</command> command is strictly related
      to <emphasis>recovery</emphasis> tasks and is explained in
      <xref linkend="Recovery"/>.
    </para>
    <note>
      All the option except <option>--commit</option> and 
      <option>--rollback</option> are <emphasis>safe</emphasis>; only
      specifying <quote>commit</quote> and <quote>rollback</quote> can
      damage the state of the data managed by your resource managers.
    </note>
    <para>
      You must start the state server before you can start 
      <command>lixar</command>; if you don't start the state server, you
      will get something like shown below:
    </para>
    <screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixar
Execution options:
        - print report = no
        - transaction(s) will be committed = no
        - transaction(s) will be rolled back = no
        - bypass xid branch qualifier check = no
        - bypass xid format id check = no
        - use TMENDRSCAN flag for last xa_recover call = no

tx_open() returned TX_FAIL: unable to proceed
    </screen>
  </section>
</chapter>
