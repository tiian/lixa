<chapter xml:id="Recovery">
  <title>Recovery</title> 
  <para>
    This chapter explains some advanced concepts that the LIXA system
    administrator should know to solve some complex issues the XA 
    technology could generate.
    LIXA technology provide two type of recovery:
    <itemizedlist mark="bullet">
      <listitem><para>
	  <emphasis>Automatic Recovery</emphasis>: 
	  it happens silently and rolls back or commits
	  the transactions that crashed before a consistent point had been
	  reached
      </para></listitem>
      <listitem><para>
	  <emphasis>Manual Recovery</emphasis>:
	  it is invoked by <command>lixar</command> utility
	  to solve the transactions that cannot be automatically recovered
      </para></listitem>
    </itemizedlist>	
  </para>
  <section>
    <title>Automatic (smooth) recovery</title>
    <section>
      <title>Scenario 1: autonoumos rollback</title>
      <para>
	If your environment is configured and runs as designed, when an
	Application Program fails an automatic recovery operation fix the
	problem as soon as possible. Below there is a first trivial
	scenarios:
	<itemizedlist mark="bullet">
	  <listitem>
	    <para>the Application Program crashes before it reaches the
	      <function>xa_prepare()</function> function
	      (called by <function>tx_commit()</function>)
	    </para>
	  </listitem>
	  <listitem>
	    <para>the Resource Managers 
	      <emphasis>autonoumosly</emphasis> roll back the
	      work in progress and the environment is cleaned up</para>
	  </listitem>
	</itemizedlist>	
	the distributed transaction started but it did not initiated the
	two phase commit protocol: there is no relevant difference between
	this scenario and a single Resource Manager (one phase commit)
	scenario. The LIXA Transaction Manager does <emphasis>not</emphasis>
	manage a recovery phase.
	<figure xml:id="recover1">
	  <title>The Application Program crashes before <function>xa_prepare()</function></title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Recovery_01.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
      </para>
    </section>
    <section>
      <title>Scenario 2: a second Application Program triggers the recovery action</title>
      <para>
	The following scenario is slightly different:
	<itemizedlist mark="bullet">
	  <listitem>
	    <para>the Application Program crashes after it has passed the
	      <function>xa_prepare()</function> function but before it
	      reaches the <function>xa_commit()</function> function
	    </para>
	  </listitem>
	  <listitem>
	    <para>the Resource Managers keep the <emphasis>prepared</emphasis>
	    transaction <quote>in flight</quote> until the Transaction
	    Manager decides the proper recovery action</para>
	  </listitem>
	  <listitem>
	    <para>an <quote>equivalent</quote> Application Program starts 
	      and activates
	      the LIXA Transaction Manager with <function>tx_open()</function>
	    </para>
	  </listitem>
	  <listitem>
	    <para>the LIXA Transaction Manager discovers there is a
	      <emphasis>prepared</emphasis> transaction and establishes that
	      it must commit the transaction
	    </para>
	  </listitem>
	  <listitem>
	    <para>the second Application Program implicitly and inconsciously
	    started the recovery process of a previously crashed
	    Application Program</para>
	  </listitem>
	</itemizedlist>	
	<figure xml:id="recover2">
	  <title>The Application Program crashes after <function>xa_prepare()</function></title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="LIXA_Recovery_02.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The above pattern is the result of the LIXA design: the Transaction
	Manager is not an active component, but it's a passive one and
	is embedded in the Application Program when it links the
	<systemitem class="library">lixac</systemitem> library 
	and activates it with the
	<function>tx_open()</function> function.
      </para>
      <note><para>
	  Depending on the crash time: slightly before the 
	  <emphasis>prepare phase</emphasis>,
	  in the middle of the <emphasis>prepare phase</emphasis>,
	  after the completion of the <emphasis>prepare phase</emphasis>, 
	  the LIXA Transaction Manager chooses a different recovery 
	  operation between
	  <function>xa_commit()</function> and 
	  <function>xa_rollback()</function>.
      </para></note>
    </section>
  </section>
  <section xml:id="Automatic_recovery_concepts">
    <title>Automatic recovery concepts</title>
    <para>
      The above paragraphs explain what's happen when automatic recovery
      starts and completes (rolls back or commits) the transaction marked
      as <quote>recovery pending</quote>.
    </para>
    <para>
      <foreignphrase>
	An <quote>equivalent</quote> Application Program starts and activates
	the LIXA Transaction Manager with <function>tx_open()</function>.
	The LIXA Transaction Manager autonoumosly coordinates the transaction
	completion and the Application Program is not aware of this
	<emphasis>under the covers</emphasis> operation.
      </foreignphrase>
    </para>
    <section>
      <title>Application Program equivalence</title>
      <para>
	From the LIXA Transaction Manager point of view,
	two Application Programs are
	equivalent when they are associated to the same 
	<emphasis>job</emphasis>.
      </para>
      <para>
	The job associated to an Application Program can be:
	<itemizedlist mark="bullet">
	  <listitem>
	    <para>
	      the content of the environment variable 
	      <varname>LIXA_JOB</varname> if it is set
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      a string computed in this way if the environment variable 
	      <varname>LIXA_JOB</varname> is <emphasis>not</emphasis> set:
	      <para>
		<varname>branch qualifier</varname> + 
		<quote>/</quote> + 
		<systemitem class="ipaddress">IP address</systemitem>
	      </para>
	      where <varname>branch qualifier</varname> is computed as:
	      <para>
		<function>MD5</function>(<filename>lixac_conf.xml</filename> + 
		$(<varname>LIXA_PROFILE</varname>) +
		<function>gethostid()</function>)
	      </para>
	    </para>
	  </listitem>
	</itemizedlist>
	An example of <varname>branch qualifier</varname> is
	<quote>0fc29445b1d4c3f4ed6be2fea20f918b</quote>, while an example of
	job automatically associated to an Application Program is
	<quote>0fc29445b1d4c3f4ed6be2fea20f918b/127.0.0.1</quote>
      </para>
      <note><para>
	  If you don't set the environment variable 
	  <varname>LIXA_JOB</varname> all the Application Programs that
	  meet this requirements:
	  <itemizedlist mark="bullet">
	    <listitem><para>
		they use a config file (<filename>lixac_conf.xml</filename>)
		with the same content
	    </para></listitem>
	    <listitem><para>
		they use a <varname>LIXA_PROFILE</varname> environment variable
		with the same content
	    </para></listitem>
	    <listitem><para>
		they run in a host that returns the same value to
		<function>gethostid()</function> function		
	    </para></listitem>
	    <listitem><para>
		they are calling the LIXA state server from the same 
		IP address	
	    </para></listitem>
	  </itemizedlist>
	  <emphasis>are associated to the same job</emphasis>.
      </para></note>
      <para>
	To pick-up the job associated to an Application Program you can
	activate the trace using the bit associated to the label
	<quote>LIXA_TRACE_MOD_CLIENT_CONFIG</quote>. Take a look to
	<xref linkend="Tracing_modules"/> for more information.
	This is an excerpt from the trace:
	<screen>
[...]	  
2011-12-03 17:00:59.746036 [6021/1078050640] client_config_job
2011-12-03 17:00:59.746073 [6021/1078050640] client_config_job: acquiring exclusive mutex
2011-12-03 17:00:59.746120 [6021/1078050640] client_config_job: 'LIXA_JOB' environment variable not found, computing job string...
2011-12-03 17:00:59.746175 [6021/1078050640] lixa_job_set_source_ip
2011-12-03 17:00:59.746275 [6021/1078050640] lixa_job_set_source_ip/excp=1/ret_cod=0/errno=0
2011-12-03 17:00:59.746339 [6021/1078050640] client_config_job: job value for this process is '0fc29445b1d4c3f4ed6be2fea20f918b/127.0.0.1      '
2011-12-03 17:00:59.746379 [6021/1078050640] client_config_job: releasing exclusive mutex
2011-12-03 17:00:59.746514 [6021/1078050640] client_config_job/excp=3/ret_cod=0/errno=0
[...]
	</screen>
	<important><para>
	    Setting the environment variable <varname>LIXA_JOB</varname>
	    allows you to associate any Application Program to a custom
	    user defined job: this may be interesting if you are using a
	    workload balanced environment, this may be dangerous if you
	    associate Application Programs using a different set of
	    Resource Managers to the same job.
	</para></important>
      </para>
      <para>
	If you don't set <varname>LIXA_JOB</varname> environment variable,
	the default behavior should be strong enought to avoid issues when
	LIXA is used under <quote>standard</quote> conditions.
      </para>
    </section>
    <section>
      <title>Forcing automatic recovery</title>
      <para>
	Sometimes you need to force the automatic recovery to happen because
	the crashed Applicaton Program is a <quote>one shot</quote> program
	and you can not execute it a second time due to some functional
	constrain.
      </para>
      <para>
	Any application program meeting the requirements described above can
	be used, <command>lixat</command> utility command too. Try the
	example below: @@@
      </para>
    </section>
    @@@ how to programmatically pick-up the branch qualifier?! @@@
  </section>
</chapter>
