<chapter>
  <title>In Depth</title>
  <para>
    This chapter explains some internal details you can be interested in
    when you are dealing with complex environments.
  </para>
  <section>
    <title>Logging</title>
    <para>
      The LIXA project software uses standard UNIX logging 
      <function>syslog()</function> function but it does not
      set a specific <parameter class="function">facility</parameter>
      using the <function>openlog()</function> function.
      The final destination of the log messages depends on the configuration
      of the standard UNIX logging; Ubuntu 8.04, for examples, sends the
      messages to file <filename>/var/log/daemon.log</filename>. This should
      be in accordance with the content of the <function>syslog</function>
      man page <quote>LOG_DAEMON
        system daemons without separate facility value</quote>.
    </para>
    <para>
      The messages produced by the LIXA project software are documented in
      the file <filename>src/common/lixa_syslog.h</filename>
    </para>
    <para>
      The messages produced by the LIXA project software use two different
      prefixes: <quote>LXC</quote> for
      <systemitem class="library">lixac</systemitem> (client library) and
      <quote>LXD</quote> for
      <command>lixad</command> (state server).
      Try the following example:
      <screen>
tiian@ubuntu:~$ ps -ef|grep lixad|grep -v grep
tiian@ubuntu:~$ /opt/lixa/bin/lixat
tx_open(): -7	
      </screen>
      inspecting the log file <filename>/var/log/daemon.log</filename>
      you should find out something like this:
      <screen>
Dec  4 18:16:10 ubuntu lixat[6538]: LXC000I this process is starting a new LIXA transaction manager (lixa package version is 0.5.36)
Dec  4 18:16:10 ubuntu lixat[6538]: LXC002E unable to connect to LIXA server at address 127.0.0.1, port 2345
      </screen>
      the <command>lixat</command> command is running as expected because
      the state server is not active.
      To see the messages produced by the state server you can try the
      following commands:
      <screen>
tiian@ubuntu:~$ sudo su - lixa
lixa@ubuntu:~$ /opt/lixa/sbin/lixad -d
lixa@ubuntu:~$ pkill lixad
lixa@ubuntu:~$ exit
logout
      </screen>
      inspecting the log file <filename>/var/log/daemon.log</filename>
      you should find out something like this:
      <screen>
Dec  4 18:22:46 ubuntu lixad[6694]: LXD000N this process is starting a new LIXA server (lixa package version is 0.5.36)
Dec  4 18:22:46 ubuntu lixad[6697]: LXD014N LIXA server entered daemon status
Dec  4 18:22:49 ubuntu lixad[6697]: LXD019N received signal 15, server immediate shutdown in progress...
Dec  4 18:22:49 ubuntu lixad[6697]: LXD006N server terminated activities
      </screen>
      The log messages are differentiated by 
      <parameter class="function">priority</parameter>; there is a direct
      link between the letter in the seventh position and the severity of
      the message:
      <itemizedlist mark="bullet">
	<listitem>
	  <para><emphasis>D</emphasis> : <constant>LOG_DEBUG</constant></para>
	</listitem>
	<listitem>
	  <para><emphasis>I</emphasis> : <constant>LOG_INFO</constant></para>
	</listitem>
	<listitem>
	  <para><emphasis>N</emphasis> : <constant>LOG_NOTICE</constant></para>
	</listitem>
	<listitem>
	  <para><emphasis>W</emphasis> : <constant>LOG_WARNING</constant></para>
	</listitem>
	<listitem>
	  <para><emphasis>E</emphasis> : <constant>LOG_ERR</constant></para>
	</listitem>
	<listitem>
	  <para><emphasis>C</emphasis> : <constant>LOG_CRIT</constant></para>
	</listitem>
      </itemizedlist>
      If LIXA software was logging too much in your production environment
      you can configure the system log facility
      (<filename>/etc/syslog.conf</filename>) to filter some messages, but
      this tuning operation should not be necessary because the LIXA software
      does not use the system log facility as a debugging tool: look at
      <xref linkend="Tracing"/> to discover how debug messages are managed.
    </para>
  </section>
  <section xml:id="Tracing">
    <title>Tracing</title>
    <para>
      The LIXA project can produce a lot of traces when the software is 
      running; the tracing functions are included in the code by default but
      you can disable them when you configure the software before the build 
      phase:
      <screen>
	./configure --disable-trace
	make
	...
      </screen>
      <warning><para>
	  Excluding tracing functions can reduce CPU and memory usage when
	  the software is running, but you should disable tracing 
	  <emphasis>only if you are really sure about it:
	  </emphasis>without tracing you have no instruments
	  to understand what's happening inside LIXA code when it's running.
      </para></warning>
      In the case you didn't disable the tracing feature at build time (see
      above), you could activate the message production when you need it.
    </para>
    <section xml:id="Tracing_modules">
      <title>Tracing modules</title>
      <para>
	The trace messages produced by LIXA code are divided by 
	<emphasis>modules</emphasis>: you can activate the trace messages for
	one or more modules. There is not a concept of <quote>severity</quote>
	for the trace messages: if you activate the trace for a module, it
	will print all the trace messages of that module.
      </para>
      <para>
	The table below shows how the LIXA software is partitioned in modules:
	<table xml:id="ex.calstable" frame="all">
	  <title>Tracing module flags</title>
	  <tgroup cols='4' align='left' colsep='1' rowsep='1'>
	    <thead>
	      <row>
		<entry align="center">Module Trace Label</entry>
		<entry align="center">Hex Flag</entry>
		<entry align="center">Component</entry>
		<entry align="center">Function</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER</entry>
		<entry>0x00000001</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>main program</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_CONFIG</entry>
		<entry>0x00000002</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>configuration: config file parsing and environment 
		  variable detection</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_LISTENER</entry>
		<entry>0x00000004</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>network listener and signal handler</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_MANAGER</entry>
		<entry>0x00000008</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>session client manager, thread manager, 
		  network I/O manager</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_STATUS</entry>
		<entry>0x00000010</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>persistent state</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_XA</entry>
		<entry>0x00000040</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>XA logic called by client</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_REPLY</entry>
		<entry>0x00000080</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>replies to client messages</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_SERVER_RECOVERY</entry>
		<entry>0x00000100</entry>
		<entry><command>lixad</command> (state server)</entry>
		<entry>logic necessary to answer the client recovery 
		  calls</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_TX</entry>
		<entry>0x00001000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>transaction demarcation (TX) functions:
		  <function>tx_open()</function>,
		  <function>tx_begin()</function>, ...</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_XA</entry>
		<entry>0x00002000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>XA function wrapper:
		  <function>xa_open()</function>,
		  <function>xa_start()</function>, 
		  <function>ax_reg()</function>, ...</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_CONN</entry>
		<entry>0x00004000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>function necessary to connect to the state server 
		  (<command>lixad</command>)</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_CONFIG</entry>
		<entry>0x00008000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>configuration: config file parsing and environment 
		  variable detection</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_XA_SWITCH</entry>
		<entry>0x00010000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>XA switch file implementation of the dummy resource
		managers provided by LIXA and of the XA wrappers for the
		resource managers without a standard switch file</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_STATUS</entry>
		<entry>0x00020000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>client status management</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_CLIENT_RECOVERY</entry>
		<entry>0x00040000</entry>
		<entry><systemitem class="library">lixac</systemitem>
		  (client library)</entry>
		<entry>warm and cold recovery of the transaction(s)</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_COMMON_CONFIG</entry>
		<entry>0x01000000</entry>
		<entry><systemitem class="library">lixab</systemitem>
		  (common base library)</entry>
		<entry>configuration stuff common to all components</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_COMMON_XML_MSG</entry>
		<entry>0x02000000</entry>
		<entry><systemitem class="library">lixab</systemitem>
		  (common base library)</entry>
		<entry>functions related to XML messages serialization and
		deserialization</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_COMMON_STATUS</entry>
		<entry>0x04000000</entry>
		<entry><systemitem class="library">lixab</systemitem>
		  (common base library)</entry>
		<entry>convenience functions used to manage the status on
		client and server side</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_COMMON_UTILS</entry>
		<entry>0x08000000</entry>
		<entry><systemitem class="library">lixab</systemitem>
		  (common base library)</entry>
		<entry>utility functions used by all the components</entry>
	      </row>
	      <row>
		<entry>LIXA_TRACE_MOD_COMMON_XID</entry>
		<entry>0x10000000</entry>
		<entry><systemitem class="library">lixab</systemitem>
		  (common base library)</entry>
		<entry>functions specialized for XID (transaction ID)
		management</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	You can trace any module combination creating any
	<emphasis>trace mask</emphasis> ORing the bits; for example:
	<itemizedlist mark="bullet">
	  <listitem>
	    <para>0x00000003 will produce all the messages of
	    <constant>LIXA_TRACE_MOD_SERVER</constant> and
	    <constant>LIXA_TRACE_MOD_SERVER_CONFIG</constant></para>
	  </listitem>
	  <listitem>
	    <para>0xffffffff will produce all the messages</para>
	  </listitem>
	  <listitem>
	    <para>0x00000000 will disable all the messages</para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    <section>
      <title>Improve troubleshooting with trace</title>
      <para>
	The trace can be activated setting the environment variable
	<varname>LIXA_TRACE_MASK</varname> before starting the execution of
	the traced program. Try the following example...
      </para>
      <para>
	Check the state server is not active:
	<screen>
tiian@ubuntu:~$ ps -ef|grep lixad|grep -v grep
	</screen>
	try to execute <command>lixat</command>, the LIXA test program:
	<screen>
tiian@ubuntu:~$ /opt/lixa/bin/lixat
tx_open(): -7
	</screen>
	it gives us few information (<constant>TX_FAIL = -7</constant>): from
	<filename>/opt/lixa/include/tx.h</filename> we can retrieve the
	meaning: <quote>fatal error</quote>... Not so much...
	We could try to trace the <quote>CLIENT TX</quote> module:
	<screen>
tiian@ubuntu:~$ export LIXA_TRACE_MASK=0x00001000
tiian@ubuntu:~$ /opt/lixa/bin/lixat
2011-12-04 12:19:49.235007 [8899/3073612464] lixa_tx_open
2011-12-04 12:19:49.241544 [8899/3073612464] lixa_tx_open/TX_*=-7/excp=5/ret_cod=-138/errno=111
tx_open(): -7
	</screen>
	<quote>ret_cod=-138</quote> can be inspected inside
	<filename>src/common/lixa_errors.h</filename>:
	<screen>
[...]
/**
 * "connect" function error
 */
#define LIXA_RC_CONNECT_ERROR                  -138
[...]
	</screen>
	now we know the errors happens using <function>connect()</function>
	function; <quote>errno=111</quote> can be inspected inside
	<filename>/usr/include/asm-generic/errno.h</filename>:
	<screen>
[...]
#define ECONNREFUSED    111     /* Connection refused */
[...]
	</screen>
	The error happens because the LIXA state server 
	(<command>lixad</command>) is not running, but we can improve our
	diagnosis with a more detailed tracing adding
	<quote>CLIENT CONN</quote> module:
	<screen>
tiian@ubuntu:~$ export LIXA_TRACE_MASK=0x00005000
tiian@ubuntu:~$ /opt/lixa/bin/lixat
2011-12-04 17:00:49.447866 [4514/3074067120] lixa_tx_open
2011-12-04 17:00:49.452624 [4514/3074067120] client_connect
2011-12-04 17:00:49.452678 [4514/3074067120] client_connect: connecting socket 4 to server '127.0.0.1' port 2345
2011-12-04 17:00:49.454033 [4514/3074067120] client_connect/excp=2/ret_cod=-138/errno=111
2011-12-04 17:00:49.454872 [4514/3074067120] lixa_tx_open/TX_*=-7/excp=5/ret_cod=-138/errno=111
tx_open(): -7
	</screen>
	the client is not able to contact the state server that is configured
	to listen port <systemitem class="ipaddress">2345</systemitem> 
	at address 
	<systemitem class="ipaddress">127.0.0.1</systemitem>
      </para>
    </section>
    <section>
      <title>Activating trace for <command>lixad</command> in 
	<emphasis>daemon</emphasis> mode</title>
      <para>
	When running the state server (<command>lixad</command>) in
	<emphasis>daemon</emphasis>
	mode, you must explicitly ask <command>lixad</command> to use a
	trace file. Try the following steps...
	<screen>
tiian@ubuntu:~$ sudo su - lixa
lixa@ubuntu:~$ export LIXA_TRACE_MASK=0x00000005
lixa@ubuntu:~$ /opt/lixa/sbin/lixad -d
2011-12-04 17:14:46.976067 [4888/3074164464] lixad/daemonize: fork()
2011-12-04 17:14:46.978399 [4889/3074164464] lixad/daemonize: setsid()
2011-12-04 17:14:46.979740 [4889/3074164464] lixad/daemonize: signal()
2011-12-04 17:14:46.980513 [4889/3074164464] lixad/daemonize: fork()
2011-12-04 17:14:46.982516 [4890/3074164464] lixad/daemonize: chdir()
2011-12-04 17:14:46.984002 [4890/3074164464] lixad/daemonize: umask()
	</screen>
	the process is tracing the initial operations and after the
	<emphasis>daemonization</emphasis> it does not produce any more
	messages. By default <filename>stderr</filename> is used as the
	standard tracing file, but the
	<emphasis>daemon</emphasis> disconnects from the terminal
	and closes the <filename>stderr</filename> file.
	To avoid this issue you can specify a specific trace file name using
	the <option>-t</option> (<option>--trace-file</option>) dedicated
	option:
	<screen>
lixa@ubuntu:~$ /opt/lixa/sbin/lixad -d -t /tmp/lixad.trace
lixa@ubuntu:~$ ls -la /tmp/lixad.trace
-rw-r--r-- 1 lixa lixa 349 2011-12-04 17:29 /tmp/lixad.trace
lixa@ubuntu:~$ pkill lixad
	</screen>
	inspecting the content of <filename>/tmp/lixad.trace</filename>
	you can now find messages related to the listener module too:
	<screen>
2011-12-04 17:29:12.435474 [5187/3074373360] lixad/daemonize: fork()
2011-12-04 17:29:12.436593 [5188/3074373360] lixad/daemonize: setsid()
2011-12-04 17:29:12.437187 [5188/3074373360] lixad/daemonize: signal()
2011-12-04 17:29:12.437245 [5188/3074373360] lixad/daemonize: fork()
2011-12-04 17:29:12.435474 [5187/3074373360] lixad/daemonize: fork()
2011-12-04 17:29:12.439878 [5189/3074373360] lixad/daemonize: now daemonized!
2011-12-04 17:29:12.441874 [5189/3074373360] lixad/main: starting
2011-12-04 17:29:12.447862 [5189/3074373360] server_listener
2011-12-04 17:29:12.447940 [5189/3074373360] server_listener: resolving address '127.0.0.1' for listener # 0
2011-12-04 17:29:12.448001 [5189/3074373360] server_listener: creating socket for listener # 0
2011-12-04 17:29:12.448033 [5189/3074373360] server_listener: socket for listener 0 is 10
2011-12-04 17:29:12.448044 [5189/3074373360] server_listener: setting SO_REUSE option for listener # 0
2011-12-04 17:29:12.448142 [5189/3074373360] server_listener: resolving address '0.0.0.0' for listener # 1
2011-12-04 17:29:12.448156 [5189/3074373360] server_listener: creating socket for listener # 1
2011-12-04 17:29:12.448174 [5189/3074373360] server_listener: socket for listener 1 is 11
2011-12-04 17:29:12.448183 [5189/3074373360] server_listener: setting SO_REUSE option for listener # 1
2011-12-04 17:29:12.448213 [5189/3074373360] server_listener_signal
2011-12-04 17:29:12.448262 [5189/3074373360] server_listener_signal/excp=3/ret_cod=0/errno=0
2011-12-04 17:29:12.448275 [5189/3074373360] server_listener_loop
2011-12-04 17:29:12.448284 [5189/3074373360] server_listener_loop: entering poll...
2011-12-04 17:29:23.499666 [5189/3074373360] server_listener_signal_action: signo=15
2011-12-04 17:29:23.499850 [5189/3074373360] server_listener_signal_action: sending message to thread id 0
2011-12-04 17:29:23.499877 [5189/3074373360] server_listener_signal_action: sending message to thread id 1
2011-12-04 17:29:23.499904 [5189/3074373360] server_listener_signal_action: sending message to thread id 2
2011-12-04 17:29:23.499942 [5189/3074373360] server_listener_signal_action: sending message to thread id 3
2011-12-04 17:29:23.499991 [5189/3074373360] server_listener_loop: ready file descriptors = 1
2011-12-04 17:29:23.500003 [5189/3074373360] server_listener_loop: slot=0, fd=2, POLLIN=1, POLLERR=0, POLLHUP=0, POLLNVAL=0
2011-12-04 17:29:23.500025 [5189/3074373360] server_listener_loop: waiting thread (1) id 3074329488 termination...
2011-12-04 17:29:23.521138 [5189/3074373360] server_listener_loop: waiting thread (2) id 3065920400 termination...
2011-12-04 17:29:23.521169 [5189/3074373360] server_listener_loop: waiting thread (3) id 3057511312 termination...
2011-12-04 17:29:23.521180 [5189/3074373360] server_listener_loop/excp=8/ret_cod=0/errno=4
2011-12-04 17:29:23.521190 [5189/3074373360] server_listener/excp=8/ret_cod=0/errno=4
2011-12-04 17:29:23.521558 [5189/3074373360] lixad/main: exiting
	</screen>
	<note><para>
	    The trace file is written using the 
	    <systemitem class="library">stdio</systemitem>
	    and the output is not flushed after every message: if you look
	    at the trace file of a running <command>lixad</command> state
	    server, you will not be able to read the last messages due to
	    the buffering of <systemitem class="library">stdio</systemitem>
	    library. After the
	    server termination you are sure every trace message is inside the
	    trace file.
	</para></note>
      </para>
    </section>
    <section>
      <title>Redirecting the trace messages</title>
      <para>
	In the previous section you discovered how you can send the trace
	messages of <command>lixad</command>. The
	<systemitem class="library">lixac</systemitem> library sends the
	trace messages to the <filename>stderr</filename> file associated to
	the terminal of the user that's running the process; many times you
	would send the messages to a specific disk hosted file. You can
	obtain this behavior using redirection:
	<screen>
tiian@ubuntu:~$ export LIXA_TRACE_MASK=0x00005000
tiian@ubuntu:~$ /opt/lixa/bin/lixat 2&gt;/tmp/lixat.trace
tx_open(): -7
tiian@ubuntu:~$ ls -la /tmp/lixat.trace
-rw-r--r-- 1 tiian tiian 417 2011-12-04 17:43 /tmp/lixat.trace
	</screen>
	You can inspect the content of the file
	<filename>/tmp/lixat.trace</filename>:
	<screen>
2011-12-04 17:43:36.078314 [5544/3074013872] lixa_tx_open
2011-12-04 17:43:36.083822 [5544/3074013872] client_connect
2011-12-04 17:43:36.083890 [5544/3074013872] client_connect: connecting socket 4 to server '127.0.0.1' port 2345
2011-12-04 17:43:36.084862 [5544/3074013872] client_connect/excp=2/ret_cod=-138/errno=111
2011-12-04 17:43:36.084906 [5544/3074013872] lixa_tx_open/TX_*=-7/excp=5/ret_cod=-138/errno=111
	</screen>
      </para>
    </section>
  </section>
  <section xml:id="Non_root_installation">
    <title>Non root installation</title>
    <para>
      [...]
    </para>
  </section>
  <section xml:id="Workload_balanced_environments">
    <title>Workload balanced environments</title>
    <para>
      [...]
    </para>
  </section>
</chapter>
